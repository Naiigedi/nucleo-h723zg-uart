
UARTsample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08007498  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  080074f8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  240000d0  08007558  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  08007558  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014948  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022dc  00000000  00000000  00034a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00036d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e2  00000000  00000000  00037a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032381  00000000  00000000  0003840a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012689  00000000  00000000  0006a78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145630  00000000  00000000  0007ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003548  00000000  00000000  001c2444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001c598c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007418 	.word	0x08007418

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08007418 	.word	0x08007418

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fd0f 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f82d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f989 	bl	800093c <MX_GPIO_Init>
  MX_ETH_Init();
 800062a:	f000 f899 	bl	8000760 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800062e:	f000 f931 	bl	8000894 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000632:	f000 f97b 	bl	800092c <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000636:	f000 f8df 	bl	80007f8 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t msg[] = "hello world!\n\r";
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <main+0x60>)
 800063c:	463c      	mov	r4, r7
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	c407      	stmia	r4!, {r0, r1, r2}
 8000642:	8023      	strh	r3, [r4, #0]
 8000644:	3402      	adds	r4, #2
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	7023      	strb	r3, [r4, #0]
	  HAL_LIN_SendBreak(&huart4);
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0x64>)
 800064c:	f005 fca6 	bl	8005f9c <HAL_LIN_SendBreak>
	  HAL_Delay(2000);	// wait 500ms
 8000650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000654:	f000 fd86 	bl	8001164 <HAL_Delay>
	  HAL_LIN_SendBreak(&huart4);
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <main+0x64>)
 800065a:	f005 fc9f 	bl	8005f9c <HAL_LIN_SendBreak>
	  //HAL_Delay(100);	// wait 100ms
	  HAL_UART_Transmit(&huart4, msg, strlen((char*)msg), 100);
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe53 	bl	800030c <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	4639      	mov	r1, r7
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <main+0x64>)
 8000670:	f005 f82c 	bl	80056cc <HAL_UART_Transmit>
  {
 8000674:	e7e1      	b.n	800063a <main+0x22>
 8000676:	bf00      	nop
 8000678:	08007430 	.word	0x08007430
 800067c:	240001d4 	.word	0x240001d4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	224c      	movs	r2, #76	; 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 fe96 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f006 fe90 	bl	80073c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f002 f9f1 	bl	8002a88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <SystemClock_Config+0xdc>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a2b      	ldr	r2, [pc, #172]	; (800075c <SystemClock_Config+0xdc>)
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xdc>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xdc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d0:	d1f8      	bne.n	80006c4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d2:	2321      	movs	r3, #33	; 0x21
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006ec:	f240 1313 	movw	r3, #275	; 0x113
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006fe:	2304      	movs	r3, #4
 8000700:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000702:	2300      	movs	r3, #0
 8000704:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	4618      	mov	r0, r3
 8000710:	f002 f9f4 	bl	8002afc <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071a:	f000 fa0b 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	233f      	movs	r3, #63	; 0x3f
 8000720:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072a:	2308      	movs	r3, #8
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073c:	2340      	movs	r3, #64	; 0x40
 800073e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2103      	movs	r1, #3
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fdb3 	bl	80032b0 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000750:	f000 f9f0 	bl	8000b34 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	; 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	58024800 	.word	0x58024800

08000760 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ETH_Init+0x80>)
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_ETH_Init+0x84>)
 8000768:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ETH_Init+0x88>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_ETH_Init+0x88>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ETH_Init+0x88>)
 8000778:	22e1      	movs	r2, #225	; 0xe1
 800077a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ETH_Init+0x88>)
 800077e:	2200      	movs	r2, #0
 8000780:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ETH_Init+0x88>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ETH_Init+0x88>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ETH_Init+0x80>)
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_ETH_Init+0x88>)
 8000792:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ETH_Init+0x80>)
 8000796:	2201      	movs	r2, #1
 8000798:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_ETH_Init+0x80>)
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_ETH_Init+0x8c>)
 800079e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ETH_Init+0x80>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MX_ETH_Init+0x90>)
 80007a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_ETH_Init+0x80>)
 80007a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_ETH_Init+0x80>)
 80007b0:	f001 fb84 	bl	8001ebc <HAL_ETH_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007ba:	f000 f9bb 	bl	8000b34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007be:	2238      	movs	r2, #56	; 0x38
 80007c0:	2100      	movs	r1, #0
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_ETH_Init+0x94>)
 80007c4:	f006 fdfc 	bl	80073c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_ETH_Init+0x94>)
 80007ca:	2221      	movs	r2, #33	; 0x21
 80007cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_ETH_Init+0x94>)
 80007d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_ETH_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	24000124 	.word	0x24000124
 80007e4:	40028000 	.word	0x40028000
 80007e8:	240002fc 	.word	0x240002fc
 80007ec:	24000070 	.word	0x24000070
 80007f0:	24000010 	.word	0x24000010
 80007f4:	240000ec 	.word	0x240000ec

080007f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_UART4_Init+0x94>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <MX_UART4_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_UART4_Init+0x94>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_UART4_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_UART4_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_UART4_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_UART4_Init+0x94>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_UART4_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_UART4_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_UART4_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_UART4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_UART4_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart4, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_UART4_Init+0x94>)
 8000844:	f004 fed2 	bl	80055ec <HAL_LIN_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800084e:	f000 f971 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_UART4_Init+0x94>)
 8000856:	f006 fce9 	bl	800722c <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8000860:	f000 f968 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_UART4_Init+0x94>)
 8000868:	f006 fd1e 	bl	80072a8 <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8000872:	f000 f95f 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_UART4_Init+0x94>)
 8000878:	f006 fc9f 	bl	80071ba <HAL_UARTEx_DisableFifoMode>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8000882:	f000 f957 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	240001d4 	.word	0x240001d4
 8000890:	40004c00 	.word	0x40004c00

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART3_UART_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <MX_USART3_UART_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008de:	f004 fe35 	bl	800554c <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f924 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008f0:	f006 fc9c 	bl	800722c <HAL_UARTEx_SetTxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f91b 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000902:	f006 fcd1 	bl	80072a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f912 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000912:	f006 fc52 	bl	80071ba <HAL_UARTEx_DisableFifoMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f90a 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24000268 	.word	0x24000268
 8000928:	40004800 	.word	0x40004800

0800092c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b71      	ldr	r3, [pc, #452]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4a6f      	ldr	r2, [pc, #444]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4b6d      	ldr	r3, [pc, #436]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000970:	4b69      	ldr	r3, [pc, #420]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	4a68      	ldr	r2, [pc, #416]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000980:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b62      	ldr	r3, [pc, #392]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a60      	ldr	r2, [pc, #384]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b5e      	ldr	r3, [pc, #376]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b56      	ldr	r3, [pc, #344]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e8:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b47      	ldr	r3, [pc, #284]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	4a42      	ldr	r2, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a16:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a2a:	483c      	ldr	r0, [pc, #240]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000a2c:	f002 f812 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	483a      	ldr	r0, [pc, #232]	; (8000b20 <MX_GPIO_Init+0x1e4>)
 8000a38:	f002 f80c 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4838      	ldr	r0, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x1e8>)
 8000a42:	f002 f807 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4833      	ldr	r0, [pc, #204]	; (8000b28 <MX_GPIO_Init+0x1ec>)
 8000a5c:	f001 fe52 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a60:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4828      	ldr	r0, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000a7a:	f001 fe43 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_GPIO_Init+0x1e4>)
 8000a98:	f001 fe34 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481e      	ldr	r0, [pc, #120]	; (8000b2c <MX_GPIO_Init+0x1f0>)
 8000ab2:	f001 fe27 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_GPIO_Init+0x1f4>)
 8000acc:	f001 fe1a 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_GPIO_Init+0x1f4>)
 8000aee:	f001 fe09 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x1e8>)
 8000b0a:	f001 fdfb 	bl	8002704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020400 	.word	0x58020400
 8000b20:	58020c00 	.word	0x58020c00
 8000b24:	58021000 	.word	0x58021000
 8000b28:	58020800 	.word	0x58020800
 8000b2c:	58021800 	.word	0x58021800
 8000b30:	58020000 	.word	0x58020000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_MspInit+0x30>)
 8000b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x30>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x30>)
 8000b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	58024400 	.word	0x58024400

08000b74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a59      	ldr	r2, [pc, #356]	; (8000cf8 <HAL_ETH_MspInit+0x184>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f040 80ab 	bne.w	8000cee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b98:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9e:	4a57      	ldr	r2, [pc, #348]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba8:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bbc:	4a4f      	ldr	r2, [pc, #316]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc6:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bd4:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bda:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000be4:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a40      	ldr	r2, [pc, #256]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c6a:	2332      	movs	r3, #50	; 0x32
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	481e      	ldr	r0, [pc, #120]	; (8000d00 <HAL_ETH_MspInit+0x18c>)
 8000c86:	f001 fd3d 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c8a:	2386      	movs	r3, #134	; 0x86
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4817      	ldr	r0, [pc, #92]	; (8000d04 <HAL_ETH_MspInit+0x190>)
 8000ca6:	f001 fd2d 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4810      	ldr	r0, [pc, #64]	; (8000d08 <HAL_ETH_MspInit+0x194>)
 8000cc8:	f001 fd1c 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ccc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cde:	230b      	movs	r3, #11
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_ETH_MspInit+0x198>)
 8000cea:	f001 fd0b 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40028000 	.word	0x40028000
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020800 	.word	0x58020800
 8000d04:	58020000 	.word	0x58020000
 8000d08:	58020400 	.word	0x58020400
 8000d0c:	58021800 	.word	0x58021800

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ba      	sub	sp, #232	; 0xe8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	22b8      	movs	r2, #184	; 0xb8
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f006 fb45 	bl	80073c0 <memset>
  if(huart->Instance==UART4)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a51      	ldr	r2, [pc, #324]	; (8000e80 <HAL_UART_MspInit+0x170>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d14f      	bne.n	8000de0 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d40:	f04f 0202 	mov.w	r2, #2
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fe36 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d62:	f7ff fee7 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <HAL_UART_MspInit+0x178>)
 8000dca:	f001 fc9b 	bl	8002704 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2034      	movs	r0, #52	; 0x34
 8000dd4:	f000 fad9 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dd8:	2034      	movs	r0, #52	; 0x34
 8000dda:	f000 faf0 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dde:	e04b      	b.n	8000e78 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0x17c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d146      	bne.n	8000e78 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dea:	f04f 0202 	mov.w	r2, #2
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fde1 	bl	80039c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000e0c:	f7ff fe92 	bl	8000b34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x174>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e66:	2307      	movs	r3, #7
 8000e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <HAL_UART_MspInit+0x180>)
 8000e74:	f001 fc46 	bl	8002704 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	37e8      	adds	r7, #232	; 0xe8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004c00 	.word	0x40004c00
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020800 	.word	0x58020800
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	58020c00 	.word	0x58020c00

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f920 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <UART4_IRQHandler+0x10>)
 8000eee:	f004 fc7b 	bl	80057e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	240001d4 	.word	0x240001d4

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <SystemInit+0xd0>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <SystemInit+0xd0>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <SystemInit+0xd4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d807      	bhi.n	8000f2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <SystemInit+0xd4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 030f 	bic.w	r3, r3, #15
 8000f24:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <SystemInit+0xd4>)
 8000f26:	f043 0307 	orr.w	r3, r3, #7
 8000f2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <SystemInit+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <SystemInit+0xd8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <SystemInit+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <SystemInit+0xd8>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <SystemInit+0xd8>)
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <SystemInit+0xdc>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <SystemInit+0xd4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <SystemInit+0xd4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 030f 	bic.w	r3, r3, #15
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <SystemInit+0xd4>)
 8000f60:	f043 0307 	orr.w	r3, r3, #7
 8000f64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <SystemInit+0xd8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <SystemInit+0xd8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <SystemInit+0xd8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <SystemInit+0xd8>)
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <SystemInit+0xe0>)
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <SystemInit+0xd8>)
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <SystemInit+0xe4>)
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <SystemInit+0xd8>)
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <SystemInit+0xe8>)
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <SystemInit+0xd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <SystemInit+0xd8>)
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <SystemInit+0xe8>)
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <SystemInit+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <SystemInit+0xd8>)
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <SystemInit+0xe8>)
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <SystemInit+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <SystemInit+0xd8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <SystemInit+0xd8>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <SystemInit+0xd8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <SystemInit+0xec>)
 8000fbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	52002000 	.word	0x52002000
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fdc:	02020200 	.word	0x02020200
 8000fe0:	01ff0000 	.word	0x01ff0000
 8000fe4:	01010280 	.word	0x01010280
 8000fe8:	52004000 	.word	0x52004000

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff0:	f7ff ff84 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f006 f9d9 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fafb 	bl	8000618 <main>
  bx  lr
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001028:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800102c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001030:	08007488 	.word	0x08007488
  ldr r2, =_sbss
 8001034:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001038:	24000308 	.word	0x24000308

0800103c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC3_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001046:	2003      	movs	r0, #3
 8001048:	f000 f994 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800104c:	f002 fae6 	bl	800361c <HAL_RCC_GetSysClockFreq>
 8001050:	4602      	mov	r2, r0
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_Init+0x68>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	4913      	ldr	r1, [pc, #76]	; (80010ac <HAL_Init+0x6c>)
 800105e:	5ccb      	ldrb	r3, [r1, r3]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_Init+0x6c>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_Init+0x70>)
 8001082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_Init+0x74>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f814 	bl	80010b8 <HAL_InitTick>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e002      	b.n	80010a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800109a:	f7ff fd51 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58024400 	.word	0x58024400
 80010ac:	08007440 	.word	0x08007440
 80010b0:	24000004 	.word	0x24000004
 80010b4:	24000000 	.word	0x24000000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e021      	b.n	8001110 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_InitTick+0x64>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f979 	bl	80013da <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f943 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	; (8001120 <HAL_InitTick+0x68>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2400000c 	.word	0x2400000c
 800111c:	24000000 	.word	0x24000000
 8001120:	24000008 	.word	0x24000008

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2400000c 	.word	0x2400000c
 8001148:	24000304 	.word	0x24000304

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	24000304 	.word	0x24000304

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2400000c 	.word	0x2400000c

080011ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	58000400 	.word	0x58000400

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x40>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	05fa0000 	.word	0x05fa0000

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff40 	bl	800121c <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff33 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa4 	bl	8001330 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fea6 	bl	800114c <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2dc      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d008      	beq.n	800142a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2cd      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a76      	ldr	r2, [pc, #472]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04a      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a74      	ldr	r2, [pc, #464]	; (800160c <HAL_DMA_Abort+0x218>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d045      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a73      	ldr	r2, [pc, #460]	; (8001610 <HAL_DMA_Abort+0x21c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d040      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_DMA_Abort+0x220>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d03b      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d036      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_DMA_Abort+0x228>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x22c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d02c      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x230>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d027      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x238>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01d      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x23c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d018      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x240>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x244>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x248>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d009      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x250>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Abort+0xda>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_DMA_Abort+0xdc>
 80014ce:	2300      	movs	r3, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 021e 	bic.w	r2, r2, #30
 80014e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_DMA_Abort+0x214>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d072      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a3a      	ldr	r2, [pc, #232]	; (800160c <HAL_DMA_Abort+0x218>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d06d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <HAL_DMA_Abort+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d068      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_DMA_Abort+0x220>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d063      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	; (8001618 <HAL_DMA_Abort+0x224>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	; (800161c <HAL_DMA_Abort+0x228>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d059      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_DMA_Abort+0x22c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d054      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_DMA_Abort+0x230>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d04f      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a30      	ldr	r2, [pc, #192]	; (8001628 <HAL_DMA_Abort+0x234>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04a      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_DMA_Abort+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d045      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <HAL_DMA_Abort+0x23c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d040      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_DMA_Abort+0x240>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d03b      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_DMA_Abort+0x244>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d036      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_DMA_Abort+0x248>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d031      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_DMA_Abort+0x24c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d02c      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_DMA_Abort+0x250>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d027      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_DMA_Abort+0x254>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <HAL_DMA_Abort+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_DMA_Abort+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_DMA_Abort+0x260>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_DMA_Abort+0x264>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_DMA_Abort+0x268>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_DMA_Abort+0x26c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_DMA_Abort+0x270>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d132      	bne.n	8001668 <HAL_DMA_Abort+0x274>
 8001602:	2301      	movs	r3, #1
 8001604:	e031      	b.n	800166a <HAL_DMA_Abort+0x276>
 8001606:	bf00      	nop
 8001608:	40020010 	.word	0x40020010
 800160c:	40020028 	.word	0x40020028
 8001610:	40020040 	.word	0x40020040
 8001614:	40020058 	.word	0x40020058
 8001618:	40020070 	.word	0x40020070
 800161c:	40020088 	.word	0x40020088
 8001620:	400200a0 	.word	0x400200a0
 8001624:	400200b8 	.word	0x400200b8
 8001628:	40020410 	.word	0x40020410
 800162c:	40020428 	.word	0x40020428
 8001630:	40020440 	.word	0x40020440
 8001634:	40020458 	.word	0x40020458
 8001638:	40020470 	.word	0x40020470
 800163c:	40020488 	.word	0x40020488
 8001640:	400204a0 	.word	0x400204a0
 8001644:	400204b8 	.word	0x400204b8
 8001648:	58025408 	.word	0x58025408
 800164c:	5802541c 	.word	0x5802541c
 8001650:	58025430 	.word	0x58025430
 8001654:	58025444 	.word	0x58025444
 8001658:	58025458 	.word	0x58025458
 800165c:	5802546c 	.word	0x5802546c
 8001660:	58025480 	.word	0x58025480
 8001664:	58025494 	.word	0x58025494
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_DMA_Abort+0x444>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04a      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6b      	ldr	r2, [pc, #428]	; (800183c <HAL_DMA_Abort+0x448>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d045      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d040      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <HAL_DMA_Abort+0x450>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d03b      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a67      	ldr	r2, [pc, #412]	; (8001848 <HAL_DMA_Abort+0x454>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d036      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_DMA_Abort+0x458>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d031      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a64      	ldr	r2, [pc, #400]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d02c      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_DMA_Abort+0x460>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d027      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <HAL_DMA_Abort+0x464>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_Abort+0x468>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d018      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <HAL_DMA_Abort+0x470>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_DMA_Abort+0x474>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a59      	ldr	r2, [pc, #356]	; (800186c <HAL_DMA_Abort+0x478>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d004      	beq.n	800171e <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_DMA_Abort+0x480>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d108      	bne.n	8001730 <HAL_DMA_Abort+0x33c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_DMA_Abort+0x34c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001740:	e013      	b.n	800176a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7ff fd03 	bl	800114c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d90c      	bls.n	800176a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e12d      	b.n	80019c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1e5      	bne.n	8001742 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_DMA_Abort+0x444>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_DMA_Abort+0x448>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_DMA_Abort+0x44c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_DMA_Abort+0x450>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_DMA_Abort+0x454>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_DMA_Abort+0x458>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_DMA_Abort+0x45c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <HAL_DMA_Abort+0x460>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_DMA_Abort+0x464>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_DMA_Abort+0x468>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <HAL_DMA_Abort+0x46c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_DMA_Abort+0x470>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_DMA_Abort+0x474>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_DMA_Abort+0x478>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <HAL_DMA_Abort+0x47c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_DMA_Abort+0x480>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_DMA_Abort+0x426>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_DMA_Abort+0x428>
 800181a:	2300      	movs	r3, #0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d02b      	beq.n	8001878 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	e02a      	b.n	800188e <HAL_DMA_Abort+0x49a>
 8001838:	40020010 	.word	0x40020010
 800183c:	40020028 	.word	0x40020028
 8001840:	40020040 	.word	0x40020040
 8001844:	40020058 	.word	0x40020058
 8001848:	40020070 	.word	0x40020070
 800184c:	40020088 	.word	0x40020088
 8001850:	400200a0 	.word	0x400200a0
 8001854:	400200b8 	.word	0x400200b8
 8001858:	40020410 	.word	0x40020410
 800185c:	40020428 	.word	0x40020428
 8001860:	40020440 	.word	0x40020440
 8001864:	40020458 	.word	0x40020458
 8001868:	40020470 	.word	0x40020470
 800186c:	40020488 	.word	0x40020488
 8001870:	400204a0 	.word	0x400204a0
 8001874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_DMA_Abort+0x5dc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d072      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_DMA_Abort+0x5e0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d06d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_DMA_Abort+0x5e4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d068      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_DMA_Abort+0x5e8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d063      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_DMA_Abort+0x5ec>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_DMA_Abort+0x5f0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d059      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_DMA_Abort+0x5f4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d054      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_DMA_Abort+0x5f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d04f      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <HAL_DMA_Abort+0x5fc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04a      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_DMA_Abort+0x600>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d045      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a40      	ldr	r2, [pc, #256]	; (80019f8 <HAL_DMA_Abort+0x604>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d040      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_DMA_Abort+0x608>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d03b      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <HAL_DMA_Abort+0x60c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d036      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_DMA_Abort+0x610>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <HAL_DMA_Abort+0x614>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d02c      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_DMA_Abort+0x618>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d027      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_DMA_Abort+0x61c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d022      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	; (8001a14 <HAL_DMA_Abort+0x620>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_DMA_Abort+0x624>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d018      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a32      	ldr	r2, [pc, #200]	; (8001a1c <HAL_DMA_Abort+0x628>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_DMA_Abort+0x62c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort+0x630>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_DMA_Abort+0x634>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_DMA_Abort+0x638>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_DMA_Abort+0x58e>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <HAL_DMA_Abort+0x590>
 8001982:	2300      	movs	r3, #0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001990:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020010 	.word	0x40020010
 80019d4:	40020028 	.word	0x40020028
 80019d8:	40020040 	.word	0x40020040
 80019dc:	40020058 	.word	0x40020058
 80019e0:	40020070 	.word	0x40020070
 80019e4:	40020088 	.word	0x40020088
 80019e8:	400200a0 	.word	0x400200a0
 80019ec:	400200b8 	.word	0x400200b8
 80019f0:	40020410 	.word	0x40020410
 80019f4:	40020428 	.word	0x40020428
 80019f8:	40020440 	.word	0x40020440
 80019fc:	40020458 	.word	0x40020458
 8001a00:	40020470 	.word	0x40020470
 8001a04:	40020488 	.word	0x40020488
 8001a08:	400204a0 	.word	0x400204a0
 8001a0c:	400204b8 	.word	0x400204b8
 8001a10:	58025408 	.word	0x58025408
 8001a14:	5802541c 	.word	0x5802541c
 8001a18:	58025430 	.word	0x58025430
 8001a1c:	58025444 	.word	0x58025444
 8001a20:	58025458 	.word	0x58025458
 8001a24:	5802546c 	.word	0x5802546c
 8001a28:	58025480 	.word	0x58025480
 8001a2c:	58025494 	.word	0x58025494

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e237      	b.n	8001eb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d004      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e22c      	b.n	8001eb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <HAL_DMA_Abort_IT+0x1a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d04a      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a5b      	ldr	r2, [pc, #364]	; (8001bd4 <HAL_DMA_Abort_IT+0x1a4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d045      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <HAL_DMA_Abort_IT+0x1a8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d040      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_DMA_Abort_IT+0x1ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d03b      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_DMA_Abort_IT+0x1b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d036      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a55      	ldr	r2, [pc, #340]	; (8001be4 <HAL_DMA_Abort_IT+0x1b4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d031      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <HAL_DMA_Abort_IT+0x1b8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02c      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_DMA_Abort_IT+0x1bc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d027      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a50      	ldr	r2, [pc, #320]	; (8001bf0 <HAL_DMA_Abort_IT+0x1c0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d022      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_DMA_Abort_IT+0x1c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01d      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_DMA_Abort_IT+0x1c8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_DMA_Abort_IT+0x1cc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d013      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_DMA_Abort_IT+0x1d0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00e      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <HAL_DMA_Abort_IT+0x1d4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d009      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_DMA_Abort_IT+0x1d8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_DMA_Abort_IT+0x1dc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Abort_IT+0xcc>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_DMA_Abort_IT+0xce>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8086 	beq.w	8001c10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2204      	movs	r2, #4
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <HAL_DMA_Abort_IT+0x1a0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04a      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2e      	ldr	r2, [pc, #184]	; (8001bd4 <HAL_DMA_Abort_IT+0x1a4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d045      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2c      	ldr	r2, [pc, #176]	; (8001bd8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d040      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <HAL_DMA_Abort_IT+0x1ac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d03b      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d036      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a28      	ldr	r2, [pc, #160]	; (8001be4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d031      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02c      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_DMA_Abort_IT+0x1bc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d027      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d022      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01d      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_DMA_Abort_IT+0x1c8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_DMA_Abort_IT+0x1cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_DMA_Abort_IT+0x1d0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_DMA_Abort_IT+0x1d4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_DMA_Abort_IT+0x1d8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_Abort_IT+0x17c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_DMA_Abort_IT+0x1dc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <HAL_DMA_Abort_IT+0x18e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e178      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x480>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e16f      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x480>
 8001bd0:	40020010 	.word	0x40020010
 8001bd4:	40020028 	.word	0x40020028
 8001bd8:	40020040 	.word	0x40020040
 8001bdc:	40020058 	.word	0x40020058
 8001be0:	40020070 	.word	0x40020070
 8001be4:	40020088 	.word	0x40020088
 8001be8:	400200a0 	.word	0x400200a0
 8001bec:	400200b8 	.word	0x400200b8
 8001bf0:	40020410 	.word	0x40020410
 8001bf4:	40020428 	.word	0x40020428
 8001bf8:	40020440 	.word	0x40020440
 8001bfc:	40020458 	.word	0x40020458
 8001c00:	40020470 	.word	0x40020470
 8001c04:	40020488 	.word	0x40020488
 8001c08:	400204a0 	.word	0x400204a0
 8001c0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 020e 	bic.w	r2, r2, #14
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <HAL_DMA_Abort_IT+0x3a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d04a      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6b      	ldr	r2, [pc, #428]	; (8001ddc <HAL_DMA_Abort_IT+0x3ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d045      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_DMA_Abort_IT+0x3b0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d040      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a68      	ldr	r2, [pc, #416]	; (8001de4 <HAL_DMA_Abort_IT+0x3b4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d03b      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	; (8001de8 <HAL_DMA_Abort_IT+0x3b8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d036      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_DMA_Abort_IT+0x3bc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d031      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a63      	ldr	r2, [pc, #396]	; (8001df0 <HAL_DMA_Abort_IT+0x3c0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02c      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a62      	ldr	r2, [pc, #392]	; (8001df4 <HAL_DMA_Abort_IT+0x3c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d027      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_DMA_Abort_IT+0x3c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d022      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	; (8001dfc <HAL_DMA_Abort_IT+0x3cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d01d      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_DMA_Abort_IT+0x3d0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d018      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <HAL_DMA_Abort_IT+0x3d4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_DMA_Abort_IT+0x3d8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00e      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <HAL_DMA_Abort_IT+0x3dc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a57      	ldr	r2, [pc, #348]	; (8001e10 <HAL_DMA_Abort_IT+0x3e0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x290>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a56      	ldr	r2, [pc, #344]	; (8001e14 <HAL_DMA_Abort_IT+0x3e4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <HAL_DMA_Abort_IT+0x2a2>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_DMA_Abort_IT+0x2b2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <HAL_DMA_Abort_IT+0x3a8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d072      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_DMA_Abort_IT+0x3ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d06d      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_DMA_Abort_IT+0x3b0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d068      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <HAL_DMA_Abort_IT+0x3b4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d063      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_DMA_Abort_IT+0x3b8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_DMA_Abort_IT+0x3bc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d059      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d054      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04f      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04a      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2e      	ldr	r2, [pc, #184]	; (8001dfc <HAL_DMA_Abort_IT+0x3cc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d045      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	; (8001e00 <HAL_DMA_Abort_IT+0x3d0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d040      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <HAL_DMA_Abort_IT+0x3d4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d03b      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <HAL_DMA_Abort_IT+0x3d8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d036      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <HAL_DMA_Abort_IT+0x3dc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_DMA_Abort_IT+0x3e0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d02c      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_DMA_Abort_IT+0x3e4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d027      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <HAL_DMA_Abort_IT+0x3e8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d022      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_DMA_Abort_IT+0x3ec>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01d      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_DMA_Abort_IT+0x3f0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_DMA_Abort_IT+0x3f4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_DMA_Abort_IT+0x3f8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_DMA_Abort_IT+0x3fc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d009      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_DMA_Abort_IT+0x400>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x3a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_DMA_Abort_IT+0x404>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d132      	bne.n	8001e38 <HAL_DMA_Abort_IT+0x408>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e031      	b.n	8001e3a <HAL_DMA_Abort_IT+0x40a>
 8001dd6:	bf00      	nop
 8001dd8:	40020010 	.word	0x40020010
 8001ddc:	40020028 	.word	0x40020028
 8001de0:	40020040 	.word	0x40020040
 8001de4:	40020058 	.word	0x40020058
 8001de8:	40020070 	.word	0x40020070
 8001dec:	40020088 	.word	0x40020088
 8001df0:	400200a0 	.word	0x400200a0
 8001df4:	400200b8 	.word	0x400200b8
 8001df8:	40020410 	.word	0x40020410
 8001dfc:	40020428 	.word	0x40020428
 8001e00:	40020440 	.word	0x40020440
 8001e04:	40020458 	.word	0x40020458
 8001e08:	40020470 	.word	0x40020470
 8001e0c:	40020488 	.word	0x40020488
 8001e10:	400204a0 	.word	0x400204a0
 8001e14:	400204b8 	.word	0x400204b8
 8001e18:	58025408 	.word	0x58025408
 8001e1c:	5802541c 	.word	0x5802541c
 8001e20:	58025430 	.word	0x58025430
 8001e24:	58025444 	.word	0x58025444
 8001e28:	58025458 	.word	0x58025458
 8001e2c:	5802546c 	.word	0x5802546c
 8001e30:	58025480 	.word	0x58025480
 8001e34:	58025494 	.word	0x58025494
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d028      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop

08001ebc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0cf      	b.n	800206e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2223      	movs	r2, #35	; 0x23
 8001edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7fe fe47 	bl	8000b74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_ETH_Init+0x1bc>)
 8001ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eec:	4a62      	ldr	r2, [pc, #392]	; (8002078 <HAL_ETH_Init+0x1bc>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ef6:	4b60      	ldr	r3, [pc, #384]	; (8002078 <HAL_ETH_Init+0x1bc>)
 8001ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7a1b      	ldrb	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff f94d 	bl	80011ac <HAL_SYSCFG_ETHInterfaceSelect>
 8001f12:	e003      	b.n	8001f1c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f14:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f18:	f7ff f948 	bl	80011ac <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001f1c:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_ETH_Init+0x1c0>)
 8001f1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f38:	f7ff f908 	bl	800114c <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f3e:	e011      	b.n	8001f64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f40:	f7ff f904 	bl	800114c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f4e:	d909      	bls.n	8001f64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2204      	movs	r2, #4
 8001f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	22e0      	movs	r2, #224	; 0xe0
 8001f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e084      	b.n	800206e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e4      	bne.n	8001f40 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f886 	bl	8002088 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001f7c:	f001 fcc8 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_ETH_Init+0x1c4>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3a01      	subs	r2, #1
 8001f90:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa71 	bl	800247c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001fa6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22e0      	movs	r2, #224	; 0xe0
 8001fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e049      	b.n	800206e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_ETH_Init+0x1c8>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6952      	ldr	r2, [r2, #20]
 8001fee:	0051      	lsls	r1, r2, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ffa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fad9 	bl	80025b6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fb1f 	bl	8002648 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	3305      	adds	r3, #5
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	021a      	lsls	r2, r3, #8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	3303      	adds	r3, #3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061a      	lsls	r2, r3, #24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	3302      	adds	r3, #2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	3301      	adds	r3, #1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002048:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002056:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002058:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2210      	movs	r2, #16
 8002068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	58024400 	.word	0x58024400
 800207c:	58000400 	.word	0x58000400
 8002080:	431bde83 	.word	0x431bde83
 8002084:	ffff8001 	.word	0xffff8001

08002088 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002098:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020a2:	f001 fc35 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 80020a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d908      	bls.n	80020c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d804      	bhi.n	80020c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e027      	b.n	8002112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d908      	bls.n	80020dc <HAL_ETH_SetMDIOClockRange+0x54>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d204      	bcs.n	80020dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e01a      	b.n	8002112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d303      	bcc.n	80020ec <HAL_ETH_SetMDIOClockRange+0x64>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d911      	bls.n	8002110 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d908      	bls.n	8002106 <HAL_ETH_SetMDIOClockRange+0x7e>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_ETH_SetMDIOClockRange+0xac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d804      	bhi.n	8002106 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e005      	b.n	8002112 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e000      	b.n	8002112 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002110:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	01312cff 	.word	0x01312cff
 8002128:	02160ebf 	.word	0x02160ebf
 800212c:	03938700 	.word	0x03938700
 8002130:	05f5e0ff 	.word	0x05f5e0ff
 8002134:	08f0d17f 	.word	0x08f0d17f

08002138 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800214a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002152:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	7b1b      	ldrb	r3, [r3, #12]
 8002158:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800215a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	7b5b      	ldrb	r3, [r3, #13]
 8002160:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	7b9b      	ldrb	r3, [r3, #14]
 8002168:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800216a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	7bdb      	ldrb	r3, [r3, #15]
 8002170:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002172:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	7c12      	ldrb	r2, [r2, #16]
 8002178:	2a00      	cmp	r2, #0
 800217a:	d102      	bne.n	8002182 <ETH_SetMACConfig+0x4a>
 800217c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002180:	e000      	b.n	8002184 <ETH_SetMACConfig+0x4c>
 8002182:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002184:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	7c52      	ldrb	r2, [r2, #17]
 800218a:	2a00      	cmp	r2, #0
 800218c:	d102      	bne.n	8002194 <ETH_SetMACConfig+0x5c>
 800218e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002192:	e000      	b.n	8002196 <ETH_SetMACConfig+0x5e>
 8002194:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002196:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7c9b      	ldrb	r3, [r3, #18]
 800219c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800219e:	431a      	orrs	r2, r3
               macconf->Speed |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021a4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7f5b      	ldrb	r3, [r3, #29]
 80021b8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	7f92      	ldrb	r2, [r2, #30]
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	d102      	bne.n	80021ca <ETH_SetMACConfig+0x92>
 80021c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c8:	e000      	b.n	80021cc <ETH_SetMACConfig+0x94>
 80021ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7fdb      	ldrb	r3, [r3, #31]
 80021d2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021dc:	2a00      	cmp	r2, #0
 80021de:	d102      	bne.n	80021e6 <ETH_SetMACConfig+0xae>
 80021e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e4:	e000      	b.n	80021e8 <ETH_SetMACConfig+0xb0>
 80021e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021e8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80021ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021f6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80021f8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <ETH_SetMACConfig+0x22c>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	430b      	orrs	r3, r1
 8002214:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002222:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002224:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800222e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002236:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002238:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002240:	2a00      	cmp	r2, #0
 8002242:	d102      	bne.n	800224a <ETH_SetMACConfig+0x112>
 8002244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002248:	e000      	b.n	800224c <ETH_SetMACConfig+0x114>
 800224a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800224c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <ETH_SetMACConfig+0x230>)
 800225e:	4013      	ands	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	430b      	orrs	r3, r1
 8002268:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002270:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <ETH_SetMACConfig+0x234>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	68f9      	ldr	r1, [r7, #12]
 800228a:	430b      	orrs	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002294:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800229a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d101      	bne.n	80022aa <ETH_SetMACConfig+0x172>
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	e000      	b.n	80022ac <ETH_SetMACConfig+0x174>
 80022aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022ac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80022c2:	4013      	ands	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80022d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f023 0103 	bic.w	r1, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002302:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800231e:	2a00      	cmp	r2, #0
 8002320:	d101      	bne.n	8002326 <ETH_SetMACConfig+0x1ee>
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	e000      	b.n	8002328 <ETH_SetMACConfig+0x1f0>
 8002326:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002328:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002330:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800233a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002348:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	00048083 	.word	0x00048083
 8002368:	c0f88000 	.word	0xc0f88000
 800236c:	fffffef0 	.word	0xfffffef0

08002370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <ETH_SetDMAConfig+0xf8>)
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6811      	ldr	r1, [r2, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002396:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
 80023a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <ETH_SetDMAConfig+0xfc>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7b5b      	ldrb	r3, [r3, #13]
 80023ce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <ETH_SetDMAConfig+0x100>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	430b      	orrs	r3, r1
 80023f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002402:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7f5b      	ldrb	r3, [r3, #29]
 8002408:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <ETH_SetDMAConfig+0x104>)
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	430b      	orrs	r3, r1
 8002426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800242a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <ETH_SetDMAConfig+0x108>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	430b      	orrs	r3, r1
 8002454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002458:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	ffff87fd 	.word	0xffff87fd
 800246c:	ffff2ffe 	.word	0xffff2ffe
 8002470:	fffec000 	.word	0xfffec000
 8002474:	ffc0efef 	.word	0xffc0efef
 8002478:	7fc0ffff 	.word	0x7fc0ffff

0800247c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0a4      	sub	sp, #144	; 0x90
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800248a:	2300      	movs	r3, #0
 800248c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80024d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80024f6:	2300      	movs	r3, #0
 80024f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80024fe:	2300      	movs	r3, #0
 8002500:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002514:	2320      	movs	r3, #32
 8002516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002526:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800252c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002530:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002556:	2300      	movs	r3, #0
 8002558:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fde6 	bl	8002138 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002586:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800258a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800259c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fee1 	bl	8002370 <ETH_SetDMAConfig>
}
 80025ae:	bf00      	nop
 80025b0:	3790      	adds	r7, #144	; 0x90
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e01d      	b.n	8002600 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68d9      	ldr	r1, [r3, #12]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2200      	movs	r2, #0
 80025e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	3206      	adds	r2, #6
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d9de      	bls.n	80025c4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	461a      	mov	r2, r3
 8002616:	2303      	movs	r3, #3
 8002618:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e023      	b.n	800269e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6919      	ldr	r1, [r3, #16]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	3212      	adds	r2, #18
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d9d8      	bls.n	8002656 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ca:	461a      	mov	r2, r3
 80026cc:	2303      	movs	r3, #3
 80026ce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002712:	4b86      	ldr	r3, [pc, #536]	; (800292c <HAL_GPIO_Init+0x228>)
 8002714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002716:	e18c      	b.n	8002a32 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 817e 	beq.w	8002a2c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d005      	beq.n	8002748 <HAL_GPIO_Init+0x44>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d130      	bne.n	80027aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800277e:	2201      	movs	r2, #1
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0201 	and.w	r2, r3, #1
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d017      	beq.n	80027e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d123      	bne.n	800283a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	69b9      	ldr	r1, [r7, #24]
 8002836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80d8 	beq.w	8002a2c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_GPIO_Init+0x22c>)
 800287e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002882:	4a2b      	ldr	r2, [pc, #172]	; (8002930 <HAL_GPIO_Init+0x22c>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800288c:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_GPIO_Init+0x22c>)
 800288e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289a:	4a26      	ldr	r2, [pc, #152]	; (8002934 <HAL_GPIO_Init+0x230>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x234>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_GPIO_Init+0x258>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_GPIO_Init+0x238>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x222>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <HAL_GPIO_Init+0x23c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x21e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_GPIO_Init+0x240>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x21a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_GPIO_Init+0x244>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x216>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_GPIO_Init+0x248>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x212>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_GPIO_Init+0x24c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_GPIO_Init+0x250>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x20a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_GPIO_Init+0x254>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x206>
 8002906:	2309      	movs	r3, #9
 8002908:	e029      	b.n	800295e <HAL_GPIO_Init+0x25a>
 800290a:	230a      	movs	r3, #10
 800290c:	e027      	b.n	800295e <HAL_GPIO_Init+0x25a>
 800290e:	2307      	movs	r3, #7
 8002910:	e025      	b.n	800295e <HAL_GPIO_Init+0x25a>
 8002912:	2306      	movs	r3, #6
 8002914:	e023      	b.n	800295e <HAL_GPIO_Init+0x25a>
 8002916:	2305      	movs	r3, #5
 8002918:	e021      	b.n	800295e <HAL_GPIO_Init+0x25a>
 800291a:	2304      	movs	r3, #4
 800291c:	e01f      	b.n	800295e <HAL_GPIO_Init+0x25a>
 800291e:	2303      	movs	r3, #3
 8002920:	e01d      	b.n	800295e <HAL_GPIO_Init+0x25a>
 8002922:	2302      	movs	r3, #2
 8002924:	e01b      	b.n	800295e <HAL_GPIO_Init+0x25a>
 8002926:	2301      	movs	r3, #1
 8002928:	e019      	b.n	800295e <HAL_GPIO_Init+0x25a>
 800292a:	bf00      	nop
 800292c:	58000080 	.word	0x58000080
 8002930:	58024400 	.word	0x58024400
 8002934:	58000400 	.word	0x58000400
 8002938:	58020000 	.word	0x58020000
 800293c:	58020400 	.word	0x58020400
 8002940:	58020800 	.word	0x58020800
 8002944:	58020c00 	.word	0x58020c00
 8002948:	58021000 	.word	0x58021000
 800294c:	58021400 	.word	0x58021400
 8002950:	58021800 	.word	0x58021800
 8002954:	58021c00 	.word	0x58021c00
 8002958:	58022400 	.word	0x58022400
 800295c:	2300      	movs	r3, #0
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296e:	4938      	ldr	r1, [pc, #224]	; (8002a50 <HAL_GPIO_Init+0x34c>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f ae6b 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	3724      	adds	r7, #36	; 0x24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	58000400 	.word	0x58000400

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	619a      	str	r2, [r3, #24]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e01f      	b.n	8002aee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e01d      	b.n	8002aee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_PWREx_ConfigSupply+0x70>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	490f      	ldr	r1, [pc, #60]	; (8002af8 <HAL_PWREx_ConfigSupply+0x70>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ac2:	f7fe fb43 	bl	800114c <HAL_GetTick>
 8002ac6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ac8:	e009      	b.n	8002ade <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aca:	f7fe fb3f 	bl	800114c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad8:	d901      	bls.n	8002ade <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_PWREx_ConfigSupply+0x70>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d1ee      	bne.n	8002aca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	58024800 	.word	0x58024800

08002afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e3c8      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8087 	beq.w	8002c2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1c:	4b88      	ldr	r3, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b26:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d007      	beq.n	8002b42 <HAL_RCC_OscConfig+0x46>
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	2b18      	cmp	r3, #24
 8002b36:	d110      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5e>
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d10b      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x12c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d168      	bne.n	8002c28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e3a2      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x76>
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a75      	ldr	r2, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e02e      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x98>
 8002b7a:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a70      	ldr	r2, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6d      	ldr	r2, [pc, #436]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd4>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xbc>
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xd4>
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a60      	ldr	r2, [pc, #384]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fab8 	bl	800114c <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fab4 	bl	800114c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e356      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf2:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xe4>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe faa4 	bl	800114c <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe faa0 	bl	800114c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e342      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c1a:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x10c>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 808c 	beq.w	8002d50 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c38:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c42:	4b3f      	ldr	r3, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_RCC_OscConfig+0x162>
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2b18      	cmp	r3, #24
 8002c52:	d137      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1c8>
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d132      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e314      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0219 	bic.w	r2, r3, #25
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	492f      	ldr	r1, [pc, #188]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa60 	bl	800114c <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fa5c 	bl	800114c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2fe      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca2:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	061b      	lsls	r3, r3, #24
 8002cbc:	4920      	ldr	r1, [pc, #128]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc2:	e045      	b.n	8002d50 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d026      	beq.n	8002d1a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 0219 	bic.w	r2, r3, #25
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4919      	ldr	r1, [pc, #100]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fa35 	bl	800114c <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fa31 	bl	800114c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e2d3      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	490b      	ldr	r1, [pc, #44]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
 8002d18:	e01a      	b.n	8002d50 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x244>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fa11 	bl	800114c <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fa0d 	bl	800114c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d903      	bls.n	8002d44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e2af      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
 8002d40:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d44:	4b96      	ldr	r3, [pc, #600]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d06a      	beq.n	8002e32 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5c:	4b90      	ldr	r3, [pc, #576]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d64:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d66:	4b8e      	ldr	r3, [pc, #568]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d007      	beq.n	8002d82 <HAL_RCC_OscConfig+0x286>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b18      	cmp	r3, #24
 8002d76:	d11b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2b4>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x29e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e282      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	497d      	ldr	r1, [pc, #500]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dae:	e040      	b.n	8002e32 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d023      	beq.n	8002e00 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002db8:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f9c2 	bl	800114c <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f9be 	bl	800114c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e260      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dde:	4b70      	ldr	r3, [pc, #448]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dea:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4969      	ldr	r1, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
 8002dfe:	e018      	b.n	8002e32 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e00:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f99e 	bl	800114c <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e14:	f7fe f99a 	bl	800114c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e23c      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e26:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d036      	beq.n	8002eac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d019      	beq.n	8002e7a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f97b 	bl	800114c <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f977 	bl	800114c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e219      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x35e>
 8002e78:	e018      	b.n	8002eac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	4a48      	ldr	r2, [pc, #288]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fe f961 	bl	800114c <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe f95d 	bl	800114c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1ff      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d036      	beq.n	8002f26 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d019      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec0:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002ec6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe f93e 	bl	800114c <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed4:	f7fe f93a 	bl	800114c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1dc      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x3d8>
 8002ef2:	e018      	b.n	8002f26 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f00:	f7fe f924 	bl	800114c <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f08:	f7fe f920 	bl	800114c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1c2      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8086 	beq.w	8003040 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x4a8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_RCC_OscConfig+0x4a8>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f40:	f7fe f904 	bl	800114c <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fe f900 	bl	800114c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1a2      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_OscConfig+0x4a8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x480>
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4e6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x4ac>
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a02      	ldr	r2, [pc, #8]	; (8002fa0 <HAL_RCC_OscConfig+0x4a4>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e021      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4e6>
 8002f9e:	bf00      	nop
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	58024800 	.word	0x58024800
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x4ce>
 8002fb0:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a82      	ldr	r2, [pc, #520]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4e6>
 8002fca:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a7c      	ldr	r2, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a79      	ldr	r2, [pc, #484]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d015      	beq.n	8003016 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f8af 	bl	800114c <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f8ab 	bl	800114c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e14b      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003008:	4b6d      	ldr	r3, [pc, #436]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x4f6>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe f899 	bl	800114c <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f895 	bl	800114c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e135      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003034:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 812a 	beq.w	800329e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003052:	2b18      	cmp	r3, #24
 8003054:	f000 80ba 	beq.w	80031cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b02      	cmp	r3, #2
 800305e:	f040 8095 	bne.w	800318c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a56      	ldr	r2, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe f86d 	bl	800114c <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe f869 	bl	800114c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e10b      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCC_OscConfig+0x6c8>)
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	430a      	orrs	r2, r1
 80030a8:	4945      	ldr	r1, [pc, #276]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	628b      	str	r3, [r1, #40]	; 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	3b01      	subs	r3, #1
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	3b01      	subs	r3, #1
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030de:	4938      	ldr	r1, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCC_OscConfig+0x6cc>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030fc:	00d2      	lsls	r2, r2, #3
 80030fe:	4930      	ldr	r1, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003100:	4313      	orrs	r3, r2
 8003102:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f023 020c 	bic.w	r2, r3, #12
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	492b      	ldr	r1, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f023 0202 	bic.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800315e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fd fff2 	bl	800114c <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fd ffee 	bl	800114c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e090      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x670>
 800318a:	e088      	b.n	800329e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 8003192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fd ffd8 	bl	800114c <HAL_GetTick>
 800319c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fd ffd4 	bl	800114c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e076      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RCC_OscConfig+0x6c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x6a4>
 80031be:	e06e      	b.n	800329e <HAL_RCC_OscConfig+0x7a2>
 80031c0:	58024400 	.word	0x58024400
 80031c4:	fffffc0c 	.word	0xfffffc0c
 80031c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d2:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d031      	beq.n	8003244 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0203 	and.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d12a      	bne.n	8003244 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d122      	bne.n	8003244 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e02b      	b.n	80032a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003252:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	429a      	cmp	r2, r3
 800325c:	d01f      	beq.n	800329e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800326a:	f7fd ff6f 	bl	800114c <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003270:	bf00      	nop
 8003272:	f7fd ff6b 	bl	800114c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	4293      	cmp	r3, r2
 800327c:	d0f9      	beq.n	8003272 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 8003280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_RCC_OscConfig+0x7b0>)
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800328a:	00d2      	lsls	r2, r2, #3
 800328c:	4906      	ldr	r1, [pc, #24]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 800328e:	4313      	orrs	r3, r2
 8003290:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x7ac>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3730      	adds	r7, #48	; 0x30
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58024400 	.word	0x58024400
 80032ac:	ffff0007 	.word	0xffff0007

080032b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e19c      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b8a      	ldr	r3, [pc, #552]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b87      	ldr	r3, [pc, #540]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	4985      	ldr	r1, [pc, #532]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b83      	ldr	r3, [pc, #524]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e184      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330c:	429a      	cmp	r2, r3
 800330e:	d908      	bls.n	8003322 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003310:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4975      	ldr	r1, [pc, #468]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800331e:	4313      	orrs	r3, r2
 8003320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d010      	beq.n	8003350 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333a:	429a      	cmp	r2, r3
 800333c:	d908      	bls.n	8003350 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	496a      	ldr	r1, [pc, #424]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800334c:	4313      	orrs	r3, r2
 800334e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003368:	429a      	cmp	r2, r3
 800336a:	d908      	bls.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	495e      	ldr	r1, [pc, #376]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800337a:	4313      	orrs	r3, r2
 800337c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d908      	bls.n	80033ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4953      	ldr	r1, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d908      	bls.n	80033da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f023 020f 	bic.w	r2, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4947      	ldr	r1, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d055      	beq.n	8003492 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4940      	ldr	r1, [pc, #256]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003400:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d121      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0f6      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d115      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0ea      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0de      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0d6      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f023 0207 	bic.w	r2, r3, #7
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4925      	ldr	r1, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 800345e:	4313      	orrs	r3, r2
 8003460:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003462:	f7fd fe73 	bl	800114c <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	e00a      	b.n	8003480 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	f7fd fe6f 	bl	800114c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0be      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	429a      	cmp	r2, r3
 8003490:	d1eb      	bne.n	800346a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d208      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x244>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d214      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	4906      	ldr	r1, [pc, #24]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCC_ClockConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d005      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e086      	b.n	80035fe <HAL_RCC_ClockConfig+0x34e>
 80034f0:	52002000 	.word	0x52002000
 80034f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003510:	429a      	cmp	r2, r3
 8003512:	d208      	bcs.n	8003526 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4939      	ldr	r1, [pc, #228]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003522:	4313      	orrs	r3, r2
 8003524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353e:	429a      	cmp	r2, r3
 8003540:	d208      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	492e      	ldr	r1, [pc, #184]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356c:	429a      	cmp	r2, r3
 800356e:	d208      	bcs.n	8003582 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4922      	ldr	r1, [pc, #136]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 800357e:	4313      	orrs	r3, r2
 8003580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800359a:	429a      	cmp	r2, r3
 800359c:	d208      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4917      	ldr	r1, [pc, #92]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035b0:	f000 f834 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	4912      	ldr	r1, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x35c>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_RCC_ClockConfig+0x358>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4a0d      	ldr	r2, [pc, #52]	; (800360c <HAL_RCC_ClockConfig+0x35c>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x360>)
 80035e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035e8:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <HAL_RCC_ClockConfig+0x364>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x368>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fd60 	bl	80010b8 <HAL_InitTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
 800360c:	08007440 	.word	0x08007440
 8003610:	24000004 	.word	0x24000004
 8003614:	24000000 	.word	0x24000000
 8003618:	24000008 	.word	0x24000008

0800361c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003622:	4bb3      	ldr	r3, [pc, #716]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800362a:	2b18      	cmp	r3, #24
 800362c:	f200 8155 	bhi.w	80038da <HAL_RCC_GetSysClockFreq+0x2be>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800369d 	.word	0x0800369d
 800363c:	080038db 	.word	0x080038db
 8003640:	080038db 	.word	0x080038db
 8003644:	080038db 	.word	0x080038db
 8003648:	080038db 	.word	0x080038db
 800364c:	080038db 	.word	0x080038db
 8003650:	080038db 	.word	0x080038db
 8003654:	080038db 	.word	0x080038db
 8003658:	080036c3 	.word	0x080036c3
 800365c:	080038db 	.word	0x080038db
 8003660:	080038db 	.word	0x080038db
 8003664:	080038db 	.word	0x080038db
 8003668:	080038db 	.word	0x080038db
 800366c:	080038db 	.word	0x080038db
 8003670:	080038db 	.word	0x080038db
 8003674:	080038db 	.word	0x080038db
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080038db 	.word	0x080038db
 8003680:	080038db 	.word	0x080038db
 8003684:	080038db 	.word	0x080038db
 8003688:	080038db 	.word	0x080038db
 800368c:	080038db 	.word	0x080038db
 8003690:	080038db 	.word	0x080038db
 8003694:	080038db 	.word	0x080038db
 8003698:	080036cf 	.word	0x080036cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800369c:	4b94      	ldr	r3, [pc, #592]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	08db      	lsrs	r3, r3, #3
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	4a90      	ldr	r2, [pc, #576]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036ba:	e111      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036bc:	4b8d      	ldr	r3, [pc, #564]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036be:	61bb      	str	r3, [r7, #24]
      break;
 80036c0:	e10e      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c4:	61bb      	str	r3, [r7, #24]
      break;
 80036c6:	e10b      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ca:	61bb      	str	r3, [r7, #24]
      break;
 80036cc:	e108      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036d8:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e4:	4b82      	ldr	r3, [pc, #520]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036ee:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	08db      	lsrs	r3, r3, #3
 80036f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80e1 	beq.w	80038d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b02      	cmp	r3, #2
 8003716:	f000 8083 	beq.w	8003820 <HAL_RCC_GetSysClockFreq+0x204>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b02      	cmp	r3, #2
 800371e:	f200 80a1 	bhi.w	8003864 <HAL_RCC_GetSysClockFreq+0x248>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x114>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d056      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800372e:	e099      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003730:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d02d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800373c:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a02 	vldr	s12, [r7, #8]
 800377a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003796:	e087      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003904 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80037be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037da:	e065      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003908 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ee:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003802:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800381e:	e043      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800390c <HAL_RCC_GetSysClockFreq+0x2f0>
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a02 	vldr	s12, [r7, #8]
 8003846:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003862:	e021      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003908 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a02 	vldr	s12, [r7, #8]
 800388a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003900 <HAL_RCC_GetSysClockFreq+0x2e4>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	0a5b      	lsrs	r3, r3, #9
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	3301      	adds	r3, #1
 80038b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038dc:	61bb      	str	r3, [r7, #24]
      break;
 80038de:	bf00      	nop
  }

  return sysclockfreq;
 80038e0:	69bb      	ldr	r3, [r7, #24]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
 80038f4:	03d09000 	.word	0x03d09000
 80038f8:	003d0900 	.word	0x003d0900
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	46000000 	.word	0x46000000
 8003904:	4c742400 	.word	0x4c742400
 8003908:	4a742400 	.word	0x4a742400
 800390c:	4af42400 	.word	0x4af42400

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003916:	f7ff fe81 	bl	800361c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_GetHCLKFreq+0x50>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <HAL_RCC_GetHCLKFreq+0x54>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_GetHCLKFreq+0x50>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	4a09      	ldr	r2, [pc, #36]	; (8003964 <HAL_RCC_GetHCLKFreq+0x54>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_RCC_GetHCLKFreq+0x58>)
 800394c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800394e:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCC_GetHCLKFreq+0x58>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	58024400 	.word	0x58024400
 8003964:	08007440 	.word	0x08007440
 8003968:	24000004 	.word	0x24000004
 800396c:	24000000 	.word	0x24000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003974:	f7ff ffcc 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	58024400 	.word	0x58024400
 8003998:	08007440 	.word	0x08007440

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039a0:	f7ff ffb6 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	08007440 	.word	0x08007440

080039c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0c6      	sub	sp, #280	; 0x118
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039da:	2300      	movs	r3, #0
 80039dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80039ec:	2500      	movs	r5, #0
 80039ee:	ea54 0305 	orrs.w	r3, r4, r5
 80039f2:	d049      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039fe:	d02f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a04:	d828      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0a:	d01a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a10:	d822      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a1c:	e01c      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1e:	4bab      	ldr	r3, [pc, #684]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4aaa      	ldr	r2, [pc, #680]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a2a:	e01a      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a30:	3308      	adds	r3, #8
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 fc25 	bl	8005284 <RCCEx_PLL2_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a40:	e00f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a46:	3328      	adds	r3, #40	; 0x28
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fccc 	bl	80053e8 <RCCEx_PLL3_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a6a:	4b98      	ldr	r3, [pc, #608]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a78:	4a94      	ldr	r2, [pc, #592]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a94:	f04f 0900 	mov.w	r9, #0
 8003a98:	ea58 0309 	orrs.w	r3, r8, r9
 8003a9c:	d047      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d82a      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ac5 	.word	0x08003ac5
 8003ab4:	08003ad3 	.word	0x08003ad3
 8003ab8:	08003ae9 	.word	0x08003ae9
 8003abc:	08003b07 	.word	0x08003b07
 8003ac0:	08003b07 	.word	0x08003b07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b81      	ldr	r3, [pc, #516]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e01a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fbd2 	bl	8005284 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aec:	3328      	adds	r3, #40	; 0x28
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fc79 	bl	80053e8 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b10:	4b6e      	ldr	r3, [pc, #440]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	f023 0107 	bic.w	r1, r3, #7
 8003b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	4a6b      	ldr	r2, [pc, #428]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6513      	str	r3, [r2, #80]	; 0x50
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003b3a:	f04f 0b00 	mov.w	fp, #0
 8003b3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b42:	d05b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b4c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b50:	d03b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003b52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003b56:	d834      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5c:	d037      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b62:	d82e      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b68:	d033      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b6e:	d828      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b74:	d01a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d822      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b84:	d007      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003b86:	e01c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e01e      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fb70 	bl	8005284 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003baa:	e013      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb0:	3328      	adds	r3, #40	; 0x28
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 fc17 	bl	80053e8 <RCCEx_PLL3_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf2:	e003      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d05d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c28:	d03b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003c2a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c2e:	d834      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c34:	d037      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003c36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c3a:	d82e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c40:	d033      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003c42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c46:	d828      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4c:	d01a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c52:	d822      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e01e      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c72:	3308      	adds	r3, #8
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fb04 	bl	8005284 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c82:	e013      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c88:	3328      	adds	r3, #40	; 0x28
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fbab 	bl	80053e8 <RCCEx_PLL3_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cc4:	4a01      	ldr	r2, [pc, #4]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ce4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d03a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d819      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d00c      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d815      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d019      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d111      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d16:	4baa      	ldr	r3, [pc, #680]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4aa9      	ldr	r2, [pc, #676]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 faa9 	bl	8005284 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d50:	4b9b      	ldr	r3, [pc, #620]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	4a98      	ldr	r2, [pc, #608]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d051      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d98:	d035      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9e:	d82e      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003da4:	d031      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003daa:	d828      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d01a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d822      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d007      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a7d      	ldr	r2, [pc, #500]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fa52 	bl	8005284 <RCCEx_PLL2_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003de6:	e011      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dec:	3328      	adds	r3, #40	; 0x28
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 faf9 	bl	80053e8 <RCCEx_PLL3_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6513      	str	r3, [r2, #80]	; 0x50
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d053      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d033      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e62:	d82c      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e68:	d02f      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e6e:	d826      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e74:	d02b      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003e76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e7a:	d820      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e80:	d012      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e86:	d81a      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d022      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e90:	d115      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e96:	3308      	adds	r3, #8
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f9f2 	bl	8005284 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ea6:	e015      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eac:	3328      	adds	r3, #40	; 0x28
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fa99 	bl	80053e8 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003edc:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6513      	str	r3, [r2, #80]	; 0x50
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ef6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d058      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f26:	d033      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f2c:	d82c      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d02f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d826      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f3e:	d02b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f44:	d820      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4a:	d012      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d81a      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d022      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5a:	d115      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f60:	3308      	adds	r3, #8
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 f98d 	bl	8005284 <RCCEx_PLL2_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f70:	e015      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f76:	3328      	adds	r3, #40	; 0x28
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 fa34 	bl	80053e8 <RCCEx_PLL3_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f86:	e00a      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f8e:	e006      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f90:	bf00      	nop
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f94:	bf00      	nop
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb6:	4a02      	ldr	r2, [pc, #8]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fe2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d037      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff6:	d00e      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffc:	d816      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004006:	d111      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4bc4      	ldr	r3, [pc, #784]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4ac3      	ldr	r2, [pc, #780]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004014:	e00f      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401a:	3308      	adds	r3, #8
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f001 f930 	bl	8005284 <RCCEx_PLL2_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800402a:	e004      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004032:	e000      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004036:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800403e:	4bb7      	ldr	r3, [pc, #732]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404c:	4ab3      	ldr	r2, [pc, #716]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6513      	str	r3, [r2, #80]	; 0x50
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004058:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004072:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d039      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800407c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81c      	bhi.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040c9 	.word	0x080040c9
 8004090:	0800409d 	.word	0x0800409d
 8004094:	080040ab 	.word	0x080040ab
 8004098:	080040c9 	.word	0x080040c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409c:	4b9f      	ldr	r3, [pc, #636]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a9e      	ldr	r2, [pc, #632]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040a8:	e00f      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ae:	3308      	adds	r3, #8
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 f8e6 	bl	8005284 <RCCEx_PLL2_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040be:	e004      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80040c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040d2:	4b92      	ldr	r3, [pc, #584]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f023 0103 	bic.w	r1, r3, #3
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	4a8e      	ldr	r2, [pc, #568]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040e2:	430b      	orrs	r3, r1
 80040e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004106:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800410a:	460b      	mov	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	f000 8099 	beq.w	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004112:	4b83      	ldr	r3, [pc, #524]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a82      	ldr	r2, [pc, #520]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800411e:	f7fd f815 	bl	800114c <HAL_GetTick>
 8004122:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004126:	e00b      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fd f810 	bl	800114c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d903      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800413e:	e005      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004140:	4b77      	ldr	r3, [pc, #476]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ed      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800414c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004150:	2b00      	cmp	r3, #0
 8004152:	d173      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800415c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004160:	4053      	eors	r3, r2
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800416a:	4b6c      	ldr	r3, [pc, #432]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004176:	4b69      	ldr	r3, [pc, #420]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	4a68      	ldr	r2, [pc, #416]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004182:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800418e:	4a63      	ldr	r2, [pc, #396]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	d118      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fc ffd2 	bl	800114c <HAL_GetTick>
 80041a8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ac:	e00d      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fc ffcd 	bl	800114c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041b8:	1ad2      	subs	r2, r2, r3
 80041ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80041be:	429a      	cmp	r2, r3
 80041c0:	d903      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80041c8:	e005      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0eb      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80041d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d129      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ee:	d10e      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80041f0:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004200:	091a      	lsrs	r2, r3, #4
 8004202:	4b48      	ldr	r3, [pc, #288]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004204:	4013      	ands	r3, r2
 8004206:	4a45      	ldr	r2, [pc, #276]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6113      	str	r3, [r2, #16]
 800420c:	e005      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800421c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	4a3c      	ldr	r2, [pc, #240]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800422c:	430b      	orrs	r3, r1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e008      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004236:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004240:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f002 0301 	and.w	r3, r2, #1
 8004250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800425a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	f000 808f 	beq.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800426a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426c:	2b28      	cmp	r3, #40	; 0x28
 800426e:	d871      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	0800435d 	.word	0x0800435d
 800427c:	08004355 	.word	0x08004355
 8004280:	08004355 	.word	0x08004355
 8004284:	08004355 	.word	0x08004355
 8004288:	08004355 	.word	0x08004355
 800428c:	08004355 	.word	0x08004355
 8004290:	08004355 	.word	0x08004355
 8004294:	08004355 	.word	0x08004355
 8004298:	08004329 	.word	0x08004329
 800429c:	08004355 	.word	0x08004355
 80042a0:	08004355 	.word	0x08004355
 80042a4:	08004355 	.word	0x08004355
 80042a8:	08004355 	.word	0x08004355
 80042ac:	08004355 	.word	0x08004355
 80042b0:	08004355 	.word	0x08004355
 80042b4:	08004355 	.word	0x08004355
 80042b8:	0800433f 	.word	0x0800433f
 80042bc:	08004355 	.word	0x08004355
 80042c0:	08004355 	.word	0x08004355
 80042c4:	08004355 	.word	0x08004355
 80042c8:	08004355 	.word	0x08004355
 80042cc:	08004355 	.word	0x08004355
 80042d0:	08004355 	.word	0x08004355
 80042d4:	08004355 	.word	0x08004355
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	08004355 	.word	0x08004355
 80042e0:	08004355 	.word	0x08004355
 80042e4:	08004355 	.word	0x08004355
 80042e8:	08004355 	.word	0x08004355
 80042ec:	08004355 	.word	0x08004355
 80042f0:	08004355 	.word	0x08004355
 80042f4:	08004355 	.word	0x08004355
 80042f8:	0800435d 	.word	0x0800435d
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004355 	.word	0x08004355
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	08004355 	.word	0x08004355
 8004310:	08004355 	.word	0x08004355
 8004314:	08004355 	.word	0x08004355
 8004318:	0800435d 	.word	0x0800435d
 800431c:	58024400 	.word	0x58024400
 8004320:	58024800 	.word	0x58024800
 8004324:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432c:	3308      	adds	r3, #8
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f000 ffa7 	bl	8005284 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800433c:	e00f      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004342:	3328      	adds	r3, #40	; 0x28
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f84e 	bl	80053e8 <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004366:	4bbf      	ldr	r3, [pc, #764]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800436e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004374:	4abb      	ldr	r2, [pc, #748]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6553      	str	r3, [r2, #84]	; 0x54
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004380:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 0302 	and.w	r3, r2, #2
 8004390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800439a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d041      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d824      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	08004401 	.word	0x08004401
 80043b8:	080043cd 	.word	0x080043cd
 80043bc:	080043e3 	.word	0x080043e3
 80043c0:	08004401 	.word	0x08004401
 80043c4:	08004401 	.word	0x08004401
 80043c8:	08004401 	.word	0x08004401
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d0:	3308      	adds	r3, #8
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff55 	bl	8005284 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043e0:	e00f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e6:	3328      	adds	r3, #40	; 0x28
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fffc 	bl	80053e8 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800440a:	4b96      	ldr	r3, [pc, #600]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f023 0107 	bic.w	r1, r3, #7
 8004412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004418:	4a92      	ldr	r2, [pc, #584]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6553      	str	r3, [r2, #84]	; 0x54
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004424:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f002 0304 	and.w	r3, r2, #4
 8004434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800443e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d044      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	2b05      	cmp	r3, #5
 8004452:	d825      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	080044a9 	.word	0x080044a9
 8004460:	08004475 	.word	0x08004475
 8004464:	0800448b 	.word	0x0800448b
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004478:	3308      	adds	r3, #8
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 ff01 	bl	8005284 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448e:	3328      	adds	r3, #40	; 0x28
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 ffa8 	bl	80053e8 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b2:	4b6c      	ldr	r3, [pc, #432]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	f023 0107 	bic.w	r1, r3, #7
 80044ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	4a68      	ldr	r2, [pc, #416]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6593      	str	r3, [r2, #88]	; 0x58
 80044c8:	e003      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 0320 	and.w	r3, r2, #32
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044e2:	2300      	movs	r3, #0
 80044e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	d055      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044fe:	d033      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004504:	d82c      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d826      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004512:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004516:	d02b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004518:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800451c:	d820      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800451e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004522:	d012      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004528:	d81a      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d022      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800452e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004532:	d115      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004538:	3308      	adds	r3, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fea1 	bl	8005284 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004548:	e015      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	3328      	adds	r3, #40	; 0x28
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 ff48 	bl	80053e8 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800455e:	e00a      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004568:	bf00      	nop
 800456a:	e004      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004576:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458e:	4a35      	ldr	r2, [pc, #212]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004590:	430b      	orrs	r3, r1
 8004592:	6553      	str	r3, [r2, #84]	; 0x54
 8004594:	e003      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800459a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d058      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ca:	d033      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80045cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045d0:	d82c      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d02f      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045dc:	d826      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80045de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e2:	d02b      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80045e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e8:	d820      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ee:	d012      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d81a      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d022      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d115      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004604:	3308      	adds	r3, #8
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fe3b 	bl	8005284 <RCCEx_PLL2_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004614:	e015      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461a:	3328      	adds	r3, #40	; 0x28
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fee2 	bl	80053e8 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800462a:	e00a      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004632:	e006      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004634:	bf00      	nop
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004638:	bf00      	nop
 800463a:	e002      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465a:	4a02      	ldr	r2, [pc, #8]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6593      	str	r3, [r2, #88]	; 0x58
 8004660:	e006      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004662:	bf00      	nop
 8004664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800466c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800467c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d055      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004698:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800469c:	d033      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800469e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a2:	d82c      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	d02f      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d826      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b4:	d02b      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046ba:	d820      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c0:	d012      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80046c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c6:	d81a      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d022      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	d115      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdd2 	bl	8005284 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046e6:	e015      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fe79 	bl	80053e8 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046fc:	e00a      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004706:	bf00      	nop
 8004708:	e004      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800470a:	bf00      	nop
 800470c:	e002      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800470e:	bf00      	nop
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800471c:	4ba0      	ldr	r3, [pc, #640]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472c:	4a9c      	ldr	r2, [pc, #624]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800472e:	430b      	orrs	r3, r1
 8004730:	6593      	str	r3, [r2, #88]	; 0x58
 8004732:	e003      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004738:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f002 0308 	and.w	r3, r2, #8
 8004748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004752:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d01e      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800475c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d10c      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476e:	3328      	adds	r3, #40	; 0x28
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fe38 	bl	80053e8 <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004784:	4b86      	ldr	r3, [pc, #536]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004794:	4a82      	ldr	r2, [pc, #520]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f002 0310 	and.w	r3, r2, #16
 80047a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d01e      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047cc:	3328      	adds	r3, #40	; 0x28
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fe09 	bl	80053e8 <RCCEx_PLL3_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e2:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	4a6b      	ldr	r2, [pc, #428]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004804:	67bb      	str	r3, [r7, #120]	; 0x78
 8004806:	2300      	movs	r3, #0
 8004808:	67fb      	str	r3, [r7, #124]	; 0x7c
 800480a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d03e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004820:	d022      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004826:	d81b      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d00b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004832:	e015      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004838:	3308      	adds	r3, #8
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fd21 	bl	8005284 <RCCEx_PLL2_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004848:	e00f      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800484a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484e:	3328      	adds	r3, #40	; 0x28
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fdc8 	bl	80053e8 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800485e:	e004      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004872:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004882:	4a47      	ldr	r2, [pc, #284]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6593      	str	r3, [r2, #88]	; 0x58
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800488e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800489e:	673b      	str	r3, [r7, #112]	; 0x70
 80048a0:	2300      	movs	r3, #0
 80048a2:	677b      	str	r3, [r7, #116]	; 0x74
 80048a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d03b      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ba:	d01f      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80048bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048c0:	d818      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80048c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048cc:	d007      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80048ce:	e011      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	4a32      	ldr	r2, [pc, #200]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048dc:	e00f      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e2:	3328      	adds	r3, #40	; 0x28
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd7e 	bl	80053e8 <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80048fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800490e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6553      	str	r3, [r2, #84]	; 0x54
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004922:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004932:	66bb      	str	r3, [r7, #104]	; 0x68
 8004934:	2300      	movs	r3, #0
 8004936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004938:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d034      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800494c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004950:	d007      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004952:	e011      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800495a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004960:	e00e      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004966:	3308      	adds	r3, #8
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fc8a 	bl	8005284 <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004976:	e003      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004998:	430b      	orrs	r3, r1
 800499a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ba:	2300      	movs	r3, #0
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64
 80049be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d00c      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049cc:	3328      	adds	r3, #40	; 0x28
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fd09 	bl	80053e8 <RCCEx_PLL3_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80049ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f0:	2300      	movs	r3, #0
 80049f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d036      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a08:	d018      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0e:	d811      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d014      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1a:	d80b      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d011      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a26:	4bb7      	ldr	r3, [pc, #732]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4ab6      	ldr	r2, [pc, #728]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a32:	e008      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a3a:	e004      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e002      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a4e:	4bad      	ldr	r3, [pc, #692]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5c:	4aa9      	ldr	r2, [pc, #676]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6553      	str	r3, [r2, #84]	; 0x54
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a78:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d009      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a88:	4b9e      	ldr	r3, [pc, #632]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a9b      	ldr	r2, [pc, #620]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aaa:	2300      	movs	r3, #0
 8004aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ab8:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac6:	4a8f      	ldr	r2, [pc, #572]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	2300      	movs	r3, #0
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ade:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ae8:	4b86      	ldr	r3, [pc, #536]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	4a85      	ldr	r2, [pc, #532]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af2:	6113      	str	r3, [r2, #16]
 8004af4:	4b83      	ldr	r3, [pc, #524]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004af6:	6919      	ldr	r1, [r3, #16]
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b00:	4a80      	ldr	r2, [pc, #512]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b14:	2300      	movs	r3, #0
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b22:	4b78      	ldr	r3, [pc, #480]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	4a74      	ldr	r2, [pc, #464]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b32:	430b      	orrs	r3, r1
 8004b34:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
 8004b44:	2300      	movs	r3, #0
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b52:	4b6c      	ldr	r3, [pc, #432]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	2100      	movs	r1, #0
 8004b72:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d011      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b88:	3308      	adds	r3, #8
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fb79 	bl	8005284 <RCCEx_PLL2_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004b98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6239      	str	r1, [r7, #32]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d011      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc8:	3308      	adds	r3, #8
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fb59 	bl	8005284 <RCCEx_PLL2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	61b9      	str	r1, [r7, #24]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d011      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c08:	3308      	adds	r3, #8
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fb39 	bl	8005284 <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004c18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	2100      	movs	r1, #0
 8004c32:	6139      	str	r1, [r7, #16]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d011      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c48:	3328      	adds	r3, #40	; 0x28
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fbcb 	bl	80053e8 <RCCEx_PLL3_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	2100      	movs	r1, #0
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d011      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c88:	3328      	adds	r3, #40	; 0x28
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fbab 	bl	80053e8 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ca4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	6039      	str	r1, [r7, #0]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d011      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc8:	3328      	adds	r3, #40	; 0x28
 8004cca:	2102      	movs	r1, #2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fb8b 	bl	80053e8 <RCCEx_PLL3_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ce4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004ce8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d02:	bf00      	nop
 8004d04:	58024400 	.word	0x58024400

08004d08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d0c:	f7fe fe00 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	; (8004d30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	08007440 	.word	0x08007440

08004d34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b089      	sub	sp, #36	; 0x24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d3c:	4ba1      	ldr	r3, [pc, #644]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d46:	4b9f      	ldr	r3, [pc, #636]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	0b1b      	lsrs	r3, r3, #12
 8004d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d52:	4b9c      	ldr	r3, [pc, #624]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d5e:	4b99      	ldr	r3, [pc, #612]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	08db      	lsrs	r3, r3, #3
 8004d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8111 	beq.w	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f000 8083 	beq.w	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	f200 80a1 	bhi.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d056      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d9e:	e099      	b.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da0:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02d      	beq.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dac:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	4a84      	ldr	r2, [pc, #528]	; (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e06:	e087      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	e065      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e043      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b48      	ldr	r3, [pc, #288]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e021      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f18:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	0a5b      	lsrs	r3, r3, #9
 8004f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6c:	ee17 2a90 	vmov	r2, s15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	0e1b      	lsrs	r3, r3, #24
 8004f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9a:	ee17 2a90 	vmov	r2, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	3724      	adds	r7, #36	; 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	03d09000 	.word	0x03d09000
 8004fcc:	46000000 	.word	0x46000000
 8004fd0:	4c742400 	.word	0x4c742400
 8004fd4:	4a742400 	.word	0x4a742400
 8004fd8:	4af42400 	.word	0x4af42400

08004fdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	; 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fe4:	4ba1      	ldr	r3, [pc, #644]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fee:	4b9f      	ldr	r3, [pc, #636]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	0d1b      	lsrs	r3, r3, #20
 8004ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ffa:	4b9c      	ldr	r3, [pc, #624]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005006:	4b99      	ldr	r3, [pc, #612]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	08db      	lsrs	r3, r3, #3
 800500c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8111 	beq.w	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	f000 8083 	beq.w	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b02      	cmp	r3, #2
 8005036:	f200 80a1 	bhi.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d056      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005046:	e099      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005048:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02d      	beq.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005054:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	4a84      	ldr	r2, [pc, #528]	; (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b7b      	ldr	r3, [pc, #492]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050ae:	e087      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b6a      	ldr	r3, [pc, #424]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f2:	e065      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b59      	ldr	r3, [pc, #356]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005136:	e043      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b48      	ldr	r3, [pc, #288]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517a:	e021      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b37      	ldr	r3, [pc, #220]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051c0:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	0a5b      	lsrs	r3, r3, #9
 80051c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051da:	edd7 6a07 	vldr	s13, [r7, #28]
 80051de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e6:	ee17 2a90 	vmov	r2, s15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051ee:	4b1f      	ldr	r3, [pc, #124]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005208:	edd7 6a07 	vldr	s13, [r7, #28]
 800520c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005214:	ee17 2a90 	vmov	r2, s15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	0e1b      	lsrs	r3, r3, #24
 8005222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800524a:	e008      	b.n	800525e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
}
 800525e:	bf00      	nop
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
 8005270:	03d09000 	.word	0x03d09000
 8005274:	46000000 	.word	0x46000000
 8005278:	4c742400 	.word	0x4c742400
 800527c:	4a742400 	.word	0x4a742400
 8005280:	4af42400 	.word	0x4af42400

08005284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005292:	4b53      	ldr	r3, [pc, #332]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b03      	cmp	r3, #3
 800529c:	d101      	bne.n	80052a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e099      	b.n	80053d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052a2:	4b4f      	ldr	r3, [pc, #316]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4e      	ldr	r2, [pc, #312]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ae:	f7fb ff4d 	bl	800114c <HAL_GetTick>
 80052b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052b6:	f7fb ff49 	bl	800114c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e086      	b.n	80053d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052c8:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052d4:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	493f      	ldr	r1, [pc, #252]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	628b      	str	r3, [r1, #40]	; 0x28
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	025b      	lsls	r3, r3, #9
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	3b01      	subs	r3, #1
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	3b01      	subs	r3, #1
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005318:	4931      	ldr	r1, [pc, #196]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800531a:	4313      	orrs	r3, r2
 800531c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	492d      	ldr	r1, [pc, #180]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	f023 0220 	bic.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	4928      	ldr	r1, [pc, #160]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800533e:	4313      	orrs	r3, r2
 8005340:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005342:	4b27      	ldr	r3, [pc, #156]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005348:	f023 0310 	bic.w	r3, r3, #16
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005352:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <RCCEx_PLL2_Config+0x160>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	69d2      	ldr	r2, [r2, #28]
 800535a:	00d2      	lsls	r2, r2, #3
 800535c:	4920      	ldr	r1, [pc, #128]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005362:	4b1f      	ldr	r3, [pc, #124]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005374:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800537a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005380:	e00f      	b.n	80053a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d106      	bne.n	8005396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005388:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005394:	e005      	b.n	80053a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ae:	f7fb fecd 	bl	800114c <HAL_GetTick>
 80053b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053b4:	e008      	b.n	80053c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053b6:	f7fb fec9 	bl	800114c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e006      	b.n	80053d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <RCCEx_PLL2_Config+0x15c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
 80053e4:	ffff0007 	.word	0xffff0007

080053e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053f6:	4b53      	ldr	r3, [pc, #332]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d101      	bne.n	8005406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e099      	b.n	800553a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005406:	4b4f      	ldr	r3, [pc, #316]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005412:	f7fb fe9b 	bl	800114c <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005418:	e008      	b.n	800542c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800541a:	f7fb fe97 	bl	800114c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e086      	b.n	800553a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	051b      	lsls	r3, r3, #20
 8005446:	493f      	ldr	r1, [pc, #252]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005448:	4313      	orrs	r3, r2
 800544a:	628b      	str	r3, [r1, #40]	; 0x28
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	3b01      	subs	r3, #1
 8005452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	3b01      	subs	r3, #1
 800545c:	025b      	lsls	r3, r3, #9
 800545e:	b29b      	uxth	r3, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	3b01      	subs	r3, #1
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	3b01      	subs	r3, #1
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800547c:	4931      	ldr	r1, [pc, #196]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	492d      	ldr	r1, [pc, #180]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	4928      	ldr	r1, [pc, #160]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a26      	ldr	r2, [pc, #152]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054b2:	4b24      	ldr	r3, [pc, #144]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <RCCEx_PLL3_Config+0x160>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	69d2      	ldr	r2, [r2, #28]
 80054be:	00d2      	lsls	r2, r2, #3
 80054c0:	4920      	ldr	r1, [pc, #128]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054d8:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054e4:	e00f      	b.n	8005506 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054f8:	e005      	b.n	8005506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4a11      	ldr	r2, [pc, #68]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a0e      	ldr	r2, [pc, #56]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005512:	f7fb fe1b 	bl	800114c <HAL_GetTick>
 8005516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005518:	e008      	b.n	800552c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800551a:	f7fb fe17 	bl	800114c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <RCCEx_PLL3_Config+0x15c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	ffff0007 	.word	0xffff0007

0800554c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e042      	b.n	80055e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fb fbcd 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2224      	movs	r2, #36	; 0x24
 800557a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fd2e 	bl	8005ff0 <UART_SetConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fb8e 	bl	8006cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fc15 	bl	8006e0c <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e061      	b.n	80056c4 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005608:	d101      	bne.n	800560e <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e05a      	b.n	80056c4 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e054      	b.n	80056c4 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fb fb6f 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2224      	movs	r2, #36	; 0x24
 8005636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fcd0 	bl	8005ff0 <UART_SetConfig>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_LIN_Init+0x6e>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e034      	b.n	80056c4 <HAL_LIN_Init+0xd8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_LIN_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fb30 	bl	8006cc8 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005686:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005696:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f023 0120 	bic.w	r1, r3, #32
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fba5 	bl	8006e0c <UART_CheckIdleState>
 80056c2:	4603      	mov	r3, r0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d17b      	bne.n	80057de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_UART_Transmit+0x26>
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e074      	b.n	80057e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005706:	f7fb fd21 	bl	800114c <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d108      	bne.n	8005738 <HAL_UART_Transmit+0x6c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e003      	b.n	8005740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005740:	e030      	b.n	80057a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	2180      	movs	r1, #128	; 0x80
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f001 fc07 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e03d      	b.n	80057e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005778:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3302      	adds	r3, #2
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	e007      	b.n	8005792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	781a      	ldrb	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1c8      	bne.n	8005742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2140      	movs	r1, #64	; 0x40
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f001 fbd0 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b0ba      	sub	sp, #232	; 0xe8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800580e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005812:	f640 030f 	movw	r3, #2063	; 0x80f
 8005816:	4013      	ands	r3, r2
 8005818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800581c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d11b      	bne.n	800585c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800583c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8377 	beq.w	8005f40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	4798      	blx	r3
      }
      return;
 800585a:	e371      	b.n	8005f40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800585c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8123 	beq.w	8005aac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005866:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <HAL_UART_IRQHandler+0x2b8>)
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005872:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005876:	4b8b      	ldr	r3, [pc, #556]	; (8005aa4 <HAL_UART_IRQHandler+0x2bc>)
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8116 	beq.w	8005aac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HAL_UART_IRQHandler+0xc8>
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2201      	movs	r2, #1
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d011      	beq.n	80058e0 <HAL_UART_IRQHandler+0xf8>
 80058bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2202      	movs	r2, #2
 80058ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d6:	f043 0204 	orr.w	r2, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d011      	beq.n	8005910 <HAL_UART_IRQHandler+0x128>
 80058ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2204      	movs	r2, #4
 80058fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f043 0202 	orr.w	r2, r3, #2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d017      	beq.n	800594c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005928:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800592c:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <HAL_UART_IRQHandler+0x2b8>)
 800592e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2208      	movs	r2, #8
 800593a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005954:	2b00      	cmp	r3, #0
 8005956:	d012      	beq.n	800597e <HAL_UART_IRQHandler+0x196>
 8005958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800596c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 82dd 	beq.w	8005f44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d013      	beq.n	80059be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d054      	beq.n	8005a8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fb24 	bl	8007030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d146      	bne.n	8005a84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1d9      	bne.n	80059f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d017      	beq.n	8005a7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <HAL_UART_IRQHandler+0x2c0>)
 8005a54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb ffe7 	bl	8001a30 <HAL_DMA_Abort_IT>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d019      	beq.n	8005a9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005a76:	4610      	mov	r0, r2
 8005a78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7a:	e00f      	b.n	8005a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa77 	bl	8005f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a82:	e00b      	b.n	8005a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fa73 	bl	8005f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8a:	e007      	b.n	8005a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa6f 	bl	8005f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005a9a:	e253      	b.n	8005f44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	bf00      	nop
    return;
 8005a9e:	e251      	b.n	8005f44 <HAL_UART_IRQHandler+0x75c>
 8005aa0:	10000001 	.word	0x10000001
 8005aa4:	04000120 	.word	0x04000120
 8005aa8:	080070fd 	.word	0x080070fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	f040 81e7 	bne.w	8005e84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 81e0 	beq.w	8005e84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 81d9 	beq.w	8005e84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	f040 8151 	bne.w	8005d8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a96      	ldr	r2, [pc, #600]	; (8005d4c <HAL_UART_IRQHandler+0x564>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d068      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a93      	ldr	r2, [pc, #588]	; (8005d50 <HAL_UART_IRQHandler+0x568>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d061      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a91      	ldr	r2, [pc, #580]	; (8005d54 <HAL_UART_IRQHandler+0x56c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d05a      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a8e      	ldr	r2, [pc, #568]	; (8005d58 <HAL_UART_IRQHandler+0x570>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d053      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a8c      	ldr	r2, [pc, #560]	; (8005d5c <HAL_UART_IRQHandler+0x574>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d04c      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a89      	ldr	r2, [pc, #548]	; (8005d60 <HAL_UART_IRQHandler+0x578>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d045      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a87      	ldr	r2, [pc, #540]	; (8005d64 <HAL_UART_IRQHandler+0x57c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d03e      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a84      	ldr	r2, [pc, #528]	; (8005d68 <HAL_UART_IRQHandler+0x580>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d037      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a82      	ldr	r2, [pc, #520]	; (8005d6c <HAL_UART_IRQHandler+0x584>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d030      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a7f      	ldr	r2, [pc, #508]	; (8005d70 <HAL_UART_IRQHandler+0x588>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d029      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	; (8005d74 <HAL_UART_IRQHandler+0x58c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d022      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7a      	ldr	r2, [pc, #488]	; (8005d78 <HAL_UART_IRQHandler+0x590>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01b      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a78      	ldr	r2, [pc, #480]	; (8005d7c <HAL_UART_IRQHandler+0x594>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d014      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a75      	ldr	r2, [pc, #468]	; (8005d80 <HAL_UART_IRQHandler+0x598>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00d      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a73      	ldr	r2, [pc, #460]	; (8005d84 <HAL_UART_IRQHandler+0x59c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d006      	beq.n	8005bca <HAL_UART_IRQHandler+0x3e2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a70      	ldr	r2, [pc, #448]	; (8005d88 <HAL_UART_IRQHandler+0x5a0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d106      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x3f0>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	e005      	b.n	8005be4 <HAL_UART_IRQHandler+0x3fc>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 81ab 	beq.w	8005f48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	f080 81a3 	bcs.w	8005f48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c18:	f000 8087 	beq.w	8005d2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1da      	bne.n	8005c1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e1      	bne.n	8005c66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	f023 0310 	bic.w	r3, r3, #16
 8005cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e4      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fb fb65 	bl	80013f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f91d 	bl	8005f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d4a:	e0fd      	b.n	8005f48 <HAL_UART_IRQHandler+0x760>
 8005d4c:	40020010 	.word	0x40020010
 8005d50:	40020028 	.word	0x40020028
 8005d54:	40020040 	.word	0x40020040
 8005d58:	40020058 	.word	0x40020058
 8005d5c:	40020070 	.word	0x40020070
 8005d60:	40020088 	.word	0x40020088
 8005d64:	400200a0 	.word	0x400200a0
 8005d68:	400200b8 	.word	0x400200b8
 8005d6c:	40020410 	.word	0x40020410
 8005d70:	40020428 	.word	0x40020428
 8005d74:	40020440 	.word	0x40020440
 8005d78:	40020458 	.word	0x40020458
 8005d7c:	40020470 	.word	0x40020470
 8005d80:	40020488 	.word	0x40020488
 8005d84:	400204a0 	.word	0x400204a0
 8005d88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80cf 	beq.w	8005f4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80ca 	beq.w	8005f4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dda:	647b      	str	r3, [r7, #68]	; 0x44
 8005ddc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e4      	bne.n	8005db8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	4b55      	ldr	r3, [pc, #340]	; (8005f58 <HAL_UART_IRQHandler+0x770>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e12:	633a      	str	r2, [r7, #48]	; 0x30
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0310 	bic.w	r3, r3, #16
 8005e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e4      	bne.n	8005e3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f881 	bl	8005f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e82:	e063      	b.n	8005f4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_UART_IRQHandler+0x6c6>
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f969 	bl	800717e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eac:	e051      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03a      	beq.n	8005f50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
    }
    return;
 8005ee2:	e035      	b.n	8005f50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <HAL_UART_IRQHandler+0x71c>
 8005ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f913 	bl	8007128 <UART_EndTransmit_IT>
    return;
 8005f02:	e026      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <HAL_UART_IRQHandler+0x73c>
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 f942 	bl	80071a6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f22:	e016      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <HAL_UART_IRQHandler+0x76a>
 8005f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da0c      	bge.n	8005f52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 f92a 	bl	8007192 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f3e:	e008      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8005f40:	bf00      	nop
 8005f42:	e006      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
    return;
 8005f44:	bf00      	nop
 8005f46:	e004      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8005f48:	bf00      	nop
 8005f4a:	e002      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <HAL_UART_IRQHandler+0x76a>
    return;
 8005f50:	bf00      	nop
  }
}
 8005f52:	37e8      	adds	r7, #232	; 0xe8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	effffffe 	.word	0xeffffffe

08005f5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_LIN_SendBreak+0x16>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e018      	b.n	8005fe4 <HAL_LIN_SendBreak+0x48>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2224      	movs	r2, #36	; 0x24
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0202 	orr.w	r2, r2, #2
 8005fd0:	619a      	str	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff4:	b092      	sub	sp, #72	; 0x48
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	431a      	orrs	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	431a      	orrs	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	4313      	orrs	r3, r2
 8006016:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4bbe      	ldr	r3, [pc, #760]	; (8006318 <UART_SetConfig+0x328>)
 8006020:	4013      	ands	r3, r2
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006028:	430b      	orrs	r3, r1
 800602a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4ab3      	ldr	r2, [pc, #716]	; (800631c <UART_SetConfig+0x32c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006058:	4313      	orrs	r3, r2
 800605a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	4baf      	ldr	r3, [pc, #700]	; (8006320 <UART_SetConfig+0x330>)
 8006064:	4013      	ands	r3, r2
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800606c:	430b      	orrs	r3, r1
 800606e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	f023 010f 	bic.w	r1, r3, #15
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4aa6      	ldr	r2, [pc, #664]	; (8006324 <UART_SetConfig+0x334>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d177      	bne.n	8006180 <UART_SetConfig+0x190>
 8006090:	4ba5      	ldr	r3, [pc, #660]	; (8006328 <UART_SetConfig+0x338>)
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006098:	2b28      	cmp	r3, #40	; 0x28
 800609a:	d86d      	bhi.n	8006178 <UART_SetConfig+0x188>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <UART_SetConfig+0xb4>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	08006149 	.word	0x08006149
 80060a8:	08006179 	.word	0x08006179
 80060ac:	08006179 	.word	0x08006179
 80060b0:	08006179 	.word	0x08006179
 80060b4:	08006179 	.word	0x08006179
 80060b8:	08006179 	.word	0x08006179
 80060bc:	08006179 	.word	0x08006179
 80060c0:	08006179 	.word	0x08006179
 80060c4:	08006151 	.word	0x08006151
 80060c8:	08006179 	.word	0x08006179
 80060cc:	08006179 	.word	0x08006179
 80060d0:	08006179 	.word	0x08006179
 80060d4:	08006179 	.word	0x08006179
 80060d8:	08006179 	.word	0x08006179
 80060dc:	08006179 	.word	0x08006179
 80060e0:	08006179 	.word	0x08006179
 80060e4:	08006159 	.word	0x08006159
 80060e8:	08006179 	.word	0x08006179
 80060ec:	08006179 	.word	0x08006179
 80060f0:	08006179 	.word	0x08006179
 80060f4:	08006179 	.word	0x08006179
 80060f8:	08006179 	.word	0x08006179
 80060fc:	08006179 	.word	0x08006179
 8006100:	08006179 	.word	0x08006179
 8006104:	08006161 	.word	0x08006161
 8006108:	08006179 	.word	0x08006179
 800610c:	08006179 	.word	0x08006179
 8006110:	08006179 	.word	0x08006179
 8006114:	08006179 	.word	0x08006179
 8006118:	08006179 	.word	0x08006179
 800611c:	08006179 	.word	0x08006179
 8006120:	08006179 	.word	0x08006179
 8006124:	08006169 	.word	0x08006169
 8006128:	08006179 	.word	0x08006179
 800612c:	08006179 	.word	0x08006179
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	08006179 	.word	0x08006179
 8006140:	08006179 	.word	0x08006179
 8006144:	08006171 	.word	0x08006171
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e326      	b.n	800679e <UART_SetConfig+0x7ae>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e322      	b.n	800679e <UART_SetConfig+0x7ae>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e31e      	b.n	800679e <UART_SetConfig+0x7ae>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e31a      	b.n	800679e <UART_SetConfig+0x7ae>
 8006168:	2320      	movs	r3, #32
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e316      	b.n	800679e <UART_SetConfig+0x7ae>
 8006170:	2340      	movs	r3, #64	; 0x40
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e312      	b.n	800679e <UART_SetConfig+0x7ae>
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e30e      	b.n	800679e <UART_SetConfig+0x7ae>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a69      	ldr	r2, [pc, #420]	; (800632c <UART_SetConfig+0x33c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d130      	bne.n	80061ec <UART_SetConfig+0x1fc>
 800618a:	4b67      	ldr	r3, [pc, #412]	; (8006328 <UART_SetConfig+0x338>)
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b05      	cmp	r3, #5
 8006194:	d826      	bhi.n	80061e4 <UART_SetConfig+0x1f4>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0x1ac>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061b5 	.word	0x080061b5
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061c5 	.word	0x080061c5
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e2f0      	b.n	800679e <UART_SetConfig+0x7ae>
 80061bc:	2304      	movs	r3, #4
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e2ec      	b.n	800679e <UART_SetConfig+0x7ae>
 80061c4:	2308      	movs	r3, #8
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e2e8      	b.n	800679e <UART_SetConfig+0x7ae>
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e2e4      	b.n	800679e <UART_SetConfig+0x7ae>
 80061d4:	2320      	movs	r3, #32
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e2e0      	b.n	800679e <UART_SetConfig+0x7ae>
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e2dc      	b.n	800679e <UART_SetConfig+0x7ae>
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e2d8      	b.n	800679e <UART_SetConfig+0x7ae>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a4f      	ldr	r2, [pc, #316]	; (8006330 <UART_SetConfig+0x340>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d130      	bne.n	8006258 <UART_SetConfig+0x268>
 80061f6:	4b4c      	ldr	r3, [pc, #304]	; (8006328 <UART_SetConfig+0x338>)
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d826      	bhi.n	8006250 <UART_SetConfig+0x260>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0x218>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006221 	.word	0x08006221
 800620c:	08006229 	.word	0x08006229
 8006210:	08006231 	.word	0x08006231
 8006214:	08006239 	.word	0x08006239
 8006218:	08006241 	.word	0x08006241
 800621c:	08006249 	.word	0x08006249
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e2ba      	b.n	800679e <UART_SetConfig+0x7ae>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e2b6      	b.n	800679e <UART_SetConfig+0x7ae>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e2b2      	b.n	800679e <UART_SetConfig+0x7ae>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e2ae      	b.n	800679e <UART_SetConfig+0x7ae>
 8006240:	2320      	movs	r3, #32
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e2aa      	b.n	800679e <UART_SetConfig+0x7ae>
 8006248:	2340      	movs	r3, #64	; 0x40
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e2a6      	b.n	800679e <UART_SetConfig+0x7ae>
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e2a2      	b.n	800679e <UART_SetConfig+0x7ae>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a35      	ldr	r2, [pc, #212]	; (8006334 <UART_SetConfig+0x344>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d130      	bne.n	80062c4 <UART_SetConfig+0x2d4>
 8006262:	4b31      	ldr	r3, [pc, #196]	; (8006328 <UART_SetConfig+0x338>)
 8006264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	2b05      	cmp	r3, #5
 800626c:	d826      	bhi.n	80062bc <UART_SetConfig+0x2cc>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x284>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006295 	.word	0x08006295
 800627c:	0800629d 	.word	0x0800629d
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062b5 	.word	0x080062b5
 800628c:	2300      	movs	r3, #0
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e284      	b.n	800679e <UART_SetConfig+0x7ae>
 8006294:	2304      	movs	r3, #4
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e280      	b.n	800679e <UART_SetConfig+0x7ae>
 800629c:	2308      	movs	r3, #8
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e27c      	b.n	800679e <UART_SetConfig+0x7ae>
 80062a4:	2310      	movs	r3, #16
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e278      	b.n	800679e <UART_SetConfig+0x7ae>
 80062ac:	2320      	movs	r3, #32
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e274      	b.n	800679e <UART_SetConfig+0x7ae>
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e270      	b.n	800679e <UART_SetConfig+0x7ae>
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e26c      	b.n	800679e <UART_SetConfig+0x7ae>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <UART_SetConfig+0x348>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d142      	bne.n	8006354 <UART_SetConfig+0x364>
 80062ce:	4b16      	ldr	r3, [pc, #88]	; (8006328 <UART_SetConfig+0x338>)
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d838      	bhi.n	800634c <UART_SetConfig+0x35c>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x2f0>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f9 	.word	0x080062f9
 80062e4:	08006301 	.word	0x08006301
 80062e8:	08006309 	.word	0x08006309
 80062ec:	08006311 	.word	0x08006311
 80062f0:	0800633d 	.word	0x0800633d
 80062f4:	08006345 	.word	0x08006345
 80062f8:	2300      	movs	r3, #0
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fe:	e24e      	b.n	800679e <UART_SetConfig+0x7ae>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e24a      	b.n	800679e <UART_SetConfig+0x7ae>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e246      	b.n	800679e <UART_SetConfig+0x7ae>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006316:	e242      	b.n	800679e <UART_SetConfig+0x7ae>
 8006318:	cfff69f3 	.word	0xcfff69f3
 800631c:	58000c00 	.word	0x58000c00
 8006320:	11fff4ff 	.word	0x11fff4ff
 8006324:	40011000 	.word	0x40011000
 8006328:	58024400 	.word	0x58024400
 800632c:	40004400 	.word	0x40004400
 8006330:	40004800 	.word	0x40004800
 8006334:	40004c00 	.word	0x40004c00
 8006338:	40005000 	.word	0x40005000
 800633c:	2320      	movs	r3, #32
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e22c      	b.n	800679e <UART_SetConfig+0x7ae>
 8006344:	2340      	movs	r3, #64	; 0x40
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e228      	b.n	800679e <UART_SetConfig+0x7ae>
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e224      	b.n	800679e <UART_SetConfig+0x7ae>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4ab1      	ldr	r2, [pc, #708]	; (8006620 <UART_SetConfig+0x630>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d176      	bne.n	800644c <UART_SetConfig+0x45c>
 800635e:	4bb1      	ldr	r3, [pc, #708]	; (8006624 <UART_SetConfig+0x634>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006366:	2b28      	cmp	r3, #40	; 0x28
 8006368:	d86c      	bhi.n	8006444 <UART_SetConfig+0x454>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x380>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006415 	.word	0x08006415
 8006374:	08006445 	.word	0x08006445
 8006378:	08006445 	.word	0x08006445
 800637c:	08006445 	.word	0x08006445
 8006380:	08006445 	.word	0x08006445
 8006384:	08006445 	.word	0x08006445
 8006388:	08006445 	.word	0x08006445
 800638c:	08006445 	.word	0x08006445
 8006390:	0800641d 	.word	0x0800641d
 8006394:	08006445 	.word	0x08006445
 8006398:	08006445 	.word	0x08006445
 800639c:	08006445 	.word	0x08006445
 80063a0:	08006445 	.word	0x08006445
 80063a4:	08006445 	.word	0x08006445
 80063a8:	08006445 	.word	0x08006445
 80063ac:	08006445 	.word	0x08006445
 80063b0:	08006425 	.word	0x08006425
 80063b4:	08006445 	.word	0x08006445
 80063b8:	08006445 	.word	0x08006445
 80063bc:	08006445 	.word	0x08006445
 80063c0:	08006445 	.word	0x08006445
 80063c4:	08006445 	.word	0x08006445
 80063c8:	08006445 	.word	0x08006445
 80063cc:	08006445 	.word	0x08006445
 80063d0:	0800642d 	.word	0x0800642d
 80063d4:	08006445 	.word	0x08006445
 80063d8:	08006445 	.word	0x08006445
 80063dc:	08006445 	.word	0x08006445
 80063e0:	08006445 	.word	0x08006445
 80063e4:	08006445 	.word	0x08006445
 80063e8:	08006445 	.word	0x08006445
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006435 	.word	0x08006435
 80063f4:	08006445 	.word	0x08006445
 80063f8:	08006445 	.word	0x08006445
 80063fc:	08006445 	.word	0x08006445
 8006400:	08006445 	.word	0x08006445
 8006404:	08006445 	.word	0x08006445
 8006408:	08006445 	.word	0x08006445
 800640c:	08006445 	.word	0x08006445
 8006410:	0800643d 	.word	0x0800643d
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e1c0      	b.n	800679e <UART_SetConfig+0x7ae>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e1bc      	b.n	800679e <UART_SetConfig+0x7ae>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e1b8      	b.n	800679e <UART_SetConfig+0x7ae>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e1b4      	b.n	800679e <UART_SetConfig+0x7ae>
 8006434:	2320      	movs	r3, #32
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e1b0      	b.n	800679e <UART_SetConfig+0x7ae>
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e1ac      	b.n	800679e <UART_SetConfig+0x7ae>
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e1a8      	b.n	800679e <UART_SetConfig+0x7ae>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a75      	ldr	r2, [pc, #468]	; (8006628 <UART_SetConfig+0x638>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d130      	bne.n	80064b8 <UART_SetConfig+0x4c8>
 8006456:	4b73      	ldr	r3, [pc, #460]	; (8006624 <UART_SetConfig+0x634>)
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b05      	cmp	r3, #5
 8006460:	d826      	bhi.n	80064b0 <UART_SetConfig+0x4c0>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x478>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	08006481 	.word	0x08006481
 800646c:	08006489 	.word	0x08006489
 8006470:	08006491 	.word	0x08006491
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e18a      	b.n	800679e <UART_SetConfig+0x7ae>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e186      	b.n	800679e <UART_SetConfig+0x7ae>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e182      	b.n	800679e <UART_SetConfig+0x7ae>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e17e      	b.n	800679e <UART_SetConfig+0x7ae>
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e17a      	b.n	800679e <UART_SetConfig+0x7ae>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e176      	b.n	800679e <UART_SetConfig+0x7ae>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e172      	b.n	800679e <UART_SetConfig+0x7ae>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a5b      	ldr	r2, [pc, #364]	; (800662c <UART_SetConfig+0x63c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d130      	bne.n	8006524 <UART_SetConfig+0x534>
 80064c2:	4b58      	ldr	r3, [pc, #352]	; (8006624 <UART_SetConfig+0x634>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d826      	bhi.n	800651c <UART_SetConfig+0x52c>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x4e4>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e154      	b.n	800679e <UART_SetConfig+0x7ae>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e150      	b.n	800679e <UART_SetConfig+0x7ae>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e14c      	b.n	800679e <UART_SetConfig+0x7ae>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e148      	b.n	800679e <UART_SetConfig+0x7ae>
 800650c:	2320      	movs	r3, #32
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e144      	b.n	800679e <UART_SetConfig+0x7ae>
 8006514:	2340      	movs	r3, #64	; 0x40
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e140      	b.n	800679e <UART_SetConfig+0x7ae>
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e13c      	b.n	800679e <UART_SetConfig+0x7ae>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a41      	ldr	r2, [pc, #260]	; (8006630 <UART_SetConfig+0x640>)
 800652a:	4293      	cmp	r3, r2
 800652c:	f040 8082 	bne.w	8006634 <UART_SetConfig+0x644>
 8006530:	4b3c      	ldr	r3, [pc, #240]	; (8006624 <UART_SetConfig+0x634>)
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006538:	2b28      	cmp	r3, #40	; 0x28
 800653a:	d86d      	bhi.n	8006618 <UART_SetConfig+0x628>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x554>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	080065e9 	.word	0x080065e9
 8006548:	08006619 	.word	0x08006619
 800654c:	08006619 	.word	0x08006619
 8006550:	08006619 	.word	0x08006619
 8006554:	08006619 	.word	0x08006619
 8006558:	08006619 	.word	0x08006619
 800655c:	08006619 	.word	0x08006619
 8006560:	08006619 	.word	0x08006619
 8006564:	080065f1 	.word	0x080065f1
 8006568:	08006619 	.word	0x08006619
 800656c:	08006619 	.word	0x08006619
 8006570:	08006619 	.word	0x08006619
 8006574:	08006619 	.word	0x08006619
 8006578:	08006619 	.word	0x08006619
 800657c:	08006619 	.word	0x08006619
 8006580:	08006619 	.word	0x08006619
 8006584:	080065f9 	.word	0x080065f9
 8006588:	08006619 	.word	0x08006619
 800658c:	08006619 	.word	0x08006619
 8006590:	08006619 	.word	0x08006619
 8006594:	08006619 	.word	0x08006619
 8006598:	08006619 	.word	0x08006619
 800659c:	08006619 	.word	0x08006619
 80065a0:	08006619 	.word	0x08006619
 80065a4:	08006601 	.word	0x08006601
 80065a8:	08006619 	.word	0x08006619
 80065ac:	08006619 	.word	0x08006619
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006619 	.word	0x08006619
 80065b8:	08006619 	.word	0x08006619
 80065bc:	08006619 	.word	0x08006619
 80065c0:	08006619 	.word	0x08006619
 80065c4:	08006609 	.word	0x08006609
 80065c8:	08006619 	.word	0x08006619
 80065cc:	08006619 	.word	0x08006619
 80065d0:	08006619 	.word	0x08006619
 80065d4:	08006619 	.word	0x08006619
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006619 	.word	0x08006619
 80065e0:	08006619 	.word	0x08006619
 80065e4:	08006611 	.word	0x08006611
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e0d6      	b.n	800679e <UART_SetConfig+0x7ae>
 80065f0:	2304      	movs	r3, #4
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e0d2      	b.n	800679e <UART_SetConfig+0x7ae>
 80065f8:	2308      	movs	r3, #8
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e0ce      	b.n	800679e <UART_SetConfig+0x7ae>
 8006600:	2310      	movs	r3, #16
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006606:	e0ca      	b.n	800679e <UART_SetConfig+0x7ae>
 8006608:	2320      	movs	r3, #32
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e0c6      	b.n	800679e <UART_SetConfig+0x7ae>
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e0c2      	b.n	800679e <UART_SetConfig+0x7ae>
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e0be      	b.n	800679e <UART_SetConfig+0x7ae>
 8006620:	40011400 	.word	0x40011400
 8006624:	58024400 	.word	0x58024400
 8006628:	40007800 	.word	0x40007800
 800662c:	40007c00 	.word	0x40007c00
 8006630:	40011800 	.word	0x40011800
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4aad      	ldr	r2, [pc, #692]	; (80068f0 <UART_SetConfig+0x900>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d176      	bne.n	800672c <UART_SetConfig+0x73c>
 800663e:	4bad      	ldr	r3, [pc, #692]	; (80068f4 <UART_SetConfig+0x904>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006646:	2b28      	cmp	r3, #40	; 0x28
 8006648:	d86c      	bhi.n	8006724 <UART_SetConfig+0x734>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x660>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066f5 	.word	0x080066f5
 8006654:	08006725 	.word	0x08006725
 8006658:	08006725 	.word	0x08006725
 800665c:	08006725 	.word	0x08006725
 8006660:	08006725 	.word	0x08006725
 8006664:	08006725 	.word	0x08006725
 8006668:	08006725 	.word	0x08006725
 800666c:	08006725 	.word	0x08006725
 8006670:	080066fd 	.word	0x080066fd
 8006674:	08006725 	.word	0x08006725
 8006678:	08006725 	.word	0x08006725
 800667c:	08006725 	.word	0x08006725
 8006680:	08006725 	.word	0x08006725
 8006684:	08006725 	.word	0x08006725
 8006688:	08006725 	.word	0x08006725
 800668c:	08006725 	.word	0x08006725
 8006690:	08006705 	.word	0x08006705
 8006694:	08006725 	.word	0x08006725
 8006698:	08006725 	.word	0x08006725
 800669c:	08006725 	.word	0x08006725
 80066a0:	08006725 	.word	0x08006725
 80066a4:	08006725 	.word	0x08006725
 80066a8:	08006725 	.word	0x08006725
 80066ac:	08006725 	.word	0x08006725
 80066b0:	0800670d 	.word	0x0800670d
 80066b4:	08006725 	.word	0x08006725
 80066b8:	08006725 	.word	0x08006725
 80066bc:	08006725 	.word	0x08006725
 80066c0:	08006725 	.word	0x08006725
 80066c4:	08006725 	.word	0x08006725
 80066c8:	08006725 	.word	0x08006725
 80066cc:	08006725 	.word	0x08006725
 80066d0:	08006715 	.word	0x08006715
 80066d4:	08006725 	.word	0x08006725
 80066d8:	08006725 	.word	0x08006725
 80066dc:	08006725 	.word	0x08006725
 80066e0:	08006725 	.word	0x08006725
 80066e4:	08006725 	.word	0x08006725
 80066e8:	08006725 	.word	0x08006725
 80066ec:	08006725 	.word	0x08006725
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e050      	b.n	800679e <UART_SetConfig+0x7ae>
 80066fc:	2304      	movs	r3, #4
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e04c      	b.n	800679e <UART_SetConfig+0x7ae>
 8006704:	2308      	movs	r3, #8
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e048      	b.n	800679e <UART_SetConfig+0x7ae>
 800670c:	2310      	movs	r3, #16
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e044      	b.n	800679e <UART_SetConfig+0x7ae>
 8006714:	2320      	movs	r3, #32
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671a:	e040      	b.n	800679e <UART_SetConfig+0x7ae>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e03c      	b.n	800679e <UART_SetConfig+0x7ae>
 8006724:	2380      	movs	r3, #128	; 0x80
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e038      	b.n	800679e <UART_SetConfig+0x7ae>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a71      	ldr	r2, [pc, #452]	; (80068f8 <UART_SetConfig+0x908>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d130      	bne.n	8006798 <UART_SetConfig+0x7a8>
 8006736:	4b6f      	ldr	r3, [pc, #444]	; (80068f4 <UART_SetConfig+0x904>)
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b05      	cmp	r3, #5
 8006740:	d826      	bhi.n	8006790 <UART_SetConfig+0x7a0>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0x758>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006761 	.word	0x08006761
 800674c:	08006769 	.word	0x08006769
 8006750:	08006771 	.word	0x08006771
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	2302      	movs	r3, #2
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e01a      	b.n	800679e <UART_SetConfig+0x7ae>
 8006768:	2304      	movs	r3, #4
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e016      	b.n	800679e <UART_SetConfig+0x7ae>
 8006770:	2308      	movs	r3, #8
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e012      	b.n	800679e <UART_SetConfig+0x7ae>
 8006778:	2310      	movs	r3, #16
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e00e      	b.n	800679e <UART_SetConfig+0x7ae>
 8006780:	2320      	movs	r3, #32
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e00a      	b.n	800679e <UART_SetConfig+0x7ae>
 8006788:	2340      	movs	r3, #64	; 0x40
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e006      	b.n	800679e <UART_SetConfig+0x7ae>
 8006790:	2380      	movs	r3, #128	; 0x80
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e002      	b.n	800679e <UART_SetConfig+0x7ae>
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a55      	ldr	r2, [pc, #340]	; (80068f8 <UART_SetConfig+0x908>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	f040 80f8 	bne.w	800699a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	dc46      	bgt.n	8006840 <UART_SetConfig+0x850>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	db75      	blt.n	80068a2 <UART_SetConfig+0x8b2>
 80067b6:	3b02      	subs	r3, #2
 80067b8:	2b1e      	cmp	r3, #30
 80067ba:	d872      	bhi.n	80068a2 <UART_SetConfig+0x8b2>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x7d4>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	08006847 	.word	0x08006847
 80067c8:	080068a3 	.word	0x080068a3
 80067cc:	0800684f 	.word	0x0800684f
 80067d0:	080068a3 	.word	0x080068a3
 80067d4:	080068a3 	.word	0x080068a3
 80067d8:	080068a3 	.word	0x080068a3
 80067dc:	0800685f 	.word	0x0800685f
 80067e0:	080068a3 	.word	0x080068a3
 80067e4:	080068a3 	.word	0x080068a3
 80067e8:	080068a3 	.word	0x080068a3
 80067ec:	080068a3 	.word	0x080068a3
 80067f0:	080068a3 	.word	0x080068a3
 80067f4:	080068a3 	.word	0x080068a3
 80067f8:	080068a3 	.word	0x080068a3
 80067fc:	0800686f 	.word	0x0800686f
 8006800:	080068a3 	.word	0x080068a3
 8006804:	080068a3 	.word	0x080068a3
 8006808:	080068a3 	.word	0x080068a3
 800680c:	080068a3 	.word	0x080068a3
 8006810:	080068a3 	.word	0x080068a3
 8006814:	080068a3 	.word	0x080068a3
 8006818:	080068a3 	.word	0x080068a3
 800681c:	080068a3 	.word	0x080068a3
 8006820:	080068a3 	.word	0x080068a3
 8006824:	080068a3 	.word	0x080068a3
 8006828:	080068a3 	.word	0x080068a3
 800682c:	080068a3 	.word	0x080068a3
 8006830:	080068a3 	.word	0x080068a3
 8006834:	080068a3 	.word	0x080068a3
 8006838:	080068a3 	.word	0x080068a3
 800683c:	08006895 	.word	0x08006895
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d02a      	beq.n	800689a <UART_SetConfig+0x8aa>
 8006844:	e02d      	b.n	80068a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006846:	f7fe fa5f 	bl	8004d08 <HAL_RCCEx_GetD3PCLK1Freq>
 800684a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800684c:	e02f      	b.n	80068ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fa6e 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800685c:	e027      	b.n	80068ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800685e:	f107 0318 	add.w	r3, r7, #24
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fbba 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686c:	e01f      	b.n	80068ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686e:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <UART_SetConfig+0x904>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800687a:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <UART_SetConfig+0x904>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <UART_SetConfig+0x90c>)
 8006886:	fa22 f303 	lsr.w	r3, r2, r3
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800688c:	e00f      	b.n	80068ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800688e:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <UART_SetConfig+0x90c>)
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006892:	e00c      	b.n	80068ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006894:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <UART_SetConfig+0x910>)
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006898:	e009      	b.n	80068ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a0:	e005      	b.n	80068ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 81ee 	beq.w	8006c92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	4a12      	ldr	r2, [pc, #72]	; (8006904 <UART_SetConfig+0x914>)
 80068bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	4413      	add	r3, r2
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d305      	bcc.n	80068e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d910      	bls.n	8006908 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80068ec:	e1d1      	b.n	8006c92 <UART_SetConfig+0xca2>
 80068ee:	bf00      	nop
 80068f0:	40011c00 	.word	0x40011c00
 80068f4:	58024400 	.word	0x58024400
 80068f8:	58000c00 	.word	0x58000c00
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	003d0900 	.word	0x003d0900
 8006904:	08007450 	.word	0x08007450
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690a:	2200      	movs	r2, #0
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	60fa      	str	r2, [r7, #12]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	4ac0      	ldr	r2, [pc, #768]	; (8006c18 <UART_SetConfig+0xc28>)
 8006916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691a:	b29b      	uxth	r3, r3
 800691c:	2200      	movs	r2, #0
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800692a:	f7f9 fcf7 	bl	800031c <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	020b      	lsls	r3, r1, #8
 8006940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006944:	0202      	lsls	r2, r0, #8
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	6849      	ldr	r1, [r1, #4]
 800694a:	0849      	lsrs	r1, r1, #1
 800694c:	2000      	movs	r0, #0
 800694e:	460c      	mov	r4, r1
 8006950:	4605      	mov	r5, r0
 8006952:	eb12 0804 	adds.w	r8, r2, r4
 8006956:	eb43 0905 	adc.w	r9, r3, r5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	469a      	mov	sl, r3
 8006962:	4693      	mov	fp, r2
 8006964:	4652      	mov	r2, sl
 8006966:	465b      	mov	r3, fp
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 fcd6 	bl	800031c <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4613      	mov	r3, r2
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697e:	d308      	bcc.n	8006992 <UART_SetConfig+0x9a2>
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006986:	d204      	bcs.n	8006992 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	e17f      	b.n	8006c92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006998:	e17b      	b.n	8006c92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	f040 80bd 	bne.w	8006b20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80069a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	dc48      	bgt.n	8006a40 <UART_SetConfig+0xa50>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db7b      	blt.n	8006aaa <UART_SetConfig+0xaba>
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d879      	bhi.n	8006aaa <UART_SetConfig+0xaba>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x9cc>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	08006a47 	.word	0x08006a47
 80069c0:	08006a4f 	.word	0x08006a4f
 80069c4:	08006aab 	.word	0x08006aab
 80069c8:	08006aab 	.word	0x08006aab
 80069cc:	08006a57 	.word	0x08006a57
 80069d0:	08006aab 	.word	0x08006aab
 80069d4:	08006aab 	.word	0x08006aab
 80069d8:	08006aab 	.word	0x08006aab
 80069dc:	08006a67 	.word	0x08006a67
 80069e0:	08006aab 	.word	0x08006aab
 80069e4:	08006aab 	.word	0x08006aab
 80069e8:	08006aab 	.word	0x08006aab
 80069ec:	08006aab 	.word	0x08006aab
 80069f0:	08006aab 	.word	0x08006aab
 80069f4:	08006aab 	.word	0x08006aab
 80069f8:	08006aab 	.word	0x08006aab
 80069fc:	08006a77 	.word	0x08006a77
 8006a00:	08006aab 	.word	0x08006aab
 8006a04:	08006aab 	.word	0x08006aab
 8006a08:	08006aab 	.word	0x08006aab
 8006a0c:	08006aab 	.word	0x08006aab
 8006a10:	08006aab 	.word	0x08006aab
 8006a14:	08006aab 	.word	0x08006aab
 8006a18:	08006aab 	.word	0x08006aab
 8006a1c:	08006aab 	.word	0x08006aab
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006aab 	.word	0x08006aab
 8006a28:	08006aab 	.word	0x08006aab
 8006a2c:	08006aab 	.word	0x08006aab
 8006a30:	08006aab 	.word	0x08006aab
 8006a34:	08006aab 	.word	0x08006aab
 8006a38:	08006aab 	.word	0x08006aab
 8006a3c:	08006a9d 	.word	0x08006a9d
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d02e      	beq.n	8006aa2 <UART_SetConfig+0xab2>
 8006a44:	e031      	b.n	8006aaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a46:	f7fc ff93 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8006a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a4c:	e033      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a4e:	f7fc ffa5 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8006a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a54:	e02f      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe f96a 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a64:	e027      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a66:	f107 0318 	add.w	r3, r7, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fab6 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a74:	e01f      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a76:	4b69      	ldr	r3, [pc, #420]	; (8006c1c <UART_SetConfig+0xc2c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a82:	4b66      	ldr	r3, [pc, #408]	; (8006c1c <UART_SetConfig+0xc2c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	4a64      	ldr	r2, [pc, #400]	; (8006c20 <UART_SetConfig+0xc30>)
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a94:	e00f      	b.n	8006ab6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006a96:	4b62      	ldr	r3, [pc, #392]	; (8006c20 <UART_SetConfig+0xc30>)
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a9a:	e00c      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a9c:	4b61      	ldr	r3, [pc, #388]	; (8006c24 <UART_SetConfig+0xc34>)
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa0:	e009      	b.n	8006ab6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa8:	e005      	b.n	8006ab6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80ea 	beq.w	8006c92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	4a55      	ldr	r2, [pc, #340]	; (8006c18 <UART_SetConfig+0xc28>)
 8006ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad0:	005a      	lsls	r2, r3, #1
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	441a      	add	r2, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	2b0f      	cmp	r3, #15
 8006ae8:	d916      	bls.n	8006b18 <UART_SetConfig+0xb28>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af0:	d212      	bcs.n	8006b18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f023 030f 	bic.w	r3, r3, #15
 8006afa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	e0bc      	b.n	8006c92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b1e:	e0b8      	b.n	8006c92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	dc4b      	bgt.n	8006bc0 <UART_SetConfig+0xbd0>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f2c0 8087 	blt.w	8006c3c <UART_SetConfig+0xc4c>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	f200 8084 	bhi.w	8006c3c <UART_SetConfig+0xc4c>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0xb4c>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006bc7 	.word	0x08006bc7
 8006b40:	08006bcf 	.word	0x08006bcf
 8006b44:	08006c3d 	.word	0x08006c3d
 8006b48:	08006c3d 	.word	0x08006c3d
 8006b4c:	08006bd7 	.word	0x08006bd7
 8006b50:	08006c3d 	.word	0x08006c3d
 8006b54:	08006c3d 	.word	0x08006c3d
 8006b58:	08006c3d 	.word	0x08006c3d
 8006b5c:	08006be7 	.word	0x08006be7
 8006b60:	08006c3d 	.word	0x08006c3d
 8006b64:	08006c3d 	.word	0x08006c3d
 8006b68:	08006c3d 	.word	0x08006c3d
 8006b6c:	08006c3d 	.word	0x08006c3d
 8006b70:	08006c3d 	.word	0x08006c3d
 8006b74:	08006c3d 	.word	0x08006c3d
 8006b78:	08006c3d 	.word	0x08006c3d
 8006b7c:	08006bf7 	.word	0x08006bf7
 8006b80:	08006c3d 	.word	0x08006c3d
 8006b84:	08006c3d 	.word	0x08006c3d
 8006b88:	08006c3d 	.word	0x08006c3d
 8006b8c:	08006c3d 	.word	0x08006c3d
 8006b90:	08006c3d 	.word	0x08006c3d
 8006b94:	08006c3d 	.word	0x08006c3d
 8006b98:	08006c3d 	.word	0x08006c3d
 8006b9c:	08006c3d 	.word	0x08006c3d
 8006ba0:	08006c3d 	.word	0x08006c3d
 8006ba4:	08006c3d 	.word	0x08006c3d
 8006ba8:	08006c3d 	.word	0x08006c3d
 8006bac:	08006c3d 	.word	0x08006c3d
 8006bb0:	08006c3d 	.word	0x08006c3d
 8006bb4:	08006c3d 	.word	0x08006c3d
 8006bb8:	08006c3d 	.word	0x08006c3d
 8006bbc:	08006c2f 	.word	0x08006c2f
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	d037      	beq.n	8006c34 <UART_SetConfig+0xc44>
 8006bc4:	e03a      	b.n	8006c3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc6:	f7fc fed3 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8006bca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bcc:	e03c      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bce:	f7fc fee5 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8006bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bd4:	e038      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe f8aa 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be4:	e030      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be6:	f107 0318 	add.w	r3, r7, #24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe f9f6 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf4:	e028      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <UART_SetConfig+0xc2c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d012      	beq.n	8006c28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <UART_SetConfig+0xc2c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	08db      	lsrs	r3, r3, #3
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <UART_SetConfig+0xc30>)
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c14:	e018      	b.n	8006c48 <UART_SetConfig+0xc58>
 8006c16:	bf00      	nop
 8006c18:	08007450 	.word	0x08007450
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	03d09000 	.word	0x03d09000
 8006c24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006c28:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <UART_SetConfig+0xccc>)
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2c:	e00c      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <UART_SetConfig+0xcd0>)
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c32:	e009      	b.n	8006c48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3a:	e005      	b.n	8006c48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c46:	bf00      	nop
    }

    if (pclk != 0U)
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d021      	beq.n	8006c92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <UART_SetConfig+0xcd4>)
 8006c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	441a      	add	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d909      	bls.n	8006c8c <UART_SetConfig+0xc9c>
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7e:	d205      	bcs.n	8006c8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e002      	b.n	8006c92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2200      	movs	r2, #0
 8006cac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3748      	adds	r7, #72	; 0x48
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cbc:	03d09000 	.word	0x03d09000
 8006cc0:	003d0900 	.word	0x003d0900
 8006cc4:	08007450 	.word	0x08007450

08006cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01a      	beq.n	8006dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc6:	d10a      	bne.n	8006dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
  }
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b098      	sub	sp, #96	; 0x60
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e1c:	f7fa f996 	bl	800114c <HAL_GetTick>
 8006e20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d12f      	bne.n	8006e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f88e 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d022      	beq.n	8006e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e063      	b.n	8006f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d149      	bne.n	8006f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f857 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d03c      	beq.n	8006f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e6      	bne.n	8006eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f0a:	61fa      	str	r2, [r7, #28]
 8006f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	617b      	str	r3, [r7, #20]
   return(result);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e012      	b.n	8006f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3758      	adds	r7, #88	; 0x58
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f70:	e049      	b.n	8007006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d045      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7a:	f7fa f8e7 	bl	800114c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e048      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d031      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d110      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f839 	bl	8007030 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e029      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe0:	d111      	bne.n	8007006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f81f 	bl	8007030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e00f      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4013      	ands	r3, r2
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	429a      	cmp	r2, r3
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2300      	movne	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	429a      	cmp	r2, r3
 8007022:	d0a6      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b095      	sub	sp, #84	; 0x54
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800704c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
 8007058:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800705c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e6      	bne.n	8007038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	61fb      	str	r3, [r7, #28]
   return(result);
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <UART_EndRxTransfer+0xc8>)
 800707e:	4013      	ands	r3, r2
 8007080:	64bb      	str	r3, [r7, #72]	; 0x48
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800708a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e5      	bne.n	800706a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d118      	bne.n	80070d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0310 	bic.w	r3, r3, #16
 80070ba:	647b      	str	r3, [r7, #68]	; 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	613b      	str	r3, [r7, #16]
   return(result);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e6      	bne.n	80070a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80070ec:	bf00      	nop
 80070ee:	3754      	adds	r7, #84	; 0x54
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	effffffe 	.word	0xeffffffe

080070fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7fe ff28 	bl	8005f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	60bb      	str	r3, [r7, #8]
   return(result);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6979      	ldr	r1, [r7, #20]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	613b      	str	r3, [r7, #16]
   return(result);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e6      	bne.n	8007130 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7fe fef3 	bl	8005f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007176:	bf00      	nop
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e027      	b.n	8007220 <HAL_UARTEx_DisableFifoMode+0x66>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2224      	movs	r2, #36	; 0x24
 80071dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007240:	2302      	movs	r3, #2
 8007242:	e02d      	b.n	80072a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2224      	movs	r2, #36	; 0x24
 8007250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f84f 	bl	8007324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072bc:	2302      	movs	r3, #2
 80072be:	e02d      	b.n	800731c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2224      	movs	r2, #36	; 0x24
 80072cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f811 	bl	8007324 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007330:	2b00      	cmp	r3, #0
 8007332:	d108      	bne.n	8007346 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007344:	e031      	b.n	80073aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007346:	2310      	movs	r3, #16
 8007348:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800734a:	2310      	movs	r3, #16
 800734c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	0e5b      	lsrs	r3, r3, #25
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0f5b      	lsrs	r3, r3, #29
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	7b3a      	ldrb	r2, [r7, #12]
 8007372:	4911      	ldr	r1, [pc, #68]	; (80073b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007374:	5c8a      	ldrb	r2, [r1, r2]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800737a:	7b3a      	ldrb	r2, [r7, #12]
 800737c:	490f      	ldr	r1, [pc, #60]	; (80073bc <UARTEx_SetNbDataToProcess+0x98>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007380:	fb93 f3f2 	sdiv	r3, r3, r2
 8007384:	b29a      	uxth	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	7b7a      	ldrb	r2, [r7, #13]
 8007390:	4909      	ldr	r1, [pc, #36]	; (80073b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007392:	5c8a      	ldrb	r2, [r1, r2]
 8007394:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007398:	7b7a      	ldrb	r2, [r7, #13]
 800739a:	4908      	ldr	r1, [pc, #32]	; (80073bc <UARTEx_SetNbDataToProcess+0x98>)
 800739c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800739e:	fb93 f3f2 	sdiv	r3, r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	08007468 	.word	0x08007468
 80073bc:	08007470 	.word	0x08007470

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	; (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	; (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	; (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	; (8007414 <__libc_init_array+0x44>)
 80073e4:	f000 f818 	bl	8007418 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	08007480 	.word	0x08007480
 800740c:	08007480 	.word	0x08007480
 8007410:	08007480 	.word	0x08007480
 8007414:	08007484 	.word	0x08007484

08007418 <_init>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr

08007424 <_fini>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr
