
UARTsample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800889c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080088ac  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800890c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  240000d0  0800896c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400049c  0800896c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a12  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f2  00000000  00000000  00034b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00036e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e9  00000000  00000000  00037b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032399  00000000  00000000  000384f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126ce  00000000  00000000  0006a892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014568a  00000000  00000000  0007cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003570  00000000  00000000  001c25ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001c5b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800882c 	.word	0x0800882c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800882c 	.word	0x0800882c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <HAL_UART_RxCpltCallback>:
uint16_t rcvLength;             /* 受信?��?ータ数 */
uint8_t rcvBuffer[BUFF_SIZE];   /* 受信バッファ */
uint8_t sndBuffer[BUFF_SIZE];   /* 送信バッファ */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    flagRcved = TRUE;           /* 受信完�?フラグ設?��? */
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_UART_RxCpltCallback+0x1c>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	240002fc 	.word	0x240002fc

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fd6f 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f88d 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f9e9 	bl	8000a1c <MX_GPIO_Init>
  MX_ETH_Init();
 800064a:	f000 f8f9 	bl	8000840 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800064e:	f000 f991 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000652:	f000 f9db 	bl	8000a0c <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000656:	f000 f93f 	bl	80008d8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[] = "hello world!\n\r";
 800065a:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <main+0x10c>)
 800065c:	f107 0418 	add.w	r4, r7, #24
 8000660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000662:	c407      	stmia	r4!, {r0, r1, r2}
 8000664:	8023      	strh	r3, [r4, #0]
 8000666:	3402      	adds	r4, #2
 8000668:	0c1b      	lsrs	r3, r3, #16
 800066a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart4, msg, strlen((char*)msg), 100);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe4b 	bl	800030c <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f107 0118 	add.w	r1, r7, #24
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	4831      	ldr	r0, [pc, #196]	; (8000748 <main+0x110>)
 8000682:	f005 f995 	bl	80059b0 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */
	  do
	      {
	        /* 受信割り込み開始 */
	        HAL_UART_Receive_IT(&huart4, rcvBuffer, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4930      	ldr	r1, [pc, #192]	; (800074c <main+0x114>)
 800068a:	482f      	ldr	r0, [pc, #188]	; (8000748 <main+0x110>)
 800068c:	f005 fab2 	bl	8005bf4 <HAL_UART_Receive_IT>

	        /* 受信割り込み終了待ち */
	        while (flagRcved == FALSE)
 8000690:	bf00      	nop
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <main+0x118>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0fb      	beq.n	8000692 <main+0x5a>
	        {
	            ;
	        }

	        sndBuffer[rcvLength] = rcvBuffer[0];
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <main+0x11c>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <main+0x114>)
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <main+0x120>)
 80006a6:	5499      	strb	r1, [r3, r2]
	        rcvLength++;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <main+0x11c>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <main+0x11c>)
 80006b2:	801a      	strh	r2, [r3, #0]
	        flagRcved = FALSE;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <main+0x118>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	      } while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <main+0x114>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0d      	cmp	r3, #13
 80006c0:	d003      	beq.n	80006ca <main+0x92>
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <main+0x11c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2bc7      	cmp	r3, #199	; 0xc7
 80006c8:	d9dd      	bls.n	8000686 <main+0x4e>


	  	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
	  	  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10);
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <main+0x124>)
 80006de:	f002 fa29 	bl	8002b34 <HAL_GPIO_DeInit>
	  	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	607b      	str	r3, [r7, #4]
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
	  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
	  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
	  	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	4818      	ldr	r0, [pc, #96]	; (800075c <main+0x124>)
 80006fa:	f002 f873 	bl	80027e4 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <main+0x124>)
 8000706:	f002 fb17 	bl	8002d38 <HAL_GPIO_WritePin>

	  	  HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070e:	f000 fd99 	bl	8001244 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0x124>)
 800071a:	f002 fb0d 	bl	8002d38 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10);
 800071e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <main+0x124>)
 8000724:	f002 fa06 	bl	8002b34 <HAL_GPIO_DeInit>

	  	  /* 受信した内容を送信 */
	  	  MX_UART4_Init();
 8000728:	f000 f8d6 	bl	80008d8 <MX_UART4_Init>
	      HAL_UART_Transmit_IT(&huart4, sndBuffer, rcvLength);
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <main+0x11c>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <main+0x120>)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <main+0x110>)
 8000736:	f005 f9c9 	bl	8005acc <HAL_UART_Transmit_IT>
	      rcvLength = 0;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <main+0x11c>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
  {
 8000740:	e7a1      	b.n	8000686 <main+0x4e>
 8000742:	bf00      	nop
 8000744:	08008844 	.word	0x08008844
 8000748:	240001d4 	.word	0x240001d4
 800074c:	24000300 	.word	0x24000300
 8000750:	240002fc 	.word	0x240002fc
 8000754:	240002fe 	.word	0x240002fe
 8000758:	240003c8 	.word	0x240003c8
 800075c:	58020800 	.word	0x58020800

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b09c      	sub	sp, #112	; 0x70
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	224c      	movs	r2, #76	; 0x4c
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f008 f830 	bl	80087d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2220      	movs	r2, #32
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f008 f82a 	bl	80087d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000780:	2002      	movs	r0, #2
 8000782:	f002 faf3 	bl	8002d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <SystemClock_Config+0xdc>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <SystemClock_Config+0xdc>)
 8000790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <SystemClock_Config+0xdc>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a2:	bf00      	nop
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <SystemClock_Config+0xdc>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b0:	d1f8      	bne.n	80007a4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007cc:	f240 1313 	movw	r3, #275	; 0x113
 80007d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007de:	2304      	movs	r3, #4
 80007e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 faf6 	bl	8002de0 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007fa:	f000 fa0b 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	233f      	movs	r3, #63	; 0x3f
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800080a:	2308      	movs	r3, #8
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2103      	movs	r1, #3
 8000824:	4618      	mov	r0, r3
 8000826:	f002 feb5 	bl	8003594 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000830:	f000 f9f0 	bl	8000c14 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3770      	adds	r7, #112	; 0x70
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	58024800 	.word	0x58024800

08000840 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ETH_Init+0x80>)
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_ETH_Init+0x84>)
 8000848:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_ETH_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ETH_Init+0x88>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ETH_Init+0x88>)
 8000858:	22e1      	movs	r2, #225	; 0xe1
 800085a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ETH_Init+0x88>)
 800085e:	2200      	movs	r2, #0
 8000860:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ETH_Init+0x88>)
 8000864:	2200      	movs	r2, #0
 8000866:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ETH_Init+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ETH_Init+0x80>)
 8000870:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_ETH_Init+0x88>)
 8000872:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ETH_Init+0x80>)
 8000876:	2201      	movs	r2, #1
 8000878:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ETH_Init+0x80>)
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_ETH_Init+0x8c>)
 800087e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ETH_Init+0x80>)
 8000882:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <MX_ETH_Init+0x90>)
 8000884:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_ETH_Init+0x80>)
 8000888:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800088c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_ETH_Init+0x80>)
 8000890:	f001 fb84 	bl	8001f9c <HAL_ETH_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800089a:	f000 f9bb 	bl	8000c14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800089e:	2238      	movs	r2, #56	; 0x38
 80008a0:	2100      	movs	r1, #0
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ETH_Init+0x94>)
 80008a4:	f007 ff96 	bl	80087d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_ETH_Init+0x94>)
 80008aa:	2221      	movs	r2, #33	; 0x21
 80008ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_ETH_Init+0x94>)
 80008b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_ETH_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	24000124 	.word	0x24000124
 80008c4:	40028000 	.word	0x40028000
 80008c8:	24000490 	.word	0x24000490
 80008cc:	24000070 	.word	0x24000070
 80008d0:	24000010 	.word	0x24000010
 80008d4:	240000ec 	.word	0x240000ec

080008d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_UART4_Init+0x94>)
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <MX_UART4_Init+0x98>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_UART4_Init+0x94>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_UART4_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_UART4_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_UART4_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_UART4_Init+0x94>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_UART4_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_UART4_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_UART4_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_UART4_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_UART4_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart4, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4812      	ldr	r0, [pc, #72]	; (800096c <MX_UART4_Init+0x94>)
 8000924:	f004 ffd4 	bl	80058d0 <HAL_LIN_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 f971 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_UART4_Init+0x94>)
 8000936:	f007 fe82 	bl	800863e <HAL_UARTEx_SetTxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8000940:	f000 f968 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_UART4_Init+0x94>)
 8000948:	f007 feb7 	bl	80086ba <HAL_UARTEx_SetRxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8000952:	f000 f95f 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_UART4_Init+0x94>)
 8000958:	f007 fe38 	bl	80085cc <HAL_UARTEx_DisableFifoMode>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 f957 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240001d4 	.word	0x240001d4
 8000970:	40004c00 	.word	0x40004c00

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800097a:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_USART3_UART_Init+0x94>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009be:	f004 ff37 	bl	8005830 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 f924 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009d0:	f007 fe35 	bl	800863e <HAL_UARTEx_SetTxFifoThreshold>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f91b 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009e2:	f007 fe6a 	bl	80086ba <HAL_UARTEx_SetRxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f912 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USART3_UART_Init+0x90>)
 80009f2:	f007 fdeb 	bl	80085cc <HAL_UARTEx_DisableFifoMode>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f90a 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000268 	.word	0x24000268
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b71      	ldr	r3, [pc, #452]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a6f      	ldr	r2, [pc, #444]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b6d      	ldr	r3, [pc, #436]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a68      	ldr	r2, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b65      	ldr	r3, [pc, #404]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a60      	ldr	r2, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b5e      	ldr	r3, [pc, #376]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b5a      	ldr	r3, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a59      	ldr	r2, [pc, #356]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b53      	ldr	r3, [pc, #332]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b4f      	ldr	r3, [pc, #316]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac8:	4b4b      	ldr	r3, [pc, #300]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a42      	ldr	r2, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <MX_GPIO_Init+0x1dc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <MX_GPIO_Init+0x1e0>)
 8000b0c:	f002 f914 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	483a      	ldr	r0, [pc, #232]	; (8000c00 <MX_GPIO_Init+0x1e4>)
 8000b18:	f002 f90e 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4838      	ldr	r0, [pc, #224]	; (8000c04 <MX_GPIO_Init+0x1e8>)
 8000b22:	f002 f909 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4833      	ldr	r0, [pc, #204]	; (8000c08 <MX_GPIO_Init+0x1ec>)
 8000b3c:	f001 fe52 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4828      	ldr	r0, [pc, #160]	; (8000bfc <MX_GPIO_Init+0x1e0>)
 8000b5a:	f001 fe43 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4822      	ldr	r0, [pc, #136]	; (8000c00 <MX_GPIO_Init+0x1e4>)
 8000b78:	f001 fe34 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481e      	ldr	r0, [pc, #120]	; (8000c0c <MX_GPIO_Init+0x1f0>)
 8000b92:	f001 fe27 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4819      	ldr	r0, [pc, #100]	; (8000c10 <MX_GPIO_Init+0x1f4>)
 8000bac:	f001 fe1a 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bc2:	230a      	movs	r3, #10
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <MX_GPIO_Init+0x1f4>)
 8000bce:	f001 fe09 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_GPIO_Init+0x1e8>)
 8000bea:	f001 fdfb 	bl	80027e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	58020400 	.word	0x58020400
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	58021000 	.word	0x58021000
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58021800 	.word	0x58021800
 8000c10:	58020000 	.word	0x58020000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x30>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a59      	ldr	r2, [pc, #356]	; (8000dd8 <HAL_ETH_MspInit+0x184>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	f040 80ab 	bne.w	8000dce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7e:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c96:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c9c:	4a4f      	ldr	r2, [pc, #316]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cb4:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cba:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a39      	ldr	r2, [pc, #228]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d4a:	2332      	movs	r3, #50	; 0x32
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <HAL_ETH_MspInit+0x18c>)
 8000d66:	f001 fd3d 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6a:	2386      	movs	r3, #134	; 0x86
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <HAL_ETH_MspInit+0x190>)
 8000d86:	f001 fd2d 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9c:	230b      	movs	r3, #11
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <HAL_ETH_MspInit+0x194>)
 8000da8:	f001 fd1c 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <HAL_ETH_MspInit+0x198>)
 8000dca:	f001 fd0b 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	; 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40028000 	.word	0x40028000
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020800 	.word	0x58020800
 8000de4:	58020000 	.word	0x58020000
 8000de8:	58020400 	.word	0x58020400
 8000dec:	58021800 	.word	0x58021800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ba      	sub	sp, #232	; 0xe8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	22b8      	movs	r2, #184	; 0xb8
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fcdf 	bl	80087d4 <memset>
  if(huart->Instance==UART4)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <HAL_UART_MspInit+0x170>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d14f      	bne.n	8000ec0 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e20:	f04f 0202 	mov.w	r2, #2
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 ff38 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e42:	f7ff fee7 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e4c:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	482f      	ldr	r0, [pc, #188]	; (8000f68 <HAL_UART_MspInit+0x178>)
 8000eaa:	f001 fc9b 	bl	80027e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2034      	movs	r0, #52	; 0x34
 8000eb4:	f000 fad9 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000eb8:	2034      	movs	r0, #52	; 0x34
 8000eba:	f000 faf0 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ebe:	e04b      	b.n	8000f58 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <HAL_UART_MspInit+0x17c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d146      	bne.n	8000f58 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eca:	f04f 0202 	mov.w	r2, #2
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fee3 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000eec:	f7ff fe92 	bl	8000c14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000f16:	f043 0308 	orr.w	r3, r3, #8
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x174>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f46:	2307      	movs	r3, #7
 8000f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <HAL_UART_MspInit+0x180>)
 8000f54:	f001 fc46 	bl	80027e4 <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	37e8      	adds	r7, #232	; 0xe8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004c00 	.word	0x40004c00
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	58020c00 	.word	0x58020c00

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f920 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <UART4_IRQHandler+0x10>)
 8000fce:	f004 fe5d 	bl	8005c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	240001d4 	.word	0x240001d4

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <SystemInit+0xd0>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <SystemInit+0xd0>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <SystemInit+0xd4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	2b06      	cmp	r3, #6
 8000ffa:	d807      	bhi.n	800100c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <SystemInit+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 030f 	bic.w	r3, r3, #15
 8001004:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <SystemInit+0xd4>)
 8001006:	f043 0307 	orr.w	r3, r3, #7
 800100a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <SystemInit+0xd8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <SystemInit+0xd8>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <SystemInit+0xd8>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <SystemInit+0xd8>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <SystemInit+0xd8>)
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <SystemInit+0xdc>)
 8001026:	4013      	ands	r3, r2
 8001028:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <SystemInit+0xd4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <SystemInit+0xd4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 030f 	bic.w	r3, r3, #15
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <SystemInit+0xd4>)
 8001040:	f043 0307 	orr.w	r3, r3, #7
 8001044:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <SystemInit+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <SystemInit+0xd8>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <SystemInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <SystemInit+0xd8>)
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <SystemInit+0xe0>)
 800105c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <SystemInit+0xd8>)
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <SystemInit+0xe4>)
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <SystemInit+0xd8>)
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <SystemInit+0xe8>)
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SystemInit+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <SystemInit+0xd8>)
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <SystemInit+0xe8>)
 8001074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SystemInit+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <SystemInit+0xd8>)
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <SystemInit+0xe8>)
 8001080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <SystemInit+0xd8>)
 8001084:	2200      	movs	r2, #0
 8001086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <SystemInit+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <SystemInit+0xd8>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <SystemInit+0xd8>)
 8001096:	2200      	movs	r2, #0
 8001098:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <SystemInit+0xec>)
 800109c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	52002000 	.word	0x52002000
 80010b4:	58024400 	.word	0x58024400
 80010b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010bc:	02020200 	.word	0x02020200
 80010c0:	01ff0000 	.word	0x01ff0000
 80010c4:	01010280 	.word	0x01010280
 80010c8:	52004000 	.word	0x52004000

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d0:	f7ff ff84 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fa:	f007 fb73 	bl	80087e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa9b 	bl	8000638 <main>
  bx  lr
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001108:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800110c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001110:	0800889c 	.word	0x0800889c
  ldr r2, =_sbss
 8001114:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001118:	2400049c 	.word	0x2400049c

0800111c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC3_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 f994 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800112c:	f002 fbe8 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8001130:	4602      	mov	r2, r0
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_Init+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	4913      	ldr	r1, [pc, #76]	; (800118c <HAL_Init+0x6c>)
 800113e:	5ccb      	ldrb	r3, [r1, r3]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_Init+0x68>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_Init+0x6c>)
 8001154:	5cd3      	ldrb	r3, [r2, r3]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x70>)
 8001162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_Init+0x74>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f814 	bl	8001198 <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e002      	b.n	8001180 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff fd51 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	58024400 	.word	0x58024400
 800118c:	08008854 	.word	0x08008854
 8001190:	24000004 	.word	0x24000004
 8001194:	24000000 	.word	0x24000000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e021      	b.n	80011f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_InitTick+0x64>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_InitTick+0x60>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f979 	bl	80014ba <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f943 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x68>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2400000c 	.word	0x2400000c
 80011fc:	24000000 	.word	0x24000000
 8001200:	24000008 	.word	0x24000008

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2400000c 	.word	0x2400000c
 8001228:	24000498 	.word	0x24000498

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	24000498 	.word	0x24000498

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2400000c 	.word	0x2400000c

0800128c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800129c:	4904      	ldr	r1, [pc, #16]	; (80012b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	58000400 	.word	0x58000400

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x40>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00
 80012f8:	05fa0000 	.word	0x05fa0000

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <__NVIC_EnableIRQ+0x38>)
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff29 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff40 	bl	80012fc <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff33 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa4 	bl	8001410 <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fea6 	bl	800122c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2dc      	b.n	8001aa6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d008      	beq.n	800150a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2cd      	b.n	8001aa6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a76      	ldr	r2, [pc, #472]	; (80016e8 <HAL_DMA_Abort+0x214>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d04a      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a74      	ldr	r2, [pc, #464]	; (80016ec <HAL_DMA_Abort+0x218>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d045      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <HAL_DMA_Abort+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d040      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a71      	ldr	r2, [pc, #452]	; (80016f4 <HAL_DMA_Abort+0x220>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d03b      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a70      	ldr	r2, [pc, #448]	; (80016f8 <HAL_DMA_Abort+0x224>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d036      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_DMA_Abort+0x228>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d031      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6d      	ldr	r2, [pc, #436]	; (8001700 <HAL_DMA_Abort+0x22c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d02c      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6b      	ldr	r2, [pc, #428]	; (8001704 <HAL_DMA_Abort+0x230>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d027      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_DMA_Abort+0x234>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <HAL_DMA_Abort+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01d      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a67      	ldr	r2, [pc, #412]	; (8001710 <HAL_DMA_Abort+0x23c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d018      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a65      	ldr	r2, [pc, #404]	; (8001714 <HAL_DMA_Abort+0x240>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_DMA_Abort+0x244>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00e      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a62      	ldr	r2, [pc, #392]	; (800171c <HAL_DMA_Abort+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d009      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a61      	ldr	r2, [pc, #388]	; (8001720 <HAL_DMA_Abort+0x24c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_DMA_Abort+0xd6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a5f      	ldr	r2, [pc, #380]	; (8001724 <HAL_DMA_Abort+0x250>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_DMA_Abort+0xda>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_DMA_Abort+0xdc>
 80015ae:	2300      	movs	r3, #0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 021e 	bic.w	r2, r2, #30
 80015c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a3c      	ldr	r2, [pc, #240]	; (80016e8 <HAL_DMA_Abort+0x214>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d072      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <HAL_DMA_Abort+0x218>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d06d      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <HAL_DMA_Abort+0x21c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d068      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a37      	ldr	r2, [pc, #220]	; (80016f4 <HAL_DMA_Abort+0x220>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d063      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <HAL_DMA_Abort+0x224>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d05e      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_DMA_Abort+0x228>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d059      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a33      	ldr	r2, [pc, #204]	; (8001700 <HAL_DMA_Abort+0x22c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d054      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_DMA_Abort+0x230>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d04f      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <HAL_DMA_Abort+0x234>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d04a      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a2e      	ldr	r2, [pc, #184]	; (800170c <HAL_DMA_Abort+0x238>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d045      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_DMA_Abort+0x23c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d040      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a2b      	ldr	r2, [pc, #172]	; (8001714 <HAL_DMA_Abort+0x240>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d03b      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <HAL_DMA_Abort+0x244>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d036      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_DMA_Abort+0x248>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d031      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a27      	ldr	r2, [pc, #156]	; (8001720 <HAL_DMA_Abort+0x24c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d02c      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a25      	ldr	r2, [pc, #148]	; (8001724 <HAL_DMA_Abort+0x250>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d027      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <HAL_DMA_Abort+0x254>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d022      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_DMA_Abort+0x258>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01d      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <HAL_DMA_Abort+0x25c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d018      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_DMA_Abort+0x260>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_DMA_Abort+0x264>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00e      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1c      	ldr	r2, [pc, #112]	; (800173c <HAL_DMA_Abort+0x268>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d009      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_DMA_Abort+0x26c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d004      	beq.n	80016e2 <HAL_DMA_Abort+0x20e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_DMA_Abort+0x270>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d132      	bne.n	8001748 <HAL_DMA_Abort+0x274>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e031      	b.n	800174a <HAL_DMA_Abort+0x276>
 80016e6:	bf00      	nop
 80016e8:	40020010 	.word	0x40020010
 80016ec:	40020028 	.word	0x40020028
 80016f0:	40020040 	.word	0x40020040
 80016f4:	40020058 	.word	0x40020058
 80016f8:	40020070 	.word	0x40020070
 80016fc:	40020088 	.word	0x40020088
 8001700:	400200a0 	.word	0x400200a0
 8001704:	400200b8 	.word	0x400200b8
 8001708:	40020410 	.word	0x40020410
 800170c:	40020428 	.word	0x40020428
 8001710:	40020440 	.word	0x40020440
 8001714:	40020458 	.word	0x40020458
 8001718:	40020470 	.word	0x40020470
 800171c:	40020488 	.word	0x40020488
 8001720:	400204a0 	.word	0x400204a0
 8001724:	400204b8 	.word	0x400204b8
 8001728:	58025408 	.word	0x58025408
 800172c:	5802541c 	.word	0x5802541c
 8001730:	58025430 	.word	0x58025430
 8001734:	58025444 	.word	0x58025444
 8001738:	58025458 	.word	0x58025458
 800173c:	5802546c 	.word	0x5802546c
 8001740:	58025480 	.word	0x58025480
 8001744:	58025494 	.word	0x58025494
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800175c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_DMA_Abort+0x444>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04a      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6b      	ldr	r2, [pc, #428]	; (800191c <HAL_DMA_Abort+0x448>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d045      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <HAL_DMA_Abort+0x44c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d040      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a68      	ldr	r2, [pc, #416]	; (8001924 <HAL_DMA_Abort+0x450>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d03b      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a67      	ldr	r2, [pc, #412]	; (8001928 <HAL_DMA_Abort+0x454>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a65      	ldr	r2, [pc, #404]	; (800192c <HAL_DMA_Abort+0x458>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a64      	ldr	r2, [pc, #400]	; (8001930 <HAL_DMA_Abort+0x45c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d02c      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a62      	ldr	r2, [pc, #392]	; (8001934 <HAL_DMA_Abort+0x460>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d027      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a61      	ldr	r2, [pc, #388]	; (8001938 <HAL_DMA_Abort+0x464>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5f      	ldr	r2, [pc, #380]	; (800193c <HAL_DMA_Abort+0x468>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5e      	ldr	r2, [pc, #376]	; (8001940 <HAL_DMA_Abort+0x46c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <HAL_DMA_Abort+0x470>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a5b      	ldr	r2, [pc, #364]	; (8001948 <HAL_DMA_Abort+0x474>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00e      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a59      	ldr	r2, [pc, #356]	; (800194c <HAL_DMA_Abort+0x478>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d009      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_DMA_Abort+0x47c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_Abort+0x32a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a56      	ldr	r2, [pc, #344]	; (8001954 <HAL_DMA_Abort+0x480>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d108      	bne.n	8001810 <HAL_DMA_Abort+0x33c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e007      	b.n	8001820 <HAL_DMA_Abort+0x34c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001820:	e013      	b.n	800184a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001822:	f7ff fd03 	bl	800122c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b05      	cmp	r3, #5
 800182e:	d90c      	bls.n	800184a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e12d      	b.n	8001aa6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e5      	bne.n	8001822 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <HAL_DMA_Abort+0x444>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04a      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_DMA_Abort+0x448>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d045      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <HAL_DMA_Abort+0x44c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d040      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_DMA_Abort+0x450>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d03b      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a29      	ldr	r2, [pc, #164]	; (8001928 <HAL_DMA_Abort+0x454>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d036      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <HAL_DMA_Abort+0x458>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d031      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_DMA_Abort+0x45c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d02c      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_DMA_Abort+0x460>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d027      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_DMA_Abort+0x464>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <HAL_DMA_Abort+0x468>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01d      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a20      	ldr	r2, [pc, #128]	; (8001940 <HAL_DMA_Abort+0x46c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d018      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_DMA_Abort+0x470>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_DMA_Abort+0x474>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00e      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_DMA_Abort+0x478>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d009      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_DMA_Abort+0x47c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d004      	beq.n	80018f6 <HAL_DMA_Abort+0x422>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_DMA_Abort+0x480>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Abort+0x426>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_DMA_Abort+0x428>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d02b      	beq.n	8001958 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	223f      	movs	r2, #63	; 0x3f
 8001910:	409a      	lsls	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	e02a      	b.n	800196e <HAL_DMA_Abort+0x49a>
 8001918:	40020010 	.word	0x40020010
 800191c:	40020028 	.word	0x40020028
 8001920:	40020040 	.word	0x40020040
 8001924:	40020058 	.word	0x40020058
 8001928:	40020070 	.word	0x40020070
 800192c:	40020088 	.word	0x40020088
 8001930:	400200a0 	.word	0x400200a0
 8001934:	400200b8 	.word	0x400200b8
 8001938:	40020410 	.word	0x40020410
 800193c:	40020428 	.word	0x40020428
 8001940:	40020440 	.word	0x40020440
 8001944:	40020458 	.word	0x40020458
 8001948:	40020470 	.word	0x40020470
 800194c:	40020488 	.word	0x40020488
 8001950:	400204a0 	.word	0x400204a0
 8001954:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2201      	movs	r2, #1
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_DMA_Abort+0x5dc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d072      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <HAL_DMA_Abort+0x5e0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d06d      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_DMA_Abort+0x5e4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d068      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_DMA_Abort+0x5e8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d063      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <HAL_DMA_Abort+0x5ec>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_DMA_Abort+0x5f0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d059      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <HAL_DMA_Abort+0x5f4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d054      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a44      	ldr	r2, [pc, #272]	; (8001acc <HAL_DMA_Abort+0x5f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d04f      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_DMA_Abort+0x5fc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04a      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <HAL_DMA_Abort+0x600>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d045      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <HAL_DMA_Abort+0x604>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d040      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <HAL_DMA_Abort+0x608>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d03b      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_DMA_Abort+0x60c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d036      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_DMA_Abort+0x610>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d031      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_DMA_Abort+0x614>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d02c      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a38      	ldr	r2, [pc, #224]	; (8001aec <HAL_DMA_Abort+0x618>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d027      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_DMA_Abort+0x61c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a35      	ldr	r2, [pc, #212]	; (8001af4 <HAL_DMA_Abort+0x620>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01d      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a34      	ldr	r2, [pc, #208]	; (8001af8 <HAL_DMA_Abort+0x624>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d018      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a32      	ldr	r2, [pc, #200]	; (8001afc <HAL_DMA_Abort+0x628>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_DMA_Abort+0x62c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_DMA_Abort+0x630>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d009      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2e      	ldr	r2, [pc, #184]	; (8001b08 <HAL_DMA_Abort+0x634>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort+0x58a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <HAL_DMA_Abort+0x638>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA_Abort+0x58e>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_Abort+0x590>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d015      	beq.n	8001a94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00c      	beq.n	8001a94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020010 	.word	0x40020010
 8001ab4:	40020028 	.word	0x40020028
 8001ab8:	40020040 	.word	0x40020040
 8001abc:	40020058 	.word	0x40020058
 8001ac0:	40020070 	.word	0x40020070
 8001ac4:	40020088 	.word	0x40020088
 8001ac8:	400200a0 	.word	0x400200a0
 8001acc:	400200b8 	.word	0x400200b8
 8001ad0:	40020410 	.word	0x40020410
 8001ad4:	40020428 	.word	0x40020428
 8001ad8:	40020440 	.word	0x40020440
 8001adc:	40020458 	.word	0x40020458
 8001ae0:	40020470 	.word	0x40020470
 8001ae4:	40020488 	.word	0x40020488
 8001ae8:	400204a0 	.word	0x400204a0
 8001aec:	400204b8 	.word	0x400204b8
 8001af0:	58025408 	.word	0x58025408
 8001af4:	5802541c 	.word	0x5802541c
 8001af8:	58025430 	.word	0x58025430
 8001afc:	58025444 	.word	0x58025444
 8001b00:	58025458 	.word	0x58025458
 8001b04:	5802546c 	.word	0x5802546c
 8001b08:	58025480 	.word	0x58025480
 8001b0c:	58025494 	.word	0x58025494

08001b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e237      	b.n	8001f92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e22c      	b.n	8001f92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d04a      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a5b      	ldr	r2, [pc, #364]	; (8001cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d045      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_DMA_Abort_IT+0x1ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d03b      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a56      	ldr	r2, [pc, #344]	; (8001cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a55      	ldr	r2, [pc, #340]	; (8001cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d031      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02c      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_DMA_Abort_IT+0x1bc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d027      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_DMA_Abort_IT+0x1cc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a4a      	ldr	r2, [pc, #296]	; (8001ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a47      	ldr	r2, [pc, #284]	; (8001ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_Abort_IT+0xc8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a46      	ldr	r2, [pc, #280]	; (8001cec <HAL_DMA_Abort_IT+0x1dc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Abort_IT+0xcc>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_DMA_Abort_IT+0xce>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8086 	beq.w	8001cf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2204      	movs	r2, #4
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2f      	ldr	r2, [pc, #188]	; (8001cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d04a      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d045      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2c      	ldr	r2, [pc, #176]	; (8001cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d040      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <HAL_DMA_Abort_IT+0x1ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d03b      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d036      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d031      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d02c      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_DMA_Abort_IT+0x1bc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d027      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d022      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d01d      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d018      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_DMA_Abort_IT+0x1cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00e      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_DMA_Abort_IT+0x17c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_DMA_Abort_IT+0x1dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d108      	bne.n	8001c9e <HAL_DMA_Abort_IT+0x18e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e178      	b.n	8001f90 <HAL_DMA_Abort_IT+0x480>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e16f      	b.n	8001f90 <HAL_DMA_Abort_IT+0x480>
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 020e 	bic.w	r2, r2, #14
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6c      	ldr	r2, [pc, #432]	; (8001eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d04a      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6b      	ldr	r2, [pc, #428]	; (8001ebc <HAL_DMA_Abort_IT+0x3ac>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d045      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d040      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a68      	ldr	r2, [pc, #416]	; (8001ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d03b      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d036      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a65      	ldr	r2, [pc, #404]	; (8001ecc <HAL_DMA_Abort_IT+0x3bc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d031      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02c      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a62      	ldr	r2, [pc, #392]	; (8001ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d027      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a60      	ldr	r2, [pc, #384]	; (8001ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5f      	ldr	r2, [pc, #380]	; (8001edc <HAL_DMA_Abort_IT+0x3cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01d      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d018      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a59      	ldr	r2, [pc, #356]	; (8001eec <HAL_DMA_Abort_IT+0x3dc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x290>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d108      	bne.n	8001db2 <HAL_DMA_Abort_IT+0x2a2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e007      	b.n	8001dc2 <HAL_DMA_Abort_IT+0x2b2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3c      	ldr	r2, [pc, #240]	; (8001eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d072      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <HAL_DMA_Abort_IT+0x3ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d06d      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d068      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a37      	ldr	r2, [pc, #220]	; (8001ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d063      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d05e      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_DMA_Abort_IT+0x3bc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d059      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a33      	ldr	r2, [pc, #204]	; (8001ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d054      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d04f      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a30      	ldr	r2, [pc, #192]	; (8001ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04a      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <HAL_DMA_Abort_IT+0x3cc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d045      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d040      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d03b      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d036      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_DMA_Abort_IT+0x3dc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d02c      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d027      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_DMA_Abort_IT+0x3e8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <HAL_DMA_Abort_IT+0x3ec>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_DMA_Abort_IT+0x3f0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d018      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_DMA_Abort_IT+0x3f4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_DMA_Abort_IT+0x3f8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_DMA_Abort_IT+0x3fc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_DMA_Abort_IT+0x400>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x3a2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_DMA_Abort_IT+0x404>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d132      	bne.n	8001f18 <HAL_DMA_Abort_IT+0x408>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e031      	b.n	8001f1a <HAL_DMA_Abort_IT+0x40a>
 8001eb6:	bf00      	nop
 8001eb8:	40020010 	.word	0x40020010
 8001ebc:	40020028 	.word	0x40020028
 8001ec0:	40020040 	.word	0x40020040
 8001ec4:	40020058 	.word	0x40020058
 8001ec8:	40020070 	.word	0x40020070
 8001ecc:	40020088 	.word	0x40020088
 8001ed0:	400200a0 	.word	0x400200a0
 8001ed4:	400200b8 	.word	0x400200b8
 8001ed8:	40020410 	.word	0x40020410
 8001edc:	40020428 	.word	0x40020428
 8001ee0:	40020440 	.word	0x40020440
 8001ee4:	40020458 	.word	0x40020458
 8001ee8:	40020470 	.word	0x40020470
 8001eec:	40020488 	.word	0x40020488
 8001ef0:	400204a0 	.word	0x400204a0
 8001ef4:	400204b8 	.word	0x400204b8
 8001ef8:	58025408 	.word	0x58025408
 8001efc:	5802541c 	.word	0x5802541c
 8001f00:	58025430 	.word	0x58025430
 8001f04:	58025444 	.word	0x58025444
 8001f08:	58025458 	.word	0x58025458
 8001f0c:	5802546c 	.word	0x5802546c
 8001f10:	58025480 	.word	0x58025480
 8001f14:	58025494 	.word	0x58025494
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d028      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop

08001f9c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0cf      	b.n	800214e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2223      	movs	r2, #35	; 0x23
 8001fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe fe47 	bl	8000c54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	4b64      	ldr	r3, [pc, #400]	; (8002158 <HAL_ETH_Init+0x1bc>)
 8001fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fcc:	4a62      	ldr	r2, [pc, #392]	; (8002158 <HAL_ETH_Init+0x1bc>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fd6:	4b60      	ldr	r3, [pc, #384]	; (8002158 <HAL_ETH_Init+0x1bc>)
 8001fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7a1b      	ldrb	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff f94d 	bl	800128c <HAL_SYSCFG_ETHInterfaceSelect>
 8001ff2:	e003      	b.n	8001ffc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ff4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ff8:	f7ff f948 	bl	800128c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001ffc:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_ETH_Init+0x1c0>)
 8001ffe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002016:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002018:	f7ff f908 	bl	800122c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800201e:	e011      	b.n	8002044 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002020:	f7ff f904 	bl	800122c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800202e:	d909      	bls.n	8002044 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2204      	movs	r2, #4
 8002034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	22e0      	movs	r2, #224	; 0xe0
 800203c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e084      	b.n	800214e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1e4      	bne.n	8002020 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f886 	bl	8002168 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800205c:	f001 fdca 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8002060:	4603      	mov	r3, r0
 8002062:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <HAL_ETH_Init+0x1c4>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	0c9a      	lsrs	r2, r3, #18
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3a01      	subs	r2, #1
 8002070:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa71 	bl	800255c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002086:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002096:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	22e0      	movs	r2, #224	; 0xe0
 80020b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e049      	b.n	800214e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_ETH_Init+0x1c8>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6952      	ldr	r2, [r2, #20]
 80020ce:	0051      	lsls	r1, r2, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020da:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fad9 	bl	8002696 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fb1f 	bl	8002728 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	3303      	adds	r3, #3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	061a      	lsls	r2, r3, #24
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	3302      	adds	r3, #2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	3301      	adds	r3, #1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002128:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002136:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002138:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2210      	movs	r2, #16
 8002148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	58024400 	.word	0x58024400
 800215c:	58000400 	.word	0x58000400
 8002160:	431bde83 	.word	0x431bde83
 8002164:	ffff8001 	.word	0xffff8001

08002168 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002178:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002180:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002182:	f001 fd37 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8002186:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d908      	bls.n	80021a2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d804      	bhi.n	80021a2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e027      	b.n	80021f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d908      	bls.n	80021bc <HAL_ETH_SetMDIOClockRange+0x54>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d204      	bcs.n	80021bc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e01a      	b.n	80021f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d303      	bcc.n	80021cc <HAL_ETH_SetMDIOClockRange+0x64>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d911      	bls.n	80021f0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d908      	bls.n	80021e6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_ETH_SetMDIOClockRange+0xac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d804      	bhi.n	80021e6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e005      	b.n	80021f2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e000      	b.n	80021f2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	01312cff 	.word	0x01312cff
 8002208:	02160ebf 	.word	0x02160ebf
 800220c:	03938700 	.word	0x03938700
 8002210:	05f5e0ff 	.word	0x05f5e0ff
 8002214:	08f0d17f 	.word	0x08f0d17f

08002218 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800222a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b1b      	ldrb	r3, [r3, #12]
 8002238:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800223a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7b5b      	ldrb	r3, [r3, #13]
 8002240:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002242:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	7b9b      	ldrb	r3, [r3, #14]
 8002248:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800224a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7bdb      	ldrb	r3, [r3, #15]
 8002250:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002252:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	7c12      	ldrb	r2, [r2, #16]
 8002258:	2a00      	cmp	r2, #0
 800225a:	d102      	bne.n	8002262 <ETH_SetMACConfig+0x4a>
 800225c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002260:	e000      	b.n	8002264 <ETH_SetMACConfig+0x4c>
 8002262:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002264:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	7c52      	ldrb	r2, [r2, #17]
 800226a:	2a00      	cmp	r2, #0
 800226c:	d102      	bne.n	8002274 <ETH_SetMACConfig+0x5c>
 800226e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002272:	e000      	b.n	8002276 <ETH_SetMACConfig+0x5e>
 8002274:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7c9b      	ldrb	r3, [r3, #18]
 800227c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800227e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002284:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800228a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7f1b      	ldrb	r3, [r3, #28]
 8002290:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002292:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	7f5b      	ldrb	r3, [r3, #29]
 8002298:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800229a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	7f92      	ldrb	r2, [r2, #30]
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d102      	bne.n	80022aa <ETH_SetMACConfig+0x92>
 80022a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a8:	e000      	b.n	80022ac <ETH_SetMACConfig+0x94>
 80022aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7fdb      	ldrb	r3, [r3, #31]
 80022b2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022bc:	2a00      	cmp	r2, #0
 80022be:	d102      	bne.n	80022c6 <ETH_SetMACConfig+0xae>
 80022c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c4:	e000      	b.n	80022c8 <ETH_SetMACConfig+0xb0>
 80022c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022c8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022d6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022d8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <ETH_SetMACConfig+0x22c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002302:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002304:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800230e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002316:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002318:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002320:	2a00      	cmp	r2, #0
 8002322:	d102      	bne.n	800232a <ETH_SetMACConfig+0x112>
 8002324:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002328:	e000      	b.n	800232c <ETH_SetMACConfig+0x114>
 800232a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800232c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <ETH_SetMACConfig+0x230>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	68f9      	ldr	r1, [r7, #12]
 8002346:	430b      	orrs	r3, r1
 8002348:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002350:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	4b3a      	ldr	r3, [pc, #232]	; (800244c <ETH_SetMACConfig+0x234>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002374:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800237a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002382:	2a00      	cmp	r2, #0
 8002384:	d101      	bne.n	800238a <ETH_SetMACConfig+0x172>
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x174>
 800238a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800238c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800239e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80023a2:	4013      	ands	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023b4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023bc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f023 0103 	bic.w	r1, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023e2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d101      	bne.n	8002406 <ETH_SetMACConfig+0x1ee>
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	e000      	b.n	8002408 <ETH_SetMACConfig+0x1f0>
 8002406:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002408:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002410:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800241a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002428:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	430a      	orrs	r2, r1
 8002434:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	00048083 	.word	0x00048083
 8002448:	c0f88000 	.word	0xc0f88000
 800244c:	fffffef0 	.word	0xfffffef0

08002450 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b38      	ldr	r3, [pc, #224]	; (8002548 <ETH_SetDMAConfig+0xf8>)
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	6811      	ldr	r1, [r2, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002476:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002482:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	7b1b      	ldrb	r3, [r3, #12]
 8002488:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <ETH_SetDMAConfig+0xfc>)
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	7b5b      	ldrb	r3, [r3, #13]
 80024ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <ETH_SetDMAConfig+0x100>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7d1b      	ldrb	r3, [r3, #20]
 80024e0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024e2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7f5b      	ldrb	r3, [r3, #29]
 80024e8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <ETH_SetDMAConfig+0x104>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	68f9      	ldr	r1, [r7, #12]
 8002504:	430b      	orrs	r3, r1
 8002506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7f1b      	ldrb	r3, [r3, #28]
 8002512:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002524:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <ETH_SetDMAConfig+0x108>)
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	430b      	orrs	r3, r1
 8002534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002538:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	ffff87fd 	.word	0xffff87fd
 800254c:	ffff2ffe 	.word	0xffff2ffe
 8002550:	fffec000 	.word	0xfffec000
 8002554:	ffc0efef 	.word	0xffc0efef
 8002558:	7fc0ffff 	.word	0x7fc0ffff

0800255c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0a4      	sub	sp, #144	; 0x90
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800256a:	2300      	movs	r3, #0
 800256c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025b4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025b8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025d6:	2300      	movs	r3, #0
 80025d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025da:	2300      	movs	r3, #0
 80025dc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025de:	2300      	movs	r3, #0
 80025e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025f4:	2320      	movs	r3, #32
 80025f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002606:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800260c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002610:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002636:	2300      	movs	r3, #0
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fde6 	bl	8002218 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800264c:	2301      	movs	r3, #1
 800264e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800266a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002674:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800267c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fee1 	bl	8002450 <ETH_SetDMAConfig>
}
 800268e:	bf00      	nop
 8002690:	3790      	adds	r7, #144	; 0x90
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e01d      	b.n	80026e0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	3206      	adds	r2, #6
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3301      	adds	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d9de      	bls.n	80026a4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	461a      	mov	r2, r3
 80026f6:	2303      	movs	r3, #3
 80026f8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002708:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e023      	b.n	800277e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	3212      	adds	r2, #18
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d9d8      	bls.n	8002736 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027aa:	461a      	mov	r2, r3
 80027ac:	2303      	movs	r3, #3
 80027ae:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027f2:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <HAL_GPIO_Init+0x228>)
 80027f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f6:	e18c      	b.n	8002b12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 817e 	beq.w	8002b0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d005      	beq.n	8002828 <HAL_GPIO_Init+0x44>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d130      	bne.n	800288a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285e:	2201      	movs	r2, #1
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0201 	and.w	r2, r3, #1
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b03      	cmp	r3, #3
 8002894:	d017      	beq.n	80028c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d123      	bne.n	800291a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d8 	beq.w	8002b0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <HAL_GPIO_Init+0x22c>)
 800295e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002962:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_GPIO_Init+0x22c>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_GPIO_Init+0x22c>)
 800296e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_GPIO_Init+0x230>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x234>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04a      	beq.n	8002a3c <HAL_GPIO_Init+0x258>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_GPIO_Init+0x238>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02b      	beq.n	8002a06 <HAL_GPIO_Init+0x222>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_GPIO_Init+0x23c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x21e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_GPIO_Init+0x240>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x21a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_GPIO_Init+0x244>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x216>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_GPIO_Init+0x248>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x212>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_GPIO_Init+0x24c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x20e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_GPIO_Init+0x250>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x20a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <HAL_GPIO_Init+0x254>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x206>
 80029e6:	2309      	movs	r3, #9
 80029e8:	e029      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029ea:	230a      	movs	r3, #10
 80029ec:	e027      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029ee:	2307      	movs	r3, #7
 80029f0:	e025      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029f2:	2306      	movs	r3, #6
 80029f4:	e023      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029f6:	2305      	movs	r3, #5
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029fa:	2304      	movs	r3, #4
 80029fc:	e01f      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 80029fe:	2303      	movs	r3, #3
 8002a00:	e01d      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e01b      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e019      	b.n	8002a3e <HAL_GPIO_Init+0x25a>
 8002a0a:	bf00      	nop
 8002a0c:	58000080 	.word	0x58000080
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58000400 	.word	0x58000400
 8002a18:	58020000 	.word	0x58020000
 8002a1c:	58020400 	.word	0x58020400
 8002a20:	58020800 	.word	0x58020800
 8002a24:	58020c00 	.word	0x58020c00
 8002a28:	58021000 	.word	0x58021000
 8002a2c:	58021400 	.word	0x58021400
 8002a30:	58021800 	.word	0x58021800
 8002a34:	58021c00 	.word	0x58021c00
 8002a38:	58022400 	.word	0x58022400
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4e:	4938      	ldr	r1, [pc, #224]	; (8002b30 <HAL_GPIO_Init+0x34c>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f ae6b 	bne.w	80027f8 <HAL_GPIO_Init+0x14>
  }
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	58000400 	.word	0x58000400

08002b34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <HAL_GPIO_DeInit+0x1d8>)
 8002b44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002b46:	e0d3      	b.n	8002cf0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80c6 	beq.w	8002cea <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b5e:	4a6c      	ldr	r2, [pc, #432]	; (8002d10 <HAL_GPIO_DeInit+0x1dc>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a64      	ldr	r2, [pc, #400]	; (8002d14 <HAL_GPIO_DeInit+0x1e0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_GPIO_DeInit+0xb8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_GPIO_DeInit+0x1e4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02b      	beq.n	8002be8 <HAL_GPIO_DeInit+0xb4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <HAL_GPIO_DeInit+0x1e8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d025      	beq.n	8002be4 <HAL_GPIO_DeInit+0xb0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <HAL_GPIO_DeInit+0x1ec>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01f      	beq.n	8002be0 <HAL_GPIO_DeInit+0xac>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a60      	ldr	r2, [pc, #384]	; (8002d24 <HAL_GPIO_DeInit+0x1f0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d019      	beq.n	8002bdc <HAL_GPIO_DeInit+0xa8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a5f      	ldr	r2, [pc, #380]	; (8002d28 <HAL_GPIO_DeInit+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_GPIO_DeInit+0xa4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	; (8002d2c <HAL_GPIO_DeInit+0x1f8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_GPIO_DeInit+0xa0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_GPIO_DeInit+0x1fc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_DeInit+0x9c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <HAL_GPIO_DeInit+0x200>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_GPIO_DeInit+0x98>
 8002bc8:	2309      	movs	r3, #9
 8002bca:	e010      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bcc:	230a      	movs	r3, #10
 8002bce:	e00e      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	e00c      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bd4:	2306      	movs	r3, #6
 8002bd6:	e00a      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bd8:	2305      	movs	r3, #5
 8002bda:	e008      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e006      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002be0:	2303      	movs	r3, #3
 8002be2:	e004      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e002      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_GPIO_DeInit+0xba>
 8002bec:	2300      	movs	r3, #0
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	f002 0203 	and.w	r2, r2, #3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4093      	lsls	r3, r2
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d136      	bne.n	8002c6c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	401a      	ands	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c28:	4013      	ands	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_GPIO_DeInit+0x1dc>)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	482c      	ldr	r0, [pc, #176]	; (8002d10 <HAL_GPIO_DeInit+0x1dc>)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	400a      	ands	r2, r1
 8002c66:	3302      	adds	r3, #2
 8002c68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2103      	movs	r1, #3
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	08d2      	lsrs	r2, r2, #3
 8002ca0:	4019      	ands	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2103      	movs	r1, #3
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af25 	bne.w	8002b48 <HAL_GPIO_DeInit+0x14>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	58000080 	.word	0x58000080
 8002d10:	58000400 	.word	0x58000400
 8002d14:	58020000 	.word	0x58020000
 8002d18:	58020400 	.word	0x58020400
 8002d1c:	58020800 	.word	0x58020800
 8002d20:	58020c00 	.word	0x58020c00
 8002d24:	58021000 	.word	0x58021000
 8002d28:	58021400 	.word	0x58021400
 8002d2c:	58021800 	.word	0x58021800
 8002d30:	58021c00 	.word	0x58021c00
 8002d34:	58022400 	.word	0x58022400

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_PWREx_ConfigSupply+0x70>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d00a      	beq.n	8002d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_PWREx_ConfigSupply+0x70>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01f      	b.n	8002dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e01d      	b.n	8002dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_PWREx_ConfigSupply+0x70>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 0207 	bic.w	r2, r3, #7
 8002d9e:	490f      	ldr	r1, [pc, #60]	; (8002ddc <HAL_PWREx_ConfigSupply+0x70>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002da6:	f7fe fa41 	bl	800122c <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dac:	e009      	b.n	8002dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dae:	f7fe fa3d 	bl	800122c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dbc:	d901      	bls.n	8002dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_PWREx_ConfigSupply+0x70>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	d1ee      	bne.n	8002dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	58024800 	.word	0x58024800

08002de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e3c8      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8087 	beq.w	8002f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e00:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e0a:	4b86      	ldr	r3, [pc, #536]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d007      	beq.n	8002e26 <HAL_RCC_OscConfig+0x46>
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	2b18      	cmp	r3, #24
 8002e1a:	d110      	bne.n	8002e3e <HAL_RCC_OscConfig+0x5e>
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d10b      	bne.n	8002e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e26:	4b7f      	ldr	r3, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d06c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x12c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d168      	bne.n	8002f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e3a2      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x76>
 8002e48:	4b76      	ldr	r3, [pc, #472]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a75      	ldr	r2, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e02e      	b.n	8002eb4 <HAL_RCC_OscConfig+0xd4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e5e:	4b71      	ldr	r3, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a70      	ldr	r2, [pc, #448]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b6e      	ldr	r3, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6d      	ldr	r2, [pc, #436]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xd4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0xbc>
 8002e82:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a67      	ldr	r2, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a64      	ldr	r2, [pc, #400]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xd4>
 8002e9c:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a60      	ldr	r2, [pc, #384]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f9b6 	bl	800122c <HAL_GetTick>
 8002ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe f9b2 	bl	800122c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e356      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe4>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe f9a2 	bl	800122c <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe f99e 	bl	800122c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e342      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x10c>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 808c 	beq.w	8003034 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_RCC_OscConfig+0x162>
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	2b18      	cmp	r3, #24
 8002f36:	d137      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1c8>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d132      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_RCC_OscConfig+0x17a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e314      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f5a:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0219 	bic.w	r2, r3, #25
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	492f      	ldr	r1, [pc, #188]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f95e 	bl	800122c <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f74:	f7fe f95a 	bl	800122c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e2fe      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4920      	ldr	r1, [pc, #128]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa6:	e045      	b.n	8003034 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d026      	beq.n	8002ffe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 0219 	bic.w	r2, r3, #25
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4919      	ldr	r1, [pc, #100]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe f933 	bl	800122c <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe f92f 	bl	800122c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e2d3      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	e01a      	b.n	8003034 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_RCC_OscConfig+0x244>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe f90f 	bl	800122c <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe f90b 	bl	800122c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d903      	bls.n	8003028 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e2af      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
 8003024:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ee      	bne.n	8003012 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	d06a      	beq.n	8003116 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b90      	ldr	r3, [pc, #576]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003048:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800304a:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d007      	beq.n	8003066 <HAL_RCC_OscConfig+0x286>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b18      	cmp	r3, #24
 800305a:	d11b      	bne.n	8003094 <HAL_RCC_OscConfig+0x2b4>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d116      	bne.n	8003094 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x29e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e282      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800307e:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	497d      	ldr	r1, [pc, #500]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003092:	e040      	b.n	8003116 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800309c:	4b79      	ldr	r3, [pc, #484]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f8c0 	bl	800122c <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030b0:	f7fe f8bc 	bl	800122c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e260      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030c2:	4b70      	ldr	r3, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	4969      	ldr	r1, [pc, #420]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
 80030e2:	e018      	b.n	8003116 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030e4:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a66      	ldr	r2, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f89c 	bl	800122c <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030f8:	f7fe f898 	bl	800122c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e23c      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800310a:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b56      	ldr	r3, [pc, #344]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe f879 	bl	800122c <HAL_GetTick>
 800313a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313e:	f7fe f875 	bl	800122c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e219      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x35e>
 800315c:	e018      	b.n	8003190 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315e:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f85f 	bl	800122c <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003172:	f7fe f85b 	bl	800122c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1ff      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d036      	beq.n	800320a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d019      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a36      	ldr	r2, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80031aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031b0:	f7fe f83c 	bl	800122c <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b8:	f7fe f838 	bl	800122c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1dc      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3d8>
 80031d6:	e018      	b.n	800320a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a29      	ldr	r2, [pc, #164]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 80031de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e4:	f7fe f822 	bl	800122c <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe f81e 	bl	800122c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1c2      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8086 	beq.w	8003324 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x4a8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x4a8>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003224:	f7fe f802 	bl	800122c <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd fffe 	bl	800122c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1a2      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_OscConfig+0x4a8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x480>
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
 800325e:	e032      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x4ac>
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a02      	ldr	r2, [pc, #8]	; (8003284 <HAL_RCC_OscConfig+0x4a4>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e021      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e6>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	58024800 	.word	0x58024800
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x4ce>
 8003294:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a82      	ldr	r2, [pc, #520]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a7f      	ldr	r2, [pc, #508]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x4e6>
 80032ae:	4b7d      	ldr	r3, [pc, #500]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a7c      	ldr	r2, [pc, #496]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b7a      	ldr	r3, [pc, #488]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a79      	ldr	r2, [pc, #484]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fd ffad 	bl	800122c <HAL_GetTick>
 80032d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd ffa9 	bl	800122c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e14b      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ec:	4b6d      	ldr	r3, [pc, #436]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4f6>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fd ff97 	bl	800122c <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fd ff93 	bl	800122c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e135      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003318:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 812a 	beq.w	8003582 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003336:	2b18      	cmp	r3, #24
 8003338:	f000 80ba 	beq.w	80034b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b02      	cmp	r3, #2
 8003342:	f040 8095 	bne.w	8003470 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fd ff6b 	bl	800122c <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd ff67 	bl	800122c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10b      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003378:	4b4a      	ldr	r3, [pc, #296]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800337a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337c:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_RCC_OscConfig+0x6c8>)
 800337e:	4013      	ands	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	430a      	orrs	r2, r1
 800338c:	4945      	ldr	r1, [pc, #276]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	628b      	str	r3, [r1, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	3b01      	subs	r3, #1
 8003398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	3b01      	subs	r3, #1
 80033a2:	025b      	lsls	r3, r3, #9
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	3b01      	subs	r3, #1
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	3b01      	subs	r3, #1
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033c2:	4938      	ldr	r1, [pc, #224]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033d4:	4b33      	ldr	r3, [pc, #204]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_OscConfig+0x6cc>)
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033e0:	00d2      	lsls	r2, r2, #3
 80033e2:	4930      	ldr	r1, [pc, #192]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033e8:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f023 020c 	bic.w	r2, r3, #12
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	492b      	ldr	r1, [pc, #172]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f023 0202 	bic.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4927      	ldr	r1, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a21      	ldr	r2, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800341e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800342a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd fef0 	bl	800122c <HAL_GetTick>
 800344c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd feec 	bl	800122c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e090      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x670>
 800346e:	e088      	b.n	8003582 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fed6 	bl	800122c <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fed2 	bl	800122c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e076      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003496:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_OscConfig+0x6c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x6a4>
 80034a2:	e06e      	b.n	8003582 <HAL_RCC_OscConfig+0x7a2>
 80034a4:	58024400 	.word	0x58024400
 80034a8:	fffffc0c 	.word	0xfffffc0c
 80034ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034b6:	4b35      	ldr	r3, [pc, #212]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d031      	beq.n	8003528 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d12a      	bne.n	8003528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d122      	bne.n	8003528 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11a      	bne.n	8003528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0a5b      	lsrs	r3, r3, #9
 80034f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d111      	bne.n	8003528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0e1b      	lsrs	r3, r3, #24
 800351a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e02b      	b.n	8003584 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003536:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d01f      	beq.n	8003582 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354e:	f7fd fe6d 	bl	800122c <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003554:	bf00      	nop
 8003556:	f7fd fe69 	bl	800122c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	4293      	cmp	r3, r2
 8003560:	d0f9      	beq.n	8003556 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 8003564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_RCC_OscConfig+0x7b0>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800356e:	00d2      	lsls	r2, r2, #3
 8003570:	4906      	ldr	r1, [pc, #24]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 8003572:	4313      	orrs	r3, r2
 8003574:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <HAL_RCC_OscConfig+0x7ac>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3730      	adds	r7, #48	; 0x30
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	ffff0007 	.word	0xffff0007

08003594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e19c      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b8a      	ldr	r3, [pc, #552]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b87      	ldr	r3, [pc, #540]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	4985      	ldr	r1, [pc, #532]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b83      	ldr	r3, [pc, #524]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e184      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b7b      	ldr	r3, [pc, #492]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f4:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4975      	ldr	r1, [pc, #468]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361e:	429a      	cmp	r2, r3
 8003620:	d908      	bls.n	8003634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003622:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	496a      	ldr	r1, [pc, #424]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800364c:	429a      	cmp	r2, r3
 800364e:	d908      	bls.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	495e      	ldr	r1, [pc, #376]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800367a:	429a      	cmp	r2, r3
 800367c:	d908      	bls.n	8003690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800367e:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4953      	ldr	r1, [pc, #332]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 800368c:	4313      	orrs	r3, r2
 800368e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d908      	bls.n	80036be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f023 020f 	bic.w	r2, r3, #15
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4947      	ldr	r1, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d055      	beq.n	8003776 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4940      	ldr	r1, [pc, #256]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e4:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0f6      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0ea      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003714:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0de      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d6      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f023 0207 	bic.w	r2, r3, #7
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4925      	ldr	r1, [pc, #148]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fd fd71 	bl	800122c <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374c:	e00a      	b.n	8003764 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fd fd6d 	bl	800122c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e0be      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	429a      	cmp	r2, r3
 8003774:	d1eb      	bne.n	800374e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	429a      	cmp	r2, r3
 8003790:	d208      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d214      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 020f 	bic.w	r2, r3, #15
 80037ba:	4906      	ldr	r1, [pc, #24]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e086      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
 80037d4:	52002000 	.word	0x52002000
 80037d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d208      	bcs.n	800380a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037f8:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	4939      	ldr	r1, [pc, #228]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003806:	4313      	orrs	r3, r2
 8003808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003822:	429a      	cmp	r2, r3
 8003824:	d208      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003826:	4b31      	ldr	r3, [pc, #196]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	492e      	ldr	r1, [pc, #184]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003834:	4313      	orrs	r3, r2
 8003836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003850:	429a      	cmp	r2, r3
 8003852:	d208      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4922      	ldr	r1, [pc, #136]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003862:	4313      	orrs	r3, r2
 8003864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800387e:	429a      	cmp	r2, r3
 8003880:	d208      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4917      	ldr	r1, [pc, #92]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003890:	4313      	orrs	r3, r2
 8003892:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003894:	f000 f834 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	4912      	ldr	r1, [pc, #72]	; (80038f0 <HAL_RCC_ClockConfig+0x35c>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_RCC_ClockConfig+0x358>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_RCC_ClockConfig+0x35c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x360>)
 80038ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038cc:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x364>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x368>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fc5e 	bl	8001198 <HAL_InitTick>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
 80038f0:	08008854 	.word	0x08008854
 80038f4:	24000004 	.word	0x24000004
 80038f8:	24000000 	.word	0x24000000
 80038fc:	24000008 	.word	0x24000008

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003906:	4bb3      	ldr	r3, [pc, #716]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390e:	2b18      	cmp	r3, #24
 8003910:	f200 8155 	bhi.w	8003bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003981 	.word	0x08003981
 8003920:	08003bbf 	.word	0x08003bbf
 8003924:	08003bbf 	.word	0x08003bbf
 8003928:	08003bbf 	.word	0x08003bbf
 800392c:	08003bbf 	.word	0x08003bbf
 8003930:	08003bbf 	.word	0x08003bbf
 8003934:	08003bbf 	.word	0x08003bbf
 8003938:	08003bbf 	.word	0x08003bbf
 800393c:	080039a7 	.word	0x080039a7
 8003940:	08003bbf 	.word	0x08003bbf
 8003944:	08003bbf 	.word	0x08003bbf
 8003948:	08003bbf 	.word	0x08003bbf
 800394c:	08003bbf 	.word	0x08003bbf
 8003950:	08003bbf 	.word	0x08003bbf
 8003954:	08003bbf 	.word	0x08003bbf
 8003958:	08003bbf 	.word	0x08003bbf
 800395c:	080039ad 	.word	0x080039ad
 8003960:	08003bbf 	.word	0x08003bbf
 8003964:	08003bbf 	.word	0x08003bbf
 8003968:	08003bbf 	.word	0x08003bbf
 800396c:	08003bbf 	.word	0x08003bbf
 8003970:	08003bbf 	.word	0x08003bbf
 8003974:	08003bbf 	.word	0x08003bbf
 8003978:	08003bbf 	.word	0x08003bbf
 800397c:	080039b3 	.word	0x080039b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003980:	4b94      	ldr	r3, [pc, #592]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800398c:	4b91      	ldr	r3, [pc, #580]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	4a90      	ldr	r2, [pc, #576]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800399e:	e111      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039a0:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a2:	61bb      	str	r3, [r7, #24]
      break;
 80039a4:	e10e      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039a6:	4b8d      	ldr	r3, [pc, #564]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a8:	61bb      	str	r3, [r7, #24]
      break;
 80039aa:	e10b      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039ae:	61bb      	str	r3, [r7, #24]
      break;
 80039b0:	e108      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039b2:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039bc:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039c8:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039d2:	4b80      	ldr	r3, [pc, #512]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80e1 	beq.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	f000 8083 	beq.w	8003b04 <HAL_RCC_GetSysClockFreq+0x204>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	f200 80a1 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x248>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x114>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d056      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a12:	e099      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02d      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a20:	4b6c      	ldr	r3, [pc, #432]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	4a6b      	ldr	r2, [pc, #428]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b62      	ldr	r3, [pc, #392]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a7a:	e087      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003abe:	e065      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b02:	e043      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b46:	e021      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b96:	3301      	adds	r3, #1
 8003b98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb0:	ee17 3a90 	vmov	r3, s15
 8003bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc0:	61bb      	str	r3, [r7, #24]
      break;
 8003bc2:	bf00      	nop
  }

  return sysclockfreq;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	03d09000 	.word	0x03d09000
 8003bdc:	003d0900 	.word	0x003d0900
 8003be0:	007a1200 	.word	0x007a1200
 8003be4:	46000000 	.word	0x46000000
 8003be8:	4c742400 	.word	0x4c742400
 8003bec:	4a742400 	.word	0x4a742400
 8003bf0:	4af42400 	.word	0x4af42400

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bfa:	f7ff fe81 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490f      	ldr	r1, [pc, #60]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58024400 	.word	0x58024400
 8003c48:	08008854 	.word	0x08008854
 8003c4c:	24000004 	.word	0x24000004
 8003c50:	24000000 	.word	0x24000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c58:	f7ff ffcc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	08008854 	.word	0x08008854

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c84:	f7ff ffb6 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	08008854 	.word	0x08008854

08003cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0c6      	sub	sp, #280	; 0x118
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8003cd6:	d049      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce8:	d828      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cee:	d01a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf4:	d822      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfe:	d007      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d00:	e01c      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d02:	4bab      	ldr	r3, [pc, #684]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4aaa      	ldr	r2, [pc, #680]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d0e:	e01a      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d14:	3308      	adds	r3, #8
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fc25 	bl	8005568 <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d24:	e00f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2a:	3328      	adds	r3, #40	; 0x28
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fccc 	bl	80056cc <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d4e:	4b98      	ldr	r3, [pc, #608]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5c:	4a94      	ldr	r2, [pc, #592]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6513      	str	r3, [r2, #80]	; 0x50
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003d78:	f04f 0900 	mov.w	r9, #0
 8003d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003d80:	d047      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d82a      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003db7 	.word	0x08003db7
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003deb 	.word	0x08003deb
 8003da4:	08003deb 	.word	0x08003deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b81      	ldr	r3, [pc, #516]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a80      	ldr	r2, [pc, #512]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db4:	e01a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 fbd2 	bl	8005568 <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dca:	e00f      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd0:	3328      	adds	r3, #40	; 0x28
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 fc79 	bl	80056cc <RCCEx_PLL3_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de0:	e004      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df4:	4b6e      	ldr	r3, [pc, #440]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	f023 0107 	bic.w	r1, r3, #7
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6513      	str	r3, [r2, #80]	; 0x50
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003e1e:	f04f 0b00 	mov.w	fp, #0
 8003e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e26:	d05b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e30:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e34:	d03b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e36:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e3a:	d834      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e40:	d037      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e46:	d82e      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e4c:	d033      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e52:	d828      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e58:	d01a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d822      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a4f      	ldr	r2, [pc, #316]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e78:	e01e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 fb70 	bl	8005568 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e013      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fc17 	bl	80056cc <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ed0:	4a37      	ldr	r2, [pc, #220]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed6:	e003      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003edc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ef6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d05d      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f0c:	d03b      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f12:	d834      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f18:	d037      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1e:	d82e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f24:	d033      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f2a:	d828      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f30:	d01a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f36:	d822      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f40:	d007      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003f42:	e01c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f44:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f50:	e01e      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f56:	3308      	adds	r3, #8
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fb04 	bl	8005568 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f66:	e013      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6c:	3328      	adds	r3, #40	; 0x28
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 fbab 	bl	80056cc <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f84:	e004      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fa8:	4a01      	ldr	r2, [pc, #4]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
 8003fae:	e005      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	d03a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	2b30      	cmp	r3, #48	; 0x30
 8003fe4:	d01f      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003fe6:	2b30      	cmp	r3, #48	; 0x30
 8003fe8:	d819      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d00c      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d815      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d019      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d111      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffa:	4baa      	ldr	r3, [pc, #680]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4aa9      	ldr	r2, [pc, #676]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004006:	e011      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400c:	3308      	adds	r3, #8
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f001 faa9 	bl	8005568 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004024:	e002      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800402a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004034:	4b9b      	ldr	r3, [pc, #620]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004038:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	4a98      	ldr	r2, [pc, #608]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004044:	430b      	orrs	r3, r1
 8004046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800404e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800405e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800406c:	460b      	mov	r3, r1
 800406e:	4313      	orrs	r3, r2
 8004070:	d051      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407c:	d035      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800407e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004082:	d82e      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004088:	d031      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800408a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800408e:	d828      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004094:	d01a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	d822      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d007      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80040a6:	e01c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b7e      	ldr	r3, [pc, #504]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b4:	e01c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ba:	3308      	adds	r3, #8
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fa52 	bl	8005568 <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040ca:	e011      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d0:	3328      	adds	r3, #40	; 0x28
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 faf9 	bl	80056cc <RCCEx_PLL3_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004108:	430b      	orrs	r3, r1
 800410a:	6513      	str	r3, [r2, #80]	; 0x50
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004112:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d053      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004140:	d033      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004146:	d82c      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800414c:	d02f      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800414e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004152:	d826      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004158:	d02b      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800415a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800415e:	d820      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004164:	d012      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416a:	d81a      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d115      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417a:	3308      	adds	r3, #8
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f9f2 	bl	8005568 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800418a:	e015      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004190:	3328      	adds	r3, #40	; 0x28
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f001 fa99 	bl	80056cc <RCCEx_PLL3_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041aa:	bf00      	nop
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041c0:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ce:	4a35      	ldr	r2, [pc, #212]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6513      	str	r3, [r2, #80]	; 0x50
 80041d4:	e003      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80041ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d058      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420a:	d033      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800420c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004210:	d82c      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d02f      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d826      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800421e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004222:	d02b      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004228:	d820      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800422a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422e:	d012      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004234:	d81a      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d022      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800423a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423e:	d115      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	3308      	adds	r3, #8
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f001 f98d 	bl	8005568 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004254:	e015      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425a:	3328      	adds	r3, #40	; 0x28
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fa34 	bl	80056cc <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800426a:	e00a      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004272:	e006      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004274:	bf00      	nop
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004278:	bf00      	nop
 800427a:	e002      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800427c:	bf00      	nop
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004282:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10e      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800429a:	4a02      	ldr	r2, [pc, #8]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6593      	str	r3, [r2, #88]	; 0x58
 80042a0:	e006      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80042a2:	bf00      	nop
 80042a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80042bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d037      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042da:	d00e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e0:	d816      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d018      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80042e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ec:	4bc4      	ldr	r3, [pc, #784]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4ac3      	ldr	r2, [pc, #780]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042f8:	e00f      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fe:	3308      	adds	r3, #8
 8004300:	2101      	movs	r1, #1
 8004302:	4618      	mov	r0, r3
 8004304:	f001 f930 	bl	8005568 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800430e:	e004      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004322:	4bb7      	ldr	r3, [pc, #732]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004330:	4ab3      	ldr	r2, [pc, #716]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004332:	430b      	orrs	r3, r1
 8004334:	6513      	str	r3, [r2, #80]	; 0x50
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800433c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800434c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d039      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	2b03      	cmp	r3, #3
 8004368:	d81c      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043ad 	.word	0x080043ad
 8004374:	08004381 	.word	0x08004381
 8004378:	0800438f 	.word	0x0800438f
 800437c:	080043ad 	.word	0x080043ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004380:	4b9f      	ldr	r3, [pc, #636]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a9e      	ldr	r2, [pc, #632]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800438c:	e00f      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004392:	3308      	adds	r3, #8
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f8e6 	bl	8005568 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043a2:	e004      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80043ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043b6:	4b92      	ldr	r3, [pc, #584]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	f023 0103 	bic.w	r1, r3, #3
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	4a8e      	ldr	r2, [pc, #568]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c6:	430b      	orrs	r3, r1
 80043c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80043e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f000 8099 	beq.w	8004528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f6:	4b83      	ldr	r3, [pc, #524]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a82      	ldr	r2, [pc, #520]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004402:	f7fc ff13 	bl	800122c <HAL_GetTick>
 8004406:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440a:	e00b      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fc ff0e 	bl	800122c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	; 0x64
 800441a:	d903      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004422:	e005      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004424:	4b77      	ldr	r3, [pc, #476]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ed      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004434:	2b00      	cmp	r3, #0
 8004436:	d173      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004438:	4b71      	ldr	r3, [pc, #452]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800443a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004444:	4053      	eors	r3, r2
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800444e:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800445a:	4b69      	ldr	r3, [pc, #420]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a68      	ldr	r2, [pc, #416]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004466:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004472:	4a63      	ldr	r2, [pc, #396]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004486:	d118      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fc fed0 	bl	800122c <HAL_GetTick>
 800448c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004490:	e00d      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fc fecb 	bl	800122c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800449c:	1ad2      	subs	r2, r2, r3
 800449e:	f241 3388 	movw	r3, #5000	; 0x1388
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d903      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80044ac:	e005      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0eb      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80044ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d129      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d2:	d10e      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80044d4:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044e4:	091a      	lsrs	r2, r3, #4
 80044e6:	4b48      	ldr	r3, [pc, #288]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	4a45      	ldr	r2, [pc, #276]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6113      	str	r3, [r2, #16]
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80044f2:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	4a42      	ldr	r2, [pc, #264]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044fc:	6113      	str	r3, [r2, #16]
 80044fe:	4b40      	ldr	r3, [pc, #256]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004500:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800450a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450e:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	e008      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004516:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800451a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800451e:	e003      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004524:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f002 0301 	and.w	r3, r2, #1
 8004534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800453e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004542:	460b      	mov	r3, r1
 8004544:	4313      	orrs	r3, r2
 8004546:	f000 808f 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800454e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004550:	2b28      	cmp	r3, #40	; 0x28
 8004552:	d871      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004641 	.word	0x08004641
 8004560:	08004639 	.word	0x08004639
 8004564:	08004639 	.word	0x08004639
 8004568:	08004639 	.word	0x08004639
 800456c:	08004639 	.word	0x08004639
 8004570:	08004639 	.word	0x08004639
 8004574:	08004639 	.word	0x08004639
 8004578:	08004639 	.word	0x08004639
 800457c:	0800460d 	.word	0x0800460d
 8004580:	08004639 	.word	0x08004639
 8004584:	08004639 	.word	0x08004639
 8004588:	08004639 	.word	0x08004639
 800458c:	08004639 	.word	0x08004639
 8004590:	08004639 	.word	0x08004639
 8004594:	08004639 	.word	0x08004639
 8004598:	08004639 	.word	0x08004639
 800459c:	08004623 	.word	0x08004623
 80045a0:	08004639 	.word	0x08004639
 80045a4:	08004639 	.word	0x08004639
 80045a8:	08004639 	.word	0x08004639
 80045ac:	08004639 	.word	0x08004639
 80045b0:	08004639 	.word	0x08004639
 80045b4:	08004639 	.word	0x08004639
 80045b8:	08004639 	.word	0x08004639
 80045bc:	08004641 	.word	0x08004641
 80045c0:	08004639 	.word	0x08004639
 80045c4:	08004639 	.word	0x08004639
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004639 	.word	0x08004639
 80045d0:	08004639 	.word	0x08004639
 80045d4:	08004639 	.word	0x08004639
 80045d8:	08004639 	.word	0x08004639
 80045dc:	08004641 	.word	0x08004641
 80045e0:	08004639 	.word	0x08004639
 80045e4:	08004639 	.word	0x08004639
 80045e8:	08004639 	.word	0x08004639
 80045ec:	08004639 	.word	0x08004639
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004641 	.word	0x08004641
 8004600:	58024400 	.word	0x58024400
 8004604:	58024800 	.word	0x58024800
 8004608:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004610:	3308      	adds	r3, #8
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 ffa7 	bl	8005568 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	3328      	adds	r3, #40	; 0x28
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f84e 	bl	80056cc <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800464a:	4bbf      	ldr	r3, [pc, #764]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004658:	4abb      	ldr	r2, [pc, #748]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800465a:	430b      	orrs	r3, r1
 800465c:	6553      	str	r3, [r2, #84]	; 0x54
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004664:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 0302 	and.w	r3, r2, #2
 8004674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800467e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d041      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468e:	2b05      	cmp	r3, #5
 8004690:	d824      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046e5 	.word	0x080046e5
 800469c:	080046b1 	.word	0x080046b1
 80046a0:	080046c7 	.word	0x080046c7
 80046a4:	080046e5 	.word	0x080046e5
 80046a8:	080046e5 	.word	0x080046e5
 80046ac:	080046e5 	.word	0x080046e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b4:	3308      	adds	r3, #8
 80046b6:	2101      	movs	r1, #1
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 ff55 	bl	8005568 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046c4:	e00f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ca:	3328      	adds	r3, #40	; 0x28
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fffc 	bl	80056cc <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046ee:	4b96      	ldr	r3, [pc, #600]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f023 0107 	bic.w	r1, r3, #7
 80046f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fc:	4a92      	ldr	r2, [pc, #584]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6553      	str	r3, [r2, #84]	; 0x54
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800470c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f002 0304 	and.w	r3, r2, #4
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004722:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d044      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800472c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	2b05      	cmp	r3, #5
 8004736:	d825      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	0800478d 	.word	0x0800478d
 8004744:	08004759 	.word	0x08004759
 8004748:	0800476f 	.word	0x0800476f
 800474c:	0800478d 	.word	0x0800478d
 8004750:	0800478d 	.word	0x0800478d
 8004754:	0800478d 	.word	0x0800478d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475c:	3308      	adds	r3, #8
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 ff01 	bl	8005568 <RCCEx_PLL2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800476e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004772:	3328      	adds	r3, #40	; 0x28
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 ffa8 	bl	80056cc <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f023 0107 	bic.w	r1, r3, #7
 800479e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a68      	ldr	r2, [pc, #416]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6593      	str	r3, [r2, #88]	; 0x58
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f002 0320 	and.w	r3, r2, #32
 80047c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d055      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e2:	d033      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80047e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e8:	d82c      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ee:	d02f      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d826      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80047f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047fa:	d02b      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80047fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004800:	d820      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004806:	d012      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480c:	d81a      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d022      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004816:	d115      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800481c:	3308      	adds	r3, #8
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fea1 	bl	8005568 <RCCEx_PLL2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800482c:	e015      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004832:	3328      	adds	r3, #40	; 0x28
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ff48 	bl	80056cc <RCCEx_PLL3_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004842:	e00a      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800484a:	e006      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800484c:	bf00      	nop
 800484e:	e004      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004850:	bf00      	nop
 8004852:	e002      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004854:	bf00      	nop
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004872:	4a35      	ldr	r2, [pc, #212]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6553      	str	r3, [r2, #84]	; 0x54
 8004878:	e003      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800487e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800488e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004898:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800489c:	460b      	mov	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	d058      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048ae:	d033      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80048b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048b4:	d82c      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d02f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d826      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c6:	d02b      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80048c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048cc:	d820      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	d012      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80048d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d8:	d81a      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d022      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d115      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e8:	3308      	adds	r3, #8
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fe3b 	bl	8005568 <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fe:	3328      	adds	r3, #40	; 0x28
 8004900:	2102      	movs	r1, #2
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fee2 	bl	80056cc <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800490e:	e00a      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004916:	e006      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004918:	bf00      	nop
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800491c:	bf00      	nop
 800491e:	e002      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004920:	bf00      	nop
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004926:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800493e:	4a02      	ldr	r2, [pc, #8]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6593      	str	r3, [r2, #88]	; 0x58
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800496a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d055      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800497c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004980:	d033      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004982:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004986:	d82c      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498c:	d02f      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800498e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004992:	d826      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004994:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004998:	d02b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800499a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800499e:	d820      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a4:	d012      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d81a      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d022      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80049b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b4:	d115      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ba:	3308      	adds	r3, #8
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fdd2 	bl	8005568 <RCCEx_PLL2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049ca:	e015      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d0:	3328      	adds	r3, #40	; 0x28
 80049d2:	2102      	movs	r1, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fe79 	bl	80056cc <RCCEx_PLL3_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049e0:	e00a      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80049ea:	bf00      	nop
 80049ec:	e004      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80049f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a00:	4ba0      	ldr	r3, [pc, #640]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a10:	4a9c      	ldr	r2, [pc, #624]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6593      	str	r3, [r2, #88]	; 0x58
 8004a16:	e003      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f002 0308 	and.w	r3, r2, #8
 8004a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a30:	2300      	movs	r3, #0
 8004a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	d01e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a52:	3328      	adds	r3, #40	; 0x28
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe38 	bl	80056cc <RCCEx_PLL3_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004a68:	4b86      	ldr	r3, [pc, #536]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a78:	4a82      	ldr	r2, [pc, #520]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f002 0310 	and.w	r3, r2, #16
 8004a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d01e      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab0:	3328      	adds	r3, #40	; 0x28
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fe09 	bl	80056cc <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ac6:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad6:	4a6b      	ldr	r2, [pc, #428]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004ae8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aea:	2300      	movs	r3, #0
 8004aec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d03e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b04:	d022      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0a:	d81b      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d00b      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004b16:	e015      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd21 	bl	8005568 <RCCEx_PLL2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b32:	3328      	adds	r3, #40	; 0x28
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fdc8 	bl	80056cc <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b42:	e004      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b56:	4b4b      	ldr	r3, [pc, #300]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b66:	4a47      	ldr	r2, [pc, #284]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b82:	673b      	str	r3, [r7, #112]	; 0x70
 8004b84:	2300      	movs	r3, #0
 8004b86:	677b      	str	r3, [r7, #116]	; 0x74
 8004b88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d03b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b9e:	d01f      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ba4:	d818      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb0:	d007      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bc0:	e00f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc6:	3328      	adds	r3, #40	; 0x28
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fd7e 	bl	80056cc <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bd6:	e004      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004bde:	e000      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bea:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6553      	str	r3, [r2, #84]	; 0x54
 8004c00:	e003      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c18:	2300      	movs	r3, #0
 8004c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d034      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d007      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004c36:	e011      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c44:	e00e      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fc8a 	bl	8005568 <RCCEx_PLL2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	4a02      	ldr	r2, [pc, #8]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	d00c      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb0:	3328      	adds	r3, #40	; 0x28
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd09 	bl	80056cc <RCCEx_PLL3_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cec:	d018      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf2:	d811      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d014      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfe:	d80b      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d011      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d08:	d106      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0a:	4bb7      	ldr	r3, [pc, #732]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4ab6      	ldr	r2, [pc, #728]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d1e:	e004      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d32:	4bad      	ldr	r3, [pc, #692]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d40:	4aa9      	ldr	r2, [pc, #676]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6553      	str	r3, [r2, #84]	; 0x54
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d5e:	2300      	movs	r3, #0
 8004d60:	657b      	str	r3, [r7, #84]	; 0x54
 8004d62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d6c:	4b9e      	ldr	r3, [pc, #632]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	4a9b      	ldr	r2, [pc, #620]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d8e:	2300      	movs	r3, #0
 8004d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d9c:	4b92      	ldr	r3, [pc, #584]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004daa:	4a8f      	ldr	r2, [pc, #572]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dcc:	4b86      	ldr	r3, [pc, #536]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a85      	ldr	r2, [pc, #532]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dd6:	6113      	str	r3, [r2, #16]
 8004dd8:	4b83      	ldr	r3, [pc, #524]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dda:	6919      	ldr	r1, [r3, #16]
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004de4:	4a80      	ldr	r2, [pc, #512]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df8:	2300      	movs	r3, #0
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004e00:	460b      	mov	r3, r1
 8004e02:	4313      	orrs	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e06:	4b78      	ldr	r3, [pc, #480]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	4a74      	ldr	r2, [pc, #464]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e16:	430b      	orrs	r3, r1
 8004e18:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004e30:	460b      	mov	r3, r1
 8004e32:	4313      	orrs	r3, r2
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e36:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	4a68      	ldr	r2, [pc, #416]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	2100      	movs	r1, #0
 8004e56:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d011      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fb79 	bl	8005568 <RCCEx_PLL2_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	2100      	movs	r1, #0
 8004e96:	6239      	str	r1, [r7, #32]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	d011      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eac:	3308      	adds	r3, #8
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fb59 	bl	8005568 <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	61b9      	str	r1, [r7, #24]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d011      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eec:	3308      	adds	r3, #8
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb39 	bl	8005568 <RCCEx_PLL2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004efc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	2100      	movs	r1, #0
 8004f16:	6139      	str	r1, [r7, #16]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f22:	460b      	mov	r3, r1
 8004f24:	4313      	orrs	r3, r2
 8004f26:	d011      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2c:	3328      	adds	r3, #40	; 0x28
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fbcb 	bl	80056cc <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	2100      	movs	r1, #0
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	d011      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6c:	3328      	adds	r3, #40	; 0x28
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fbab 	bl	80056cc <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	2100      	movs	r1, #0
 8004f96:	6039      	str	r1, [r7, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d011      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	3328      	adds	r3, #40	; 0x28
 8004fae:	2102      	movs	r1, #2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fb8b 	bl	80056cc <RCCEx_PLL3_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004fcc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400

08004fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ff0:	f7fe fe00 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4904      	ldr	r1, [pc, #16]	; (8005014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	58024400 	.word	0x58024400
 8005014:	08008854 	.word	0x08008854

08005018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005020:	4ba1      	ldr	r3, [pc, #644]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800502a:	4b9f      	ldr	r3, [pc, #636]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	0b1b      	lsrs	r3, r3, #12
 8005030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005036:	4b9c      	ldr	r3, [pc, #624]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005042:	4b99      	ldr	r3, [pc, #612]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8111 	beq.w	8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b02      	cmp	r3, #2
 800506a:	f000 8083 	beq.w	8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f200 80a1 	bhi.w	80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d056      	beq.n	8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005082:	e099      	b.n	80051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005084:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02d      	beq.n	80050ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005090:	4b85      	ldr	r3, [pc, #532]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	4a84      	ldr	r2, [pc, #528]	; (80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b7b      	ldr	r3, [pc, #492]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050ea:	e087      	b.n	80051fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fe:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005112:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800512e:	e065      	b.n	80051fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005142:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005152:	ed97 6a03 	vldr	s12, [r7, #12]
 8005156:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005172:	e043      	b.n	80051fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a03 	vldr	s12, [r7, #12]
 800519a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051b6:	e021      	b.n	80051fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051da:	ed97 6a03 	vldr	s12, [r7, #12]
 80051de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051fc:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	0a5b      	lsrs	r3, r3, #9
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005216:	edd7 6a07 	vldr	s13, [r7, #28]
 800521a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005222:	ee17 2a90 	vmov	r2, s15
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005244:	edd7 6a07 	vldr	s13, [r7, #28]
 8005248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005250:	ee17 2a90 	vmov	r2, s15
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005272:	edd7 6a07 	vldr	s13, [r7, #28]
 8005276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527e:	ee17 2a90 	vmov	r2, s15
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005286:	e008      	b.n	800529a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
}
 800529a:	bf00      	nop
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	58024400 	.word	0x58024400
 80052ac:	03d09000 	.word	0x03d09000
 80052b0:	46000000 	.word	0x46000000
 80052b4:	4c742400 	.word	0x4c742400
 80052b8:	4a742400 	.word	0x4a742400
 80052bc:	4af42400 	.word	0x4af42400

080052c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c8:	4ba1      	ldr	r3, [pc, #644]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052d2:	4b9f      	ldr	r3, [pc, #636]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	0d1b      	lsrs	r3, r3, #20
 80052d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052de:	4b9c      	ldr	r3, [pc, #624]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052ea:	4b99      	ldr	r3, [pc, #612]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	08db      	lsrs	r3, r3, #3
 80052f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8111 	beq.w	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b02      	cmp	r3, #2
 8005312:	f000 8083 	beq.w	800541c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b02      	cmp	r3, #2
 800531a:	f200 80a1 	bhi.w	8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d056      	beq.n	80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800532a:	e099      	b.n	8005460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800532c:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d02d      	beq.n	8005394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005338:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	08db      	lsrs	r3, r3, #3
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	4a84      	ldr	r2, [pc, #528]	; (8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
 8005348:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b7b      	ldr	r3, [pc, #492]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a03 	vldr	s12, [r7, #12]
 8005376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005392:	e087      	b.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800555c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d6:	e065      	b.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541a:	e043      	b.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542e:	4b48      	ldr	r3, [pc, #288]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800545e:	e021      	b.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800546e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005472:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005482:	ed97 6a03 	vldr	s12, [r7, #12]
 8005486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800548a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054a4:	4b2a      	ldr	r3, [pc, #168]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	0a5b      	lsrs	r3, r3, #9
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054be:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 2a90 	vmov	r2, s15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054d2:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f8:	ee17 2a90 	vmov	r2, s15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005500:	4b13      	ldr	r3, [pc, #76]	; (8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800551a:	edd7 6a07 	vldr	s13, [r7, #28]
 800551e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005526:	ee17 2a90 	vmov	r2, s15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	bf00      	nop
 8005544:	3724      	adds	r7, #36	; 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
 8005554:	03d09000 	.word	0x03d09000
 8005558:	46000000 	.word	0x46000000
 800555c:	4c742400 	.word	0x4c742400
 8005560:	4a742400 	.word	0x4a742400
 8005564:	4af42400 	.word	0x4af42400

08005568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005576:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d101      	bne.n	8005586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e099      	b.n	80056ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005586:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800558c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005592:	f7fb fe4b 	bl	800122c <HAL_GetTick>
 8005596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005598:	e008      	b.n	80055ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800559a:	f7fb fe47 	bl	800122c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e086      	b.n	80056ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055ac:	4b45      	ldr	r3, [pc, #276]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055b8:	4b42      	ldr	r3, [pc, #264]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	493f      	ldr	r1, [pc, #252]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	628b      	str	r3, [r1, #40]	; 0x28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	3b01      	subs	r3, #1
 80055dc:	025b      	lsls	r3, r3, #9
 80055de:	b29b      	uxth	r3, r3
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055fc:	4931      	ldr	r1, [pc, #196]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005602:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	492d      	ldr	r1, [pc, #180]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005610:	4313      	orrs	r3, r2
 8005612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005614:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	f023 0220 	bic.w	r2, r3, #32
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	4928      	ldr	r1, [pc, #160]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <RCCEx_PLL2_Config+0x160>)
 8005638:	4013      	ands	r3, r2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	69d2      	ldr	r2, [r2, #28]
 800563e:	00d2      	lsls	r2, r2, #3
 8005640:	4920      	ldr	r1, [pc, #128]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800564c:	f043 0310 	orr.w	r3, r3, #16
 8005650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800565e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005664:	e00f      	b.n	8005686 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d106      	bne.n	800567a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800566c:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005676:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005678:	e005      	b.n	8005686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a0e      	ldr	r2, [pc, #56]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 800568c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005692:	f7fb fdcb 	bl	800122c <HAL_GetTick>
 8005696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005698:	e008      	b.n	80056ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800569a:	f7fb fdc7 	bl	800122c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e006      	b.n	80056ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <RCCEx_PLL2_Config+0x15c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400
 80056c8:	ffff0007 	.word	0xffff0007

080056cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056da:	4b53      	ldr	r3, [pc, #332]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d101      	bne.n	80056ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e099      	b.n	800581e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4e      	ldr	r2, [pc, #312]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f6:	f7fb fd99 	bl	800122c <HAL_GetTick>
 80056fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056fc:	e008      	b.n	8005710 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056fe:	f7fb fd95 	bl	800122c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e086      	b.n	800581e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005710:	4b45      	ldr	r3, [pc, #276]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f0      	bne.n	80056fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800571c:	4b42      	ldr	r3, [pc, #264]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	051b      	lsls	r3, r3, #20
 800572a:	493f      	ldr	r1, [pc, #252]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	628b      	str	r3, [r1, #40]	; 0x28
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	3b01      	subs	r3, #1
 8005736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	3b01      	subs	r3, #1
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	b29b      	uxth	r3, r3
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	3b01      	subs	r3, #1
 800575a:	061b      	lsls	r3, r3, #24
 800575c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005760:	4931      	ldr	r1, [pc, #196]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	492d      	ldr	r1, [pc, #180]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4928      	ldr	r1, [pc, #160]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	4a26      	ldr	r2, [pc, #152]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <RCCEx_PLL3_Config+0x160>)
 800579c:	4013      	ands	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	69d2      	ldr	r2, [r2, #28]
 80057a2:	00d2      	lsls	r2, r2, #3
 80057a4:	4920      	ldr	r1, [pc, #128]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c8:	e00f      	b.n	80057ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057d0:	4b15      	ldr	r3, [pc, #84]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057dc:	e005      	b.n	80057ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f6:	f7fb fd19 	bl	800122c <HAL_GetTick>
 80057fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057fc:	e008      	b.n	8005810 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057fe:	f7fb fd15 	bl	800122c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <RCCEx_PLL3_Config+0x15c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	ffff0007 	.word	0xffff0007

08005830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e042      	b.n	80058c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fb facb 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2224      	movs	r2, #36	; 0x24
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fde4 	bl	8006440 <UART_SetConfig>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e022      	b.n	80058c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 fc44 	bl	8007118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800589e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fccb 	bl	800725c <UART_CheckIdleState>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e061      	b.n	80059a8 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ec:	d101      	bne.n	80058f2 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e05a      	b.n	80059a8 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e054      	b.n	80059a8 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fb fa6d 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2224      	movs	r2, #36	; 0x24
 800591a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fd86 	bl	8006440 <UART_SetConfig>
 8005934:	4603      	mov	r3, r0
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_LIN_Init+0x6e>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e034      	b.n	80059a8 <HAL_LIN_Init+0xd8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_LIN_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fbe6 	bl	8007118 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800596a:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597a:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f023 0120 	bic.w	r1, r3, #32
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fc5b 	bl	800725c <UART_CheckIdleState>
 80059a6:	4603      	mov	r3, r0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	; 0x28
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d17b      	bne.n	8005ac2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_UART_Transmit+0x26>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e074      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2221      	movs	r2, #33	; 0x21
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ea:	f7fb fc1f 	bl	800122c <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a08:	d108      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e003      	b.n	8005a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a24:	e030      	b.n	8005a88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	; 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f001 fcbd 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e03d      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	3302      	adds	r3, #2
 8005a62:	61bb      	str	r3, [r7, #24]
 8005a64:	e007      	b.n	8005a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1c8      	bne.n	8005a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2140      	movs	r1, #64	; 0x40
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f001 fc86 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e006      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b091      	sub	sp, #68	; 0x44
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d178      	bne.n	8005bd6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Transmit_IT+0x24>
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e071      	b.n	8005bd8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2221      	movs	r2, #33	; 0x21
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b28:	d12a      	bne.n	8005b80 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b32:	d107      	bne.n	8005b44 <HAL_UART_Transmit_IT+0x78>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <HAL_UART_Transmit_IT+0x118>)
 8005b40:	679a      	str	r2, [r3, #120]	; 0x78
 8005b42:	e002      	b.n	8005b4a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a28      	ldr	r2, [pc, #160]	; (8005be8 <HAL_UART_Transmit_IT+0x11c>)
 8005b48:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3308      	adds	r3, #8
 8005b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b6a:	637a      	str	r2, [r7, #52]	; 0x34
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e5      	bne.n	8005b4a <HAL_UART_Transmit_IT+0x7e>
 8005b7e:	e028      	b.n	8005bd2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d107      	bne.n	8005b9a <HAL_UART_Transmit_IT+0xce>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <HAL_UART_Transmit_IT+0x120>)
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78
 8005b98:	e002      	b.n	8005ba0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <HAL_UART_Transmit_IT+0x124>)
 8005b9e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	613b      	str	r3, [r7, #16]
   return(result);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	69f9      	ldr	r1, [r7, #28]
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3744      	adds	r7, #68	; 0x44
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	08007a17 	.word	0x08007a17
 8005be8:	08007937 	.word	0x08007937
 8005bec:	08007875 	.word	0x08007875
 8005bf0:	080077bd 	.word	0x080077bd

08005bf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	; 0x28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d137      	bne.n	8005c7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_UART_Receive_IT+0x24>
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e030      	b.n	8005c7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <HAL_UART_Receive_IT+0x94>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01f      	beq.n	8005c6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d018      	beq.n	8005c6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	613b      	str	r3, [r7, #16]
   return(result);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	69f9      	ldr	r1, [r7, #28]
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e6      	bne.n	8005c3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 fc04 	bl	8007480 <UART_Start_Receive_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3728      	adds	r7, #40	; 0x28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	58000c00 	.word	0x58000c00

08005c8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b0ba      	sub	sp, #232	; 0xe8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cba:	4013      	ands	r3, r2
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11b      	bne.n	8005d00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d015      	beq.n	8005d00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8377 	beq.w	80063e4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
      }
      return;
 8005cfe:	e371      	b.n	80063e4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8123 	beq.w	8005f50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d0e:	4b8d      	ldr	r3, [pc, #564]	; (8005f44 <HAL_UART_IRQHandler+0x2b8>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d1a:	4b8b      	ldr	r3, [pc, #556]	; (8005f48 <HAL_UART_IRQHandler+0x2bc>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8116 	beq.w	8005f50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d011      	beq.n	8005d54 <HAL_UART_IRQHandler+0xc8>
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d011      	beq.n	8005d84 <HAL_UART_IRQHandler+0xf8>
 8005d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2202      	movs	r2, #2
 8005d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f043 0204 	orr.w	r2, r3, #4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d011      	beq.n	8005db4 <HAL_UART_IRQHandler+0x128>
 8005d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2204      	movs	r2, #4
 8005da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f043 0202 	orr.w	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d017      	beq.n	8005df0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dd0:	4b5c      	ldr	r3, [pc, #368]	; (8005f44 <HAL_UART_IRQHandler+0x2b8>)
 8005dd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f043 0208 	orr.w	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <HAL_UART_IRQHandler+0x196>
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00c      	beq.n	8005e22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 82dd 	beq.w	80063e8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d013      	beq.n	8005e62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d005      	beq.n	8005e86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d054      	beq.n	8005f30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fc1c 	bl	80076c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d146      	bne.n	8005f28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1d9      	bne.n	8005e9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef6:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_UART_IRQHandler+0x2c0>)
 8005ef8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fb fe05 	bl	8001b10 <HAL_DMA_Abort_IT>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	e00f      	b.n	8005f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fa77 	bl	8006414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f26:	e00b      	b.n	8005f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa73 	bl	8006414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2e:	e007      	b.n	8005f40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa6f 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005f3e:	e253      	b.n	80063e8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	bf00      	nop
    return;
 8005f42:	e251      	b.n	80063e8 <HAL_UART_IRQHandler+0x75c>
 8005f44:	10000001 	.word	0x10000001
 8005f48:	04000120 	.word	0x04000120
 8005f4c:	08007791 	.word	0x08007791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 81e7 	bne.w	8006328 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 81e0 	beq.w	8006328 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 81d9 	beq.w	8006328 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	f040 8151 	bne.w	8006230 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a96      	ldr	r2, [pc, #600]	; (80061f0 <HAL_UART_IRQHandler+0x564>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d068      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a93      	ldr	r2, [pc, #588]	; (80061f4 <HAL_UART_IRQHandler+0x568>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d061      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a91      	ldr	r2, [pc, #580]	; (80061f8 <HAL_UART_IRQHandler+0x56c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d05a      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a8e      	ldr	r2, [pc, #568]	; (80061fc <HAL_UART_IRQHandler+0x570>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d053      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a8c      	ldr	r2, [pc, #560]	; (8006200 <HAL_UART_IRQHandler+0x574>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d04c      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a89      	ldr	r2, [pc, #548]	; (8006204 <HAL_UART_IRQHandler+0x578>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a87      	ldr	r2, [pc, #540]	; (8006208 <HAL_UART_IRQHandler+0x57c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03e      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a84      	ldr	r2, [pc, #528]	; (800620c <HAL_UART_IRQHandler+0x580>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d037      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a82      	ldr	r2, [pc, #520]	; (8006210 <HAL_UART_IRQHandler+0x584>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d030      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7f      	ldr	r2, [pc, #508]	; (8006214 <HAL_UART_IRQHandler+0x588>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d029      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a7d      	ldr	r2, [pc, #500]	; (8006218 <HAL_UART_IRQHandler+0x58c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a7a      	ldr	r2, [pc, #488]	; (800621c <HAL_UART_IRQHandler+0x590>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01b      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a78      	ldr	r2, [pc, #480]	; (8006220 <HAL_UART_IRQHandler+0x594>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d014      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a75      	ldr	r2, [pc, #468]	; (8006224 <HAL_UART_IRQHandler+0x598>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00d      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a73      	ldr	r2, [pc, #460]	; (8006228 <HAL_UART_IRQHandler+0x59c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d006      	beq.n	800606e <HAL_UART_IRQHandler+0x3e2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a70      	ldr	r2, [pc, #448]	; (800622c <HAL_UART_IRQHandler+0x5a0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d106      	bne.n	800607c <HAL_UART_IRQHandler+0x3f0>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b29b      	uxth	r3, r3
 800607a:	e005      	b.n	8006088 <HAL_UART_IRQHandler+0x3fc>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800608c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 81ab 	beq.w	80063ec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800609c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a0:	429a      	cmp	r2, r3
 80060a2:	f080 81a3 	bcs.w	80063ec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	f000 8087 	beq.w	80061ce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1da      	bne.n	80060c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800611a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800612e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e1      	bne.n	800610a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800616a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800616c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619c:	f023 0310 	bic.w	r3, r3, #16
 80061a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e4      	bne.n	800618c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fb f983 	bl	80014d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f91d 	bl	8006428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ee:	e0fd      	b.n	80063ec <HAL_UART_IRQHandler+0x760>
 80061f0:	40020010 	.word	0x40020010
 80061f4:	40020028 	.word	0x40020028
 80061f8:	40020040 	.word	0x40020040
 80061fc:	40020058 	.word	0x40020058
 8006200:	40020070 	.word	0x40020070
 8006204:	40020088 	.word	0x40020088
 8006208:	400200a0 	.word	0x400200a0
 800620c:	400200b8 	.word	0x400200b8
 8006210:	40020410 	.word	0x40020410
 8006214:	40020428 	.word	0x40020428
 8006218:	40020440 	.word	0x40020440
 800621c:	40020458 	.word	0x40020458
 8006220:	40020470 	.word	0x40020470
 8006224:	40020488 	.word	0x40020488
 8006228:	400204a0 	.word	0x400204a0
 800622c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80cf 	beq.w	80063f0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80ca 	beq.w	80063f0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
 8006280:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800628c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e4      	bne.n	800625c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	623b      	str	r3, [r7, #32]
   return(result);
 80062a2:	6a3a      	ldr	r2, [r7, #32]
 80062a4:	4b55      	ldr	r3, [pc, #340]	; (80063fc <HAL_UART_IRQHandler+0x770>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062b6:	633a      	str	r2, [r7, #48]	; 0x30
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e3      	bne.n	8006292 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	69b9      	ldr	r1, [r7, #24]
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	617b      	str	r3, [r7, #20]
   return(result);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800631a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f881 	bl	8006428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006326:	e063      	b.n	80063f0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <HAL_UART_IRQHandler+0x6c6>
 8006334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 f920 	bl	8008590 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006350:	e051      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800636a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03a      	beq.n	80063f4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
    }
    return;
 8006386:	e035      	b.n	80063f4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_UART_IRQHandler+0x71c>
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fbad 	bl	8007b00 <UART_EndTransmit_IT>
    return;
 80063a6:	e026      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <HAL_UART_IRQHandler+0x73c>
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 f8f9 	bl	80085b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063c6:	e016      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d010      	beq.n	80063f6 <HAL_UART_IRQHandler+0x76a>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	da0c      	bge.n	80063f6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f002 f8e1 	bl	80085a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063e2:	e008      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063e4:	bf00      	nop
 80063e6:	e006      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80063e8:	bf00      	nop
 80063ea:	e004      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063ec:	bf00      	nop
 80063ee:	e002      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80063f0:	bf00      	nop
 80063f2:	e000      	b.n	80063f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80063f4:	bf00      	nop
  }
}
 80063f6:	37e8      	adds	r7, #232	; 0xe8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	effffffe 	.word	0xeffffffe

08006400 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006444:	b092      	sub	sp, #72	; 0x48
 8006446:	af00      	add	r7, sp, #0
 8006448:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	431a      	orrs	r2, r3
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	431a      	orrs	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	4313      	orrs	r3, r2
 8006466:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4bbe      	ldr	r3, [pc, #760]	; (8006768 <UART_SetConfig+0x328>)
 8006470:	4013      	ands	r3, r2
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006478:	430b      	orrs	r3, r1
 800647a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4ab3      	ldr	r2, [pc, #716]	; (800676c <UART_SetConfig+0x32c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a8:	4313      	orrs	r3, r2
 80064aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	4baf      	ldr	r3, [pc, #700]	; (8006770 <UART_SetConfig+0x330>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	430b      	orrs	r3, r1
 80064be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	f023 010f 	bic.w	r1, r3, #15
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4aa6      	ldr	r2, [pc, #664]	; (8006774 <UART_SetConfig+0x334>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d177      	bne.n	80065d0 <UART_SetConfig+0x190>
 80064e0:	4ba5      	ldr	r3, [pc, #660]	; (8006778 <UART_SetConfig+0x338>)
 80064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064e8:	2b28      	cmp	r3, #40	; 0x28
 80064ea:	d86d      	bhi.n	80065c8 <UART_SetConfig+0x188>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0xb4>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006599 	.word	0x08006599
 80064f8:	080065c9 	.word	0x080065c9
 80064fc:	080065c9 	.word	0x080065c9
 8006500:	080065c9 	.word	0x080065c9
 8006504:	080065c9 	.word	0x080065c9
 8006508:	080065c9 	.word	0x080065c9
 800650c:	080065c9 	.word	0x080065c9
 8006510:	080065c9 	.word	0x080065c9
 8006514:	080065a1 	.word	0x080065a1
 8006518:	080065c9 	.word	0x080065c9
 800651c:	080065c9 	.word	0x080065c9
 8006520:	080065c9 	.word	0x080065c9
 8006524:	080065c9 	.word	0x080065c9
 8006528:	080065c9 	.word	0x080065c9
 800652c:	080065c9 	.word	0x080065c9
 8006530:	080065c9 	.word	0x080065c9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065c9 	.word	0x080065c9
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065c9 	.word	0x080065c9
 8006544:	080065c9 	.word	0x080065c9
 8006548:	080065c9 	.word	0x080065c9
 800654c:	080065c9 	.word	0x080065c9
 8006550:	080065c9 	.word	0x080065c9
 8006554:	080065b1 	.word	0x080065b1
 8006558:	080065c9 	.word	0x080065c9
 800655c:	080065c9 	.word	0x080065c9
 8006560:	080065c9 	.word	0x080065c9
 8006564:	080065c9 	.word	0x080065c9
 8006568:	080065c9 	.word	0x080065c9
 800656c:	080065c9 	.word	0x080065c9
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065b9 	.word	0x080065b9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c1 	.word	0x080065c1
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e326      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e322      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e31e      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e31a      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065b8:	2320      	movs	r3, #32
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e316      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065c0:	2340      	movs	r3, #64	; 0x40
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e312      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e30e      	b.n	8006bee <UART_SetConfig+0x7ae>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a69      	ldr	r2, [pc, #420]	; (800677c <UART_SetConfig+0x33c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d130      	bne.n	800663c <UART_SetConfig+0x1fc>
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <UART_SetConfig+0x338>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d826      	bhi.n	8006634 <UART_SetConfig+0x1f4>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0x1ac>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006605 	.word	0x08006605
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006615 	.word	0x08006615
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e2f0      	b.n	8006bee <UART_SetConfig+0x7ae>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e2ec      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e2e8      	b.n	8006bee <UART_SetConfig+0x7ae>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e2e4      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006624:	2320      	movs	r3, #32
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e2e0      	b.n	8006bee <UART_SetConfig+0x7ae>
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e2dc      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e2d8      	b.n	8006bee <UART_SetConfig+0x7ae>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a4f      	ldr	r2, [pc, #316]	; (8006780 <UART_SetConfig+0x340>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d130      	bne.n	80066a8 <UART_SetConfig+0x268>
 8006646:	4b4c      	ldr	r3, [pc, #304]	; (8006778 <UART_SetConfig+0x338>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b05      	cmp	r3, #5
 8006650:	d826      	bhi.n	80066a0 <UART_SetConfig+0x260>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x218>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006671 	.word	0x08006671
 800665c:	08006679 	.word	0x08006679
 8006660:	08006681 	.word	0x08006681
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e2ba      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e2b6      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e2b2      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e2ae      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006690:	2320      	movs	r3, #32
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e2aa      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e2a6      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e2a2      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a35      	ldr	r2, [pc, #212]	; (8006784 <UART_SetConfig+0x344>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d130      	bne.n	8006714 <UART_SetConfig+0x2d4>
 80066b2:	4b31      	ldr	r3, [pc, #196]	; (8006778 <UART_SetConfig+0x338>)
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d826      	bhi.n	800670c <UART_SetConfig+0x2cc>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x284>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066dd 	.word	0x080066dd
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066ed 	.word	0x080066ed
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e284      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066e4:	2304      	movs	r3, #4
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e280      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066ec:	2308      	movs	r3, #8
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e27c      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066f4:	2310      	movs	r3, #16
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e278      	b.n	8006bee <UART_SetConfig+0x7ae>
 80066fc:	2320      	movs	r3, #32
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e274      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006704:	2340      	movs	r3, #64	; 0x40
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e270      	b.n	8006bee <UART_SetConfig+0x7ae>
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006712:	e26c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1b      	ldr	r2, [pc, #108]	; (8006788 <UART_SetConfig+0x348>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d142      	bne.n	80067a4 <UART_SetConfig+0x364>
 800671e:	4b16      	ldr	r3, [pc, #88]	; (8006778 <UART_SetConfig+0x338>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b05      	cmp	r3, #5
 8006728:	d838      	bhi.n	800679c <UART_SetConfig+0x35c>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x2f0>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006749 	.word	0x08006749
 8006734:	08006751 	.word	0x08006751
 8006738:	08006759 	.word	0x08006759
 800673c:	08006761 	.word	0x08006761
 8006740:	0800678d 	.word	0x0800678d
 8006744:	08006795 	.word	0x08006795
 8006748:	2300      	movs	r3, #0
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e24e      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e24a      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e246      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e242      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006768:	cfff69f3 	.word	0xcfff69f3
 800676c:	58000c00 	.word	0x58000c00
 8006770:	11fff4ff 	.word	0x11fff4ff
 8006774:	40011000 	.word	0x40011000
 8006778:	58024400 	.word	0x58024400
 800677c:	40004400 	.word	0x40004400
 8006780:	40004800 	.word	0x40004800
 8006784:	40004c00 	.word	0x40004c00
 8006788:	40005000 	.word	0x40005000
 800678c:	2320      	movs	r3, #32
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e22c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e228      	b.n	8006bee <UART_SetConfig+0x7ae>
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e224      	b.n	8006bee <UART_SetConfig+0x7ae>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4ab1      	ldr	r2, [pc, #708]	; (8006a70 <UART_SetConfig+0x630>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d176      	bne.n	800689c <UART_SetConfig+0x45c>
 80067ae:	4bb1      	ldr	r3, [pc, #708]	; (8006a74 <UART_SetConfig+0x634>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b6:	2b28      	cmp	r3, #40	; 0x28
 80067b8:	d86c      	bhi.n	8006894 <UART_SetConfig+0x454>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x380>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	08006865 	.word	0x08006865
 80067c4:	08006895 	.word	0x08006895
 80067c8:	08006895 	.word	0x08006895
 80067cc:	08006895 	.word	0x08006895
 80067d0:	08006895 	.word	0x08006895
 80067d4:	08006895 	.word	0x08006895
 80067d8:	08006895 	.word	0x08006895
 80067dc:	08006895 	.word	0x08006895
 80067e0:	0800686d 	.word	0x0800686d
 80067e4:	08006895 	.word	0x08006895
 80067e8:	08006895 	.word	0x08006895
 80067ec:	08006895 	.word	0x08006895
 80067f0:	08006895 	.word	0x08006895
 80067f4:	08006895 	.word	0x08006895
 80067f8:	08006895 	.word	0x08006895
 80067fc:	08006895 	.word	0x08006895
 8006800:	08006875 	.word	0x08006875
 8006804:	08006895 	.word	0x08006895
 8006808:	08006895 	.word	0x08006895
 800680c:	08006895 	.word	0x08006895
 8006810:	08006895 	.word	0x08006895
 8006814:	08006895 	.word	0x08006895
 8006818:	08006895 	.word	0x08006895
 800681c:	08006895 	.word	0x08006895
 8006820:	0800687d 	.word	0x0800687d
 8006824:	08006895 	.word	0x08006895
 8006828:	08006895 	.word	0x08006895
 800682c:	08006895 	.word	0x08006895
 8006830:	08006895 	.word	0x08006895
 8006834:	08006895 	.word	0x08006895
 8006838:	08006895 	.word	0x08006895
 800683c:	08006895 	.word	0x08006895
 8006840:	08006885 	.word	0x08006885
 8006844:	08006895 	.word	0x08006895
 8006848:	08006895 	.word	0x08006895
 800684c:	08006895 	.word	0x08006895
 8006850:	08006895 	.word	0x08006895
 8006854:	08006895 	.word	0x08006895
 8006858:	08006895 	.word	0x08006895
 800685c:	08006895 	.word	0x08006895
 8006860:	0800688d 	.word	0x0800688d
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e1c0      	b.n	8006bee <UART_SetConfig+0x7ae>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e1bc      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e1b8      	b.n	8006bee <UART_SetConfig+0x7ae>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e1b4      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006884:	2320      	movs	r3, #32
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e1b0      	b.n	8006bee <UART_SetConfig+0x7ae>
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e1ac      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e1a8      	b.n	8006bee <UART_SetConfig+0x7ae>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a75      	ldr	r2, [pc, #468]	; (8006a78 <UART_SetConfig+0x638>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d130      	bne.n	8006908 <UART_SetConfig+0x4c8>
 80068a6:	4b73      	ldr	r3, [pc, #460]	; (8006a74 <UART_SetConfig+0x634>)
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d826      	bhi.n	8006900 <UART_SetConfig+0x4c0>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <UART_SetConfig+0x478>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068d1 	.word	0x080068d1
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e18a      	b.n	8006bee <UART_SetConfig+0x7ae>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e186      	b.n	8006bee <UART_SetConfig+0x7ae>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e6:	e182      	b.n	8006bee <UART_SetConfig+0x7ae>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ee:	e17e      	b.n	8006bee <UART_SetConfig+0x7ae>
 80068f0:	2320      	movs	r3, #32
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f6:	e17a      	b.n	8006bee <UART_SetConfig+0x7ae>
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e176      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e172      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5b      	ldr	r2, [pc, #364]	; (8006a7c <UART_SetConfig+0x63c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d130      	bne.n	8006974 <UART_SetConfig+0x534>
 8006912:	4b58      	ldr	r3, [pc, #352]	; (8006a74 <UART_SetConfig+0x634>)
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b05      	cmp	r3, #5
 800691c:	d826      	bhi.n	800696c <UART_SetConfig+0x52c>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <UART_SetConfig+0x4e4>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	0800693d 	.word	0x0800693d
 8006928:	08006945 	.word	0x08006945
 800692c:	0800694d 	.word	0x0800694d
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006942:	e154      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694a:	e150      	b.n	8006bee <UART_SetConfig+0x7ae>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006952:	e14c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695a:	e148      	b.n	8006bee <UART_SetConfig+0x7ae>
 800695c:	2320      	movs	r3, #32
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006962:	e144      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696a:	e140      	b.n	8006bee <UART_SetConfig+0x7ae>
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006972:	e13c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a41      	ldr	r2, [pc, #260]	; (8006a80 <UART_SetConfig+0x640>)
 800697a:	4293      	cmp	r3, r2
 800697c:	f040 8082 	bne.w	8006a84 <UART_SetConfig+0x644>
 8006980:	4b3c      	ldr	r3, [pc, #240]	; (8006a74 <UART_SetConfig+0x634>)
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006988:	2b28      	cmp	r3, #40	; 0x28
 800698a:	d86d      	bhi.n	8006a68 <UART_SetConfig+0x628>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x554>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	08006a39 	.word	0x08006a39
 8006998:	08006a69 	.word	0x08006a69
 800699c:	08006a69 	.word	0x08006a69
 80069a0:	08006a69 	.word	0x08006a69
 80069a4:	08006a69 	.word	0x08006a69
 80069a8:	08006a69 	.word	0x08006a69
 80069ac:	08006a69 	.word	0x08006a69
 80069b0:	08006a69 	.word	0x08006a69
 80069b4:	08006a41 	.word	0x08006a41
 80069b8:	08006a69 	.word	0x08006a69
 80069bc:	08006a69 	.word	0x08006a69
 80069c0:	08006a69 	.word	0x08006a69
 80069c4:	08006a69 	.word	0x08006a69
 80069c8:	08006a69 	.word	0x08006a69
 80069cc:	08006a69 	.word	0x08006a69
 80069d0:	08006a69 	.word	0x08006a69
 80069d4:	08006a49 	.word	0x08006a49
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	08006a69 	.word	0x08006a69
 80069e0:	08006a69 	.word	0x08006a69
 80069e4:	08006a69 	.word	0x08006a69
 80069e8:	08006a69 	.word	0x08006a69
 80069ec:	08006a69 	.word	0x08006a69
 80069f0:	08006a69 	.word	0x08006a69
 80069f4:	08006a51 	.word	0x08006a51
 80069f8:	08006a69 	.word	0x08006a69
 80069fc:	08006a69 	.word	0x08006a69
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a69 	.word	0x08006a69
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a59 	.word	0x08006a59
 8006a18:	08006a69 	.word	0x08006a69
 8006a1c:	08006a69 	.word	0x08006a69
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a69 	.word	0x08006a69
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a69 	.word	0x08006a69
 8006a30:	08006a69 	.word	0x08006a69
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e0d6      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a40:	2304      	movs	r3, #4
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e0d2      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a48:	2308      	movs	r3, #8
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e0ce      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a50:	2310      	movs	r3, #16
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e0ca      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a58:	2320      	movs	r3, #32
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5e:	e0c6      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a60:	2340      	movs	r3, #64	; 0x40
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a66:	e0c2      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6e:	e0be      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006a70:	40011400 	.word	0x40011400
 8006a74:	58024400 	.word	0x58024400
 8006a78:	40007800 	.word	0x40007800
 8006a7c:	40007c00 	.word	0x40007c00
 8006a80:	40011800 	.word	0x40011800
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4aad      	ldr	r2, [pc, #692]	; (8006d40 <UART_SetConfig+0x900>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d176      	bne.n	8006b7c <UART_SetConfig+0x73c>
 8006a8e:	4bad      	ldr	r3, [pc, #692]	; (8006d44 <UART_SetConfig+0x904>)
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a96:	2b28      	cmp	r3, #40	; 0x28
 8006a98:	d86c      	bhi.n	8006b74 <UART_SetConfig+0x734>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <UART_SetConfig+0x660>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006b45 	.word	0x08006b45
 8006aa4:	08006b75 	.word	0x08006b75
 8006aa8:	08006b75 	.word	0x08006b75
 8006aac:	08006b75 	.word	0x08006b75
 8006ab0:	08006b75 	.word	0x08006b75
 8006ab4:	08006b75 	.word	0x08006b75
 8006ab8:	08006b75 	.word	0x08006b75
 8006abc:	08006b75 	.word	0x08006b75
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b75 	.word	0x08006b75
 8006ac8:	08006b75 	.word	0x08006b75
 8006acc:	08006b75 	.word	0x08006b75
 8006ad0:	08006b75 	.word	0x08006b75
 8006ad4:	08006b75 	.word	0x08006b75
 8006ad8:	08006b75 	.word	0x08006b75
 8006adc:	08006b75 	.word	0x08006b75
 8006ae0:	08006b55 	.word	0x08006b55
 8006ae4:	08006b75 	.word	0x08006b75
 8006ae8:	08006b75 	.word	0x08006b75
 8006aec:	08006b75 	.word	0x08006b75
 8006af0:	08006b75 	.word	0x08006b75
 8006af4:	08006b75 	.word	0x08006b75
 8006af8:	08006b75 	.word	0x08006b75
 8006afc:	08006b75 	.word	0x08006b75
 8006b00:	08006b5d 	.word	0x08006b5d
 8006b04:	08006b75 	.word	0x08006b75
 8006b08:	08006b75 	.word	0x08006b75
 8006b0c:	08006b75 	.word	0x08006b75
 8006b10:	08006b75 	.word	0x08006b75
 8006b14:	08006b75 	.word	0x08006b75
 8006b18:	08006b75 	.word	0x08006b75
 8006b1c:	08006b75 	.word	0x08006b75
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b75 	.word	0x08006b75
 8006b28:	08006b75 	.word	0x08006b75
 8006b2c:	08006b75 	.word	0x08006b75
 8006b30:	08006b75 	.word	0x08006b75
 8006b34:	08006b75 	.word	0x08006b75
 8006b38:	08006b75 	.word	0x08006b75
 8006b3c:	08006b75 	.word	0x08006b75
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e050      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b52:	e04c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b54:	2308      	movs	r3, #8
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5a:	e048      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e044      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b64:	2320      	movs	r3, #32
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e040      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e03c      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e038      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a71      	ldr	r2, [pc, #452]	; (8006d48 <UART_SetConfig+0x908>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d130      	bne.n	8006be8 <UART_SetConfig+0x7a8>
 8006b86:	4b6f      	ldr	r3, [pc, #444]	; (8006d44 <UART_SetConfig+0x904>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	d826      	bhi.n	8006be0 <UART_SetConfig+0x7a0>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0x758>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bb1 	.word	0x08006bb1
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	08006bc1 	.word	0x08006bc1
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bd9 	.word	0x08006bd9
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e01a      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e016      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc6:	e012      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bce:	e00e      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd6:	e00a      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e006      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e002      	b.n	8006bee <UART_SetConfig+0x7ae>
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a55      	ldr	r2, [pc, #340]	; (8006d48 <UART_SetConfig+0x908>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f040 80f8 	bne.w	8006dea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	dc46      	bgt.n	8006c90 <UART_SetConfig+0x850>
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	db75      	blt.n	8006cf2 <UART_SetConfig+0x8b2>
 8006c06:	3b02      	subs	r3, #2
 8006c08:	2b1e      	cmp	r3, #30
 8006c0a:	d872      	bhi.n	8006cf2 <UART_SetConfig+0x8b2>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x7d4>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c97 	.word	0x08006c97
 8006c18:	08006cf3 	.word	0x08006cf3
 8006c1c:	08006c9f 	.word	0x08006c9f
 8006c20:	08006cf3 	.word	0x08006cf3
 8006c24:	08006cf3 	.word	0x08006cf3
 8006c28:	08006cf3 	.word	0x08006cf3
 8006c2c:	08006caf 	.word	0x08006caf
 8006c30:	08006cf3 	.word	0x08006cf3
 8006c34:	08006cf3 	.word	0x08006cf3
 8006c38:	08006cf3 	.word	0x08006cf3
 8006c3c:	08006cf3 	.word	0x08006cf3
 8006c40:	08006cf3 	.word	0x08006cf3
 8006c44:	08006cf3 	.word	0x08006cf3
 8006c48:	08006cf3 	.word	0x08006cf3
 8006c4c:	08006cbf 	.word	0x08006cbf
 8006c50:	08006cf3 	.word	0x08006cf3
 8006c54:	08006cf3 	.word	0x08006cf3
 8006c58:	08006cf3 	.word	0x08006cf3
 8006c5c:	08006cf3 	.word	0x08006cf3
 8006c60:	08006cf3 	.word	0x08006cf3
 8006c64:	08006cf3 	.word	0x08006cf3
 8006c68:	08006cf3 	.word	0x08006cf3
 8006c6c:	08006cf3 	.word	0x08006cf3
 8006c70:	08006cf3 	.word	0x08006cf3
 8006c74:	08006cf3 	.word	0x08006cf3
 8006c78:	08006cf3 	.word	0x08006cf3
 8006c7c:	08006cf3 	.word	0x08006cf3
 8006c80:	08006cf3 	.word	0x08006cf3
 8006c84:	08006cf3 	.word	0x08006cf3
 8006c88:	08006cf3 	.word	0x08006cf3
 8006c8c:	08006ce5 	.word	0x08006ce5
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d02a      	beq.n	8006cea <UART_SetConfig+0x8aa>
 8006c94:	e02d      	b.n	8006cf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c96:	f7fe f9a9 	bl	8004fec <HAL_RCCEx_GetD3PCLK1Freq>
 8006c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c9c:	e02f      	b.n	8006cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe f9b8 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	e027      	b.n	8006cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fb04 	bl	80052c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cbc:	e01f      	b.n	8006cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbe:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <UART_SetConfig+0x904>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cca:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <UART_SetConfig+0x904>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <UART_SetConfig+0x90c>)
 8006cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cdc:	e00f      	b.n	8006cfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cde:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <UART_SetConfig+0x90c>)
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce2:	e00c      	b.n	8006cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <UART_SetConfig+0x910>)
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 81ee 	beq.w	80070e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <UART_SetConfig+0x914>)
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d305      	bcc.n	8006d36 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d910      	bls.n	8006d58 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d3c:	e1d1      	b.n	80070e2 <UART_SetConfig+0xca2>
 8006d3e:	bf00      	nop
 8006d40:	40011c00 	.word	0x40011c00
 8006d44:	58024400 	.word	0x58024400
 8006d48:	58000c00 	.word	0x58000c00
 8006d4c:	03d09000 	.word	0x03d09000
 8006d50:	003d0900 	.word	0x003d0900
 8006d54:	08008864 	.word	0x08008864
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	60fa      	str	r2, [r7, #12]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	4ac0      	ldr	r2, [pc, #768]	; (8007068 <UART_SetConfig+0xc28>)
 8006d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d7a:	f7f9 facf 	bl	800031c <__aeabi_uldivmod>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	020b      	lsls	r3, r1, #8
 8006d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d94:	0202      	lsls	r2, r0, #8
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	6849      	ldr	r1, [r1, #4]
 8006d9a:	0849      	lsrs	r1, r1, #1
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	4605      	mov	r5, r0
 8006da2:	eb12 0804 	adds.w	r8, r2, r4
 8006da6:	eb43 0905 	adc.w	r9, r3, r5
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	469a      	mov	sl, r3
 8006db2:	4693      	mov	fp, r2
 8006db4:	4652      	mov	r2, sl
 8006db6:	465b      	mov	r3, fp
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 faae 	bl	800031c <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dce:	d308      	bcc.n	8006de2 <UART_SetConfig+0x9a2>
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd6:	d204      	bcs.n	8006de2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e17f      	b.n	80070e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006de8:	e17b      	b.n	80070e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df2:	f040 80bd 	bne.w	8006f70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	dc48      	bgt.n	8006e90 <UART_SetConfig+0xa50>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	db7b      	blt.n	8006efa <UART_SetConfig+0xaba>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d879      	bhi.n	8006efa <UART_SetConfig+0xaba>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0x9cc>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e97 	.word	0x08006e97
 8006e10:	08006e9f 	.word	0x08006e9f
 8006e14:	08006efb 	.word	0x08006efb
 8006e18:	08006efb 	.word	0x08006efb
 8006e1c:	08006ea7 	.word	0x08006ea7
 8006e20:	08006efb 	.word	0x08006efb
 8006e24:	08006efb 	.word	0x08006efb
 8006e28:	08006efb 	.word	0x08006efb
 8006e2c:	08006eb7 	.word	0x08006eb7
 8006e30:	08006efb 	.word	0x08006efb
 8006e34:	08006efb 	.word	0x08006efb
 8006e38:	08006efb 	.word	0x08006efb
 8006e3c:	08006efb 	.word	0x08006efb
 8006e40:	08006efb 	.word	0x08006efb
 8006e44:	08006efb 	.word	0x08006efb
 8006e48:	08006efb 	.word	0x08006efb
 8006e4c:	08006ec7 	.word	0x08006ec7
 8006e50:	08006efb 	.word	0x08006efb
 8006e54:	08006efb 	.word	0x08006efb
 8006e58:	08006efb 	.word	0x08006efb
 8006e5c:	08006efb 	.word	0x08006efb
 8006e60:	08006efb 	.word	0x08006efb
 8006e64:	08006efb 	.word	0x08006efb
 8006e68:	08006efb 	.word	0x08006efb
 8006e6c:	08006efb 	.word	0x08006efb
 8006e70:	08006efb 	.word	0x08006efb
 8006e74:	08006efb 	.word	0x08006efb
 8006e78:	08006efb 	.word	0x08006efb
 8006e7c:	08006efb 	.word	0x08006efb
 8006e80:	08006efb 	.word	0x08006efb
 8006e84:	08006efb 	.word	0x08006efb
 8006e88:	08006efb 	.word	0x08006efb
 8006e8c:	08006eed 	.word	0x08006eed
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	d02e      	beq.n	8006ef2 <UART_SetConfig+0xab2>
 8006e94:	e031      	b.n	8006efa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e96:	f7fc fedd 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8006e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e9c:	e033      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9e:	f7fc feef 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8006ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ea4:	e02f      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe f8b4 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb4:	e027      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb6:	f107 0318 	add.w	r3, r7, #24
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fa00 	bl	80052c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec4:	e01f      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec6:	4b69      	ldr	r3, [pc, #420]	; (800706c <UART_SetConfig+0xc2c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ed2:	4b66      	ldr	r3, [pc, #408]	; (800706c <UART_SetConfig+0xc2c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	08db      	lsrs	r3, r3, #3
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	4a64      	ldr	r2, [pc, #400]	; (8007070 <UART_SetConfig+0xc30>)
 8006ede:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ee4:	e00f      	b.n	8006f06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006ee6:	4b62      	ldr	r3, [pc, #392]	; (8007070 <UART_SetConfig+0xc30>)
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eea:	e00c      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006eec:	4b61      	ldr	r3, [pc, #388]	; (8007074 <UART_SetConfig+0xc34>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef0:	e009      	b.n	8006f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef8:	e005      	b.n	8006f06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80ea 	beq.w	80070e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	4a55      	ldr	r2, [pc, #340]	; (8007068 <UART_SetConfig+0xc28>)
 8006f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f20:	005a      	lsls	r2, r3, #1
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	441a      	add	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d916      	bls.n	8006f68 <UART_SetConfig+0xb28>
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f40:	d212      	bcs.n	8006f68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f023 030f 	bic.w	r3, r3, #15
 8006f4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	e0bc      	b.n	80070e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f6e:	e0b8      	b.n	80070e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	dc4b      	bgt.n	8007010 <UART_SetConfig+0xbd0>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f2c0 8087 	blt.w	800708c <UART_SetConfig+0xc4c>
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	f200 8084 	bhi.w	800708c <UART_SetConfig+0xc4c>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <UART_SetConfig+0xb4c>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08007017 	.word	0x08007017
 8006f90:	0800701f 	.word	0x0800701f
 8006f94:	0800708d 	.word	0x0800708d
 8006f98:	0800708d 	.word	0x0800708d
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	0800708d 	.word	0x0800708d
 8006fa4:	0800708d 	.word	0x0800708d
 8006fa8:	0800708d 	.word	0x0800708d
 8006fac:	08007037 	.word	0x08007037
 8006fb0:	0800708d 	.word	0x0800708d
 8006fb4:	0800708d 	.word	0x0800708d
 8006fb8:	0800708d 	.word	0x0800708d
 8006fbc:	0800708d 	.word	0x0800708d
 8006fc0:	0800708d 	.word	0x0800708d
 8006fc4:	0800708d 	.word	0x0800708d
 8006fc8:	0800708d 	.word	0x0800708d
 8006fcc:	08007047 	.word	0x08007047
 8006fd0:	0800708d 	.word	0x0800708d
 8006fd4:	0800708d 	.word	0x0800708d
 8006fd8:	0800708d 	.word	0x0800708d
 8006fdc:	0800708d 	.word	0x0800708d
 8006fe0:	0800708d 	.word	0x0800708d
 8006fe4:	0800708d 	.word	0x0800708d
 8006fe8:	0800708d 	.word	0x0800708d
 8006fec:	0800708d 	.word	0x0800708d
 8006ff0:	0800708d 	.word	0x0800708d
 8006ff4:	0800708d 	.word	0x0800708d
 8006ff8:	0800708d 	.word	0x0800708d
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	0800708d 	.word	0x0800708d
 8007004:	0800708d 	.word	0x0800708d
 8007008:	0800708d 	.word	0x0800708d
 800700c:	0800707f 	.word	0x0800707f
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d037      	beq.n	8007084 <UART_SetConfig+0xc44>
 8007014:	e03a      	b.n	800708c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007016:	f7fc fe1d 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 800701a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800701c:	e03c      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800701e:	f7fc fe2f 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8007022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007024:	e038      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702a:	4618      	mov	r0, r3
 800702c:	f7fd fff4 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007034:	e030      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe f940 	bl	80052c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007044:	e028      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <UART_SetConfig+0xc2c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d012      	beq.n	8007078 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <UART_SetConfig+0xc2c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	4a04      	ldr	r2, [pc, #16]	; (8007070 <UART_SetConfig+0xc30>)
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007064:	e018      	b.n	8007098 <UART_SetConfig+0xc58>
 8007066:	bf00      	nop
 8007068:	08008864 	.word	0x08008864
 800706c:	58024400 	.word	0x58024400
 8007070:	03d09000 	.word	0x03d09000
 8007074:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007078:	4b24      	ldr	r3, [pc, #144]	; (800710c <UART_SetConfig+0xccc>)
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	e00c      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <UART_SetConfig+0xcd0>)
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007082:	e009      	b.n	8007098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708a:	e005      	b.n	8007098 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007096:	bf00      	nop
    }

    if (pclk != 0U)
 8007098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d021      	beq.n	80070e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <UART_SetConfig+0xcd4>)
 80070a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	441a      	add	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	2b0f      	cmp	r3, #15
 80070c6:	d909      	bls.n	80070dc <UART_SetConfig+0xc9c>
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ce:	d205      	bcs.n	80070dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	e002      	b.n	80070e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2200      	movs	r2, #0
 80070f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2200      	movs	r2, #0
 80070fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007102:	4618      	mov	r0, r3
 8007104:	3748      	adds	r7, #72	; 0x48
 8007106:	46bd      	mov	sp, r7
 8007108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710c:	03d09000 	.word	0x03d09000
 8007110:	003d0900 	.word	0x003d0900
 8007114:	08008864 	.word	0x08008864

08007118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007216:	d10a      	bne.n	800722e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	; 0x60
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800726c:	f7f9 ffde 	bl	800122c <HAL_GetTick>
 8007270:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d12f      	bne.n	80072e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007288:	2200      	movs	r2, #0
 800728a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f88e 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d022      	beq.n	80072e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ae:	653b      	str	r3, [r7, #80]	; 0x50
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b8:	647b      	str	r3, [r7, #68]	; 0x44
 80072ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e063      	b.n	80073a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d149      	bne.n	8007382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	2200      	movs	r2, #0
 80072f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f857 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d03c      	beq.n	8007382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	623b      	str	r3, [r7, #32]
   return(result);
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800731c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	633b      	str	r3, [r7, #48]	; 0x30
 8007328:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e6      	bne.n	8007308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	60fb      	str	r3, [r7, #12]
   return(result);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f023 0301 	bic.w	r3, r3, #1
 8007350:	64bb      	str	r3, [r7, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800735a:	61fa      	str	r2, [r7, #28]
 800735c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	617b      	str	r3, [r7, #20]
   return(result);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e012      	b.n	80073a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3758      	adds	r7, #88	; 0x58
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	4613      	mov	r3, r2
 80073be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c0:	e049      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d045      	beq.n	8007456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ca:	f7f9 ff2f 	bl	800122c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d302      	bcc.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e048      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d031      	beq.n	8007456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d110      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2208      	movs	r2, #8
 8007406:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f95b 	bl	80076c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2208      	movs	r2, #8
 8007412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e029      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007430:	d111      	bne.n	8007456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800743a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f941 	bl	80076c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e00f      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	bf0c      	ite	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	2300      	movne	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	429a      	cmp	r2, r3
 8007472:	d0a6      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b480      	push	{r7}
 8007482:	b0a3      	sub	sp, #140	; 0x8c
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	d10e      	bne.n	80074d2 <UART_Start_Receive_IT+0x52>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <UART_Start_Receive_IT+0x48>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074c6:	e02d      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	22ff      	movs	r2, #255	; 0xff
 80074cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074d0:	e028      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <UART_Start_Receive_IT+0x76>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <UART_Start_Receive_IT+0x6c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074ea:	e01b      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	227f      	movs	r2, #127	; 0x7f
 80074f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074f4:	e016      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074fe:	d10d      	bne.n	800751c <UART_Start_Receive_IT+0x9c>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <UART_Start_Receive_IT+0x92>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	227f      	movs	r2, #127	; 0x7f
 800750c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007510:	e008      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	223f      	movs	r2, #63	; 0x3f
 8007516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800751a:	e003      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2222      	movs	r2, #34	; 0x22
 8007530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007558:	673a      	str	r2, [r7, #112]	; 0x70
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800755e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e3      	bne.n	8007534 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007574:	d14f      	bne.n	8007616 <UART_Start_Receive_IT+0x196>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	429a      	cmp	r2, r3
 8007580:	d349      	bcc.n	8007616 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	d107      	bne.n	800759c <UART_Start_Receive_IT+0x11c>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a47      	ldr	r2, [pc, #284]	; (80076b4 <UART_Start_Receive_IT+0x234>)
 8007598:	675a      	str	r2, [r3, #116]	; 0x74
 800759a:	e002      	b.n	80075a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4a46      	ldr	r2, [pc, #280]	; (80076b8 <UART_Start_Receive_IT+0x238>)
 80075a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01a      	beq.n	80075e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e4      	bne.n	80075aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3308      	adds	r3, #8
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007600:	64ba      	str	r2, [r7, #72]	; 0x48
 8007602:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800760e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e5      	bne.n	80075e0 <UART_Start_Receive_IT+0x160>
 8007614:	e046      	b.n	80076a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d107      	bne.n	8007630 <UART_Start_Receive_IT+0x1b0>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a24      	ldr	r2, [pc, #144]	; (80076bc <UART_Start_Receive_IT+0x23c>)
 800762c:	675a      	str	r2, [r3, #116]	; 0x74
 800762e:	e002      	b.n	8007636 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <UART_Start_Receive_IT+0x240>)
 8007634:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d019      	beq.n	8007672 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007652:	677b      	str	r3, [r7, #116]	; 0x74
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
 800765e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e6      	bne.n	800763e <UART_Start_Receive_IT+0x1be>
 8007670:	e018      	b.n	80076a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	613b      	str	r3, [r7, #16]
   return(result);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f043 0320 	orr.w	r3, r3, #32
 8007686:	67bb      	str	r3, [r7, #120]	; 0x78
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007690:	623b      	str	r3, [r7, #32]
 8007692:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	69f9      	ldr	r1, [r7, #28]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	61bb      	str	r3, [r7, #24]
   return(result);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	378c      	adds	r7, #140	; 0x8c
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	08008229 	.word	0x08008229
 80076b8:	08007ec9 	.word	0x08007ec9
 80076bc:	08007d11 	.word	0x08007d11
 80076c0:	08007b59 	.word	0x08007b59

080076c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b095      	sub	sp, #84	; 0x54
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ea:	643b      	str	r3, [r7, #64]	; 0x40
 80076ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e6      	bne.n	80076cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	61fb      	str	r3, [r7, #28]
   return(result);
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	4b1e      	ldr	r3, [pc, #120]	; (800778c <UART_EndRxTransfer+0xc8>)
 8007712:	4013      	ands	r3, r2
 8007714:	64bb      	str	r3, [r7, #72]	; 0x48
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3308      	adds	r3, #8
 800771c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e5      	bne.n	80076fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007736:	2b01      	cmp	r3, #1
 8007738:	d118      	bne.n	800776c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60bb      	str	r3, [r7, #8]
   return(result);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f023 0310 	bic.w	r3, r3, #16
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6979      	ldr	r1, [r7, #20]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	613b      	str	r3, [r7, #16]
   return(result);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007780:	bf00      	nop
 8007782:	3754      	adds	r7, #84	; 0x54
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	effffffe 	.word	0xeffffffe

08007790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7fe fe30 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b08f      	sub	sp, #60	; 0x3c
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ca:	2b21      	cmp	r3, #33	; 0x21
 80077cc:	d14c      	bne.n	8007868 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d132      	bne.n	8007840 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e6      	bne.n	80077da <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	60bb      	str	r3, [r7, #8]
   return(result);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	613b      	str	r3, [r7, #16]
   return(result);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800783e:	e013      	b.n	8007868 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007868:	bf00      	nop
 800786a:	373c      	adds	r7, #60	; 0x3c
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b091      	sub	sp, #68	; 0x44
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	2b21      	cmp	r3, #33	; 0x21
 8007884:	d151      	bne.n	800792a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d132      	bne.n	80078f8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	623b      	str	r3, [r7, #32]
   return(result);
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30
 80078b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e6      	bne.n	8007892 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	69b9      	ldr	r1, [r7, #24]
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	617b      	str	r3, [r7, #20]
   return(result);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80078f6:	e018      	b.n	800792a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80078fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800790c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800792a:	bf00      	nop
 800792c:	3744      	adds	r7, #68	; 0x44
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007936:	b480      	push	{r7}
 8007938:	b091      	sub	sp, #68	; 0x44
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007944:	2b21      	cmp	r3, #33	; 0x21
 8007946:	d160      	bne.n	8007a0a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800794e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007950:	e057      	b.n	8007a02 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d133      	bne.n	80079c6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	623b      	str	r3, [r7, #32]
   return(result);
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797e:	633a      	str	r2, [r7, #48]	; 0x30
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e5      	bne.n	800795e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	617b      	str	r3, [r7, #20]
   return(result);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80079c4:	e021      	b.n	8007a0a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d013      	beq.n	80079fc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80079fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80079fe:	3b01      	subs	r3, #1
 8007a00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1a4      	bne.n	8007952 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007a08:	e7ff      	b.n	8007a0a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8007a0a:	bf00      	nop
 8007a0c:	3744      	adds	r7, #68	; 0x44
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b091      	sub	sp, #68	; 0x44
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a24:	2b21      	cmp	r3, #33	; 0x21
 8007a26:	d165      	bne.n	8007af4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a30:	e05c      	b.n	8007aec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d133      	bne.n	8007aa6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e5      	bne.n	8007a3e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6979      	ldr	r1, [r7, #20]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e6      	bne.n	8007a72 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007aa4:	e026      	b.n	8007af4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d018      	beq.n	8007ae6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	1c9a      	adds	r2, r3, #2
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007ae6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d19f      	bne.n	8007a32 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007af2:	e7ff      	b.n	8007af4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007af4:	bf00      	nop
 8007af6:	3744      	adds	r7, #68	; 0x44
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	613b      	str	r3, [r7, #16]
   return(result);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fe fc59 	bl	8006400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b4e:	bf00      	nop
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b09c      	sub	sp, #112	; 0x70
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b70:	2b22      	cmp	r3, #34	; 0x22
 8007b72:	f040 80be 	bne.w	8007cf2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b90:	400a      	ands	r2, r1
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 80a1 	bne.w	8007d02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8007be0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e6      	bne.n	8007bc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	667b      	str	r3, [r7, #100]	; 0x64
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c12:	647a      	str	r2, [r7, #68]	; 0x44
 8007c14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e5      	bne.n	8007bf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <UART_RxISR_8BIT+0x1b4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d01f      	beq.n	8007c84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d018      	beq.n	8007c84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c66:	663b      	str	r3, [r7, #96]	; 0x60
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c70:	633b      	str	r3, [r7, #48]	; 0x30
 8007c72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d12e      	bne.n	8007cea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0310 	bic.w	r3, r3, #16
 8007ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d103      	bne.n	8007cda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fe fba0 	bl	8006428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ce8:	e00b      	b.n	8007d02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7f8 fc94 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 8007cf0:	e007      	b.n	8007d02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	699a      	ldr	r2, [r3, #24]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0208 	orr.w	r2, r2, #8
 8007d00:	619a      	str	r2, [r3, #24]
}
 8007d02:	bf00      	nop
 8007d04:	3770      	adds	r7, #112	; 0x70
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	58000c00 	.word	0x58000c00

08007d10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b09c      	sub	sp, #112	; 0x70
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d28:	2b22      	cmp	r3, #34	; 0x22
 8007d2a:	f040 80be 	bne.w	8007eaa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d46:	4013      	ands	r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 80a1 	bne.w	8007eba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d96:	657b      	str	r3, [r7, #84]	; 0x54
 8007d98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e6      	bne.n	8007d78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dca:	643a      	str	r2, [r7, #64]	; 0x40
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e5      	bne.n	8007daa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a33      	ldr	r2, [pc, #204]	; (8007ec4 <UART_RxISR_16BIT+0x1b4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d01f      	beq.n	8007e3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d018      	beq.n	8007e3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e6      	bne.n	8007e0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d12e      	bne.n	8007ea2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f023 0310 	bic.w	r3, r3, #16
 8007e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	613b      	str	r3, [r7, #16]
   return(result);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d103      	bne.n	8007e92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2210      	movs	r2, #16
 8007e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fe fac4 	bl	8006428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ea0:	e00b      	b.n	8007eba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7f8 fbb8 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 8007ea8:	e007      	b.n	8007eba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0208 	orr.w	r2, r2, #8
 8007eb8:	619a      	str	r2, [r3, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	3770      	adds	r7, #112	; 0x70
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58000c00 	.word	0x58000c00

08007ec8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0ac      	sub	sp, #176	; 0xb0
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ed6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007efe:	2b22      	cmp	r3, #34	; 0x22
 8007f00:	f040 8180 	bne.w	8008204 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f0a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f0e:	e123      	b.n	8008158 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007f1e:	b2d9      	uxtb	r1, r3
 8007f20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	400a      	ands	r2, r1
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d053      	beq.n	800800a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d011      	beq.n	8007f92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f88:	f043 0201 	orr.w	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d011      	beq.n	8007fc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f043 0204 	orr.w	r2, r3, #4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d011      	beq.n	8007ff2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f043 0202 	orr.w	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d006      	beq.n	800800a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7fe fa09 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 80a0 	bne.w	8008158 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800803a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800803c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008040:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e4      	bne.n	8008018 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800805e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008060:	4b6e      	ldr	r3, [pc, #440]	; (800821c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8008062:	4013      	ands	r3, r2
 8008064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008072:	66ba      	str	r2, [r7, #104]	; 0x68
 8008074:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008078:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e3      	bne.n	800804e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a60      	ldr	r2, [pc, #384]	; (8008220 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d021      	beq.n	80080e8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01a      	beq.n	80080e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080d4:	657b      	str	r3, [r7, #84]	; 0x54
 80080d6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d130      	bne.n	8008152 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008118:	643b      	str	r3, [r7, #64]	; 0x40
 800811a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800811e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e4      	bne.n	80080f6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b10      	cmp	r3, #16
 8008138:	d103      	bne.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2210      	movs	r2, #16
 8008140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fe f96c 	bl	8006428 <HAL_UARTEx_RxEventCallback>
 8008150:	e002      	b.n	8008158 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7f8 fa60 	bl	8000618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008158:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	f47f aed1 	bne.w	8007f10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008174:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008178:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800817c:	2b00      	cmp	r3, #0
 800817e:	d049      	beq.n	8008214 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008186:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800818a:	429a      	cmp	r2, r3
 800818c:	d242      	bcs.n	8008214 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	61fb      	str	r3, [r7, #28]
   return(result);
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e3      	bne.n	800818e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80081ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f043 0320 	orr.w	r3, r3, #32
 80081e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6979      	ldr	r1, [r7, #20]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	613b      	str	r3, [r7, #16]
   return(result);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e4      	bne.n	80081cc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008202:	e007      	b.n	8008214 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0208 	orr.w	r2, r2, #8
 8008212:	619a      	str	r2, [r3, #24]
}
 8008214:	bf00      	nop
 8008216:	37b0      	adds	r7, #176	; 0xb0
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	effffffe 	.word	0xeffffffe
 8008220:	58000c00 	.word	0x58000c00
 8008224:	08007b59 	.word	0x08007b59

08008228 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b0ae      	sub	sp, #184	; 0xb8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008236:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825e:	2b22      	cmp	r3, #34	; 0x22
 8008260:	f040 8184 	bne.w	800856c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800826a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800826e:	e127      	b.n	80084c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008282:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008286:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800828a:	4013      	ands	r3, r2
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008292:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d053      	beq.n	800836e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d011      	beq.n	80082f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80082d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2201      	movs	r2, #1
 80082e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f043 0201 	orr.w	r2, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d011      	beq.n	8008326 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00b      	beq.n	8008326 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2202      	movs	r2, #2
 8008314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f043 0204 	orr.w	r2, r3, #4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d011      	beq.n	8008356 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2204      	movs	r2, #4
 8008344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834c:	f043 0202 	orr.w	r2, r3, #2
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7fe f857 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	f040 80a2 	bne.w	80084c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800838a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800838c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800839e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083a2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e2      	bne.n	800837c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083c8:	4b6e      	ldr	r3, [pc, #440]	; (8008584 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3308      	adds	r3, #8
 80083d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80083da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e3      	bne.n	80083b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a60      	ldr	r2, [pc, #384]	; (8008588 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d021      	beq.n	8008450 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01a      	beq.n	8008450 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800842a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800843c:	65bb      	str	r3, [r7, #88]	; 0x58
 800843e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800844a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e4      	bne.n	800841a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d130      	bne.n	80084ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008480:	647b      	str	r3, [r7, #68]	; 0x44
 8008482:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f003 0310 	and.w	r3, r3, #16
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d103      	bne.n	80084aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2210      	movs	r2, #16
 80084a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fd ffb8 	bl	8006428 <HAL_UARTEx_RxEventCallback>
 80084b8:	e002      	b.n	80084c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f8 f8ac 	bl	8000618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80084c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f47f aecd 	bne.w	8008270 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d049      	beq.n	800857c <UART_RxISR_16BIT_FIFOEN+0x354>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d242      	bcs.n	800857c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3308      	adds	r3, #8
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	623b      	str	r3, [r7, #32]
   return(result);
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3308      	adds	r3, #8
 8008516:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800851a:	633a      	str	r2, [r7, #48]	; 0x30
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e3      	bne.n	80084f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a16      	ldr	r2, [pc, #88]	; (800858c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008532:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	60fb      	str	r3, [r7, #12]
   return(result);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	69b9      	ldr	r1, [r7, #24]
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	617b      	str	r3, [r7, #20]
   return(result);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e4      	bne.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800856a:	e007      	b.n	800857c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0208 	orr.w	r2, r2, #8
 800857a:	619a      	str	r2, [r3, #24]
}
 800857c:	bf00      	nop
 800857e:	37b8      	adds	r7, #184	; 0xb8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	effffffe 	.word	0xeffffffe
 8008588:	58000c00 	.word	0x58000c00
 800858c:	08007d11 	.word	0x08007d11

08008590 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80085de:	2302      	movs	r3, #2
 80085e0:	e027      	b.n	8008632 <HAL_UARTEx_DisableFifoMode+0x66>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2224      	movs	r2, #36	; 0x24
 80085ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008610:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008652:	2302      	movs	r3, #2
 8008654:	e02d      	b.n	80086b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2224      	movs	r2, #36	; 0x24
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f850 	bl	8008738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e02d      	b.n	800872e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2224      	movs	r2, #36	; 0x24
 80086de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0201 	bic.w	r2, r2, #1
 80086f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f812 	bl	8008738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008744:	2b00      	cmp	r3, #0
 8008746:	d108      	bne.n	800875a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008758:	e031      	b.n	80087be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800875a:	2310      	movs	r3, #16
 800875c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800875e:	2310      	movs	r3, #16
 8008760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	0e5b      	lsrs	r3, r3, #25
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	0f5b      	lsrs	r3, r3, #29
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	7b3a      	ldrb	r2, [r7, #12]
 8008786:	4911      	ldr	r1, [pc, #68]	; (80087cc <UARTEx_SetNbDataToProcess+0x94>)
 8008788:	5c8a      	ldrb	r2, [r1, r2]
 800878a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800878e:	7b3a      	ldrb	r2, [r7, #12]
 8008790:	490f      	ldr	r1, [pc, #60]	; (80087d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008794:	fb93 f3f2 	sdiv	r3, r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	7b7a      	ldrb	r2, [r7, #13]
 80087a4:	4909      	ldr	r1, [pc, #36]	; (80087cc <UARTEx_SetNbDataToProcess+0x94>)
 80087a6:	5c8a      	ldrb	r2, [r1, r2]
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087ac:	7b7a      	ldrb	r2, [r7, #13]
 80087ae:	4908      	ldr	r1, [pc, #32]	; (80087d0 <UARTEx_SetNbDataToProcess+0x98>)
 80087b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	0800887c 	.word	0x0800887c
 80087d0:	08008884 	.word	0x08008884

080087d4 <memset>:
 80087d4:	4402      	add	r2, r0
 80087d6:	4603      	mov	r3, r0
 80087d8:	4293      	cmp	r3, r2
 80087da:	d100      	bne.n	80087de <memset+0xa>
 80087dc:	4770      	bx	lr
 80087de:	f803 1b01 	strb.w	r1, [r3], #1
 80087e2:	e7f9      	b.n	80087d8 <memset+0x4>

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4d0d      	ldr	r5, [pc, #52]	; (800881c <__libc_init_array+0x38>)
 80087e8:	4c0d      	ldr	r4, [pc, #52]	; (8008820 <__libc_init_array+0x3c>)
 80087ea:	1b64      	subs	r4, r4, r5
 80087ec:	10a4      	asrs	r4, r4, #2
 80087ee:	2600      	movs	r6, #0
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	4d0b      	ldr	r5, [pc, #44]	; (8008824 <__libc_init_array+0x40>)
 80087f6:	4c0c      	ldr	r4, [pc, #48]	; (8008828 <__libc_init_array+0x44>)
 80087f8:	f000 f818 	bl	800882c <_init>
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	2600      	movs	r6, #0
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	08008894 	.word	0x08008894
 8008820:	08008894 	.word	0x08008894
 8008824:	08008894 	.word	0x08008894
 8008828:	08008898 	.word	0x08008898

0800882c <_init>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr

08008838 <_fini>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr
