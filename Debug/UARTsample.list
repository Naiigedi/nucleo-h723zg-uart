
UARTsample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008298  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080085bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080085cc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800862c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  240000d0  0800868c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400049c  0800868c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149dd  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f3  00000000  00000000  00034b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e9  00000000  00000000  00037ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032399  00000000  00000000  000384c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126d9  00000000  00000000  0006a862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014568a  00000000  00000000  0007cf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003570  00000000  00000000  001c25c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001c5b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800854c 	.word	0x0800854c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	0800854c 	.word	0x0800854c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <HAL_UART_RxCpltCallback>:
uint16_t rcvLength;             /* 受信??��?��?ータ数 */
uint8_t rcvBuffer[BUFF_SIZE];   /* 受信バッファ */
uint8_t sndBuffer[BUFF_SIZE];   /* 送信バッファ */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    flagRcved = TRUE;           /* 受信完�?フラグ設??��?��? */
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_UART_RxCpltCallback+0x1c>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	240002fc 	.word	0x240002fc

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fd71 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f891 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f9eb 	bl	8000a20 <MX_GPIO_Init>
  MX_ETH_Init();
 800064a:	f000 f8fd 	bl	8000848 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800064e:	f000 f993 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000652:	f000 f9dd 	bl	8000a10 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000656:	f000 f943 	bl	80008e0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[] = "hello world!\n\r";
 800065a:	4b3c      	ldr	r3, [pc, #240]	; (800074c <main+0x114>)
 800065c:	f107 0418 	add.w	r4, r7, #24
 8000660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000662:	c407      	stmia	r4!, {r0, r1, r2}
 8000664:	8023      	strh	r3, [r4, #0]
 8000666:	3402      	adds	r4, #2
 8000668:	0c1b      	lsrs	r3, r3, #16
 800066a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart4, msg, strlen((char*)msg), 100);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe4b 	bl	800030c <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f107 0118 	add.w	r1, r7, #24
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	4833      	ldr	r0, [pc, #204]	; (8000750 <main+0x118>)
 8000682:	f005 f825 	bl	80056d0 <HAL_UART_Transmit>
  {
	    /* USER CODE END WHILE */
		  do
		      {
		        /* 受信割り込み開始 */
		        HAL_UART_Receive_IT(&huart4, rcvBuffer, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4932      	ldr	r1, [pc, #200]	; (8000754 <main+0x11c>)
 800068a:	4831      	ldr	r0, [pc, #196]	; (8000750 <main+0x118>)
 800068c:	f005 f942 	bl	8005914 <HAL_UART_Receive_IT>

		        /* 受信割り込み終了待ち */
		        while (flagRcved == FALSE)
 8000690:	bf00      	nop
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <main+0x120>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0fb      	beq.n	8000692 <main+0x5a>
		        {
		            ;
		        }

		        sndBuffer[rcvLength] = rcvBuffer[0];
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <main+0x124>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <main+0x11c>)
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <main+0x128>)
 80006a6:	5499      	strb	r1, [r3, r2]
		        rcvLength++;
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <main+0x124>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <main+0x124>)
 80006b2:	801a      	strh	r2, [r3, #0]
		        flagRcved = FALSE;
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x120>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
		      } while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <main+0x11c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0d      	cmp	r3, #13
 80006c0:	d003      	beq.n	80006ca <main+0x92>
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <main+0x124>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2bc7      	cmp	r3, #199	; 0xc7
 80006c8:	d9dd      	bls.n	8000686 <main+0x4e>

		  	  /* ブレーク信号を送信 */
		  	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
		  	  //HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10);
		  	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	607b      	str	r3, [r7, #4]
		  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
		  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
		  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
		  	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	481d      	ldr	r0, [pc, #116]	; (8000764 <main+0x12c>)
 80006f0:	f002 f87a 	bl	80027e8 <HAL_GPIO_Init>
		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fa:	481a      	ldr	r0, [pc, #104]	; (8000764 <main+0x12c>)
 80006fc:	f002 fa1c 	bl	8002b38 <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f000 fda0 	bl	8001248 <HAL_Delay>
		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <main+0x12c>)
 8000710:	f002 fa12 	bl	8002b38 <HAL_GPIO_WritePin>

		  	  /* 再度UART TxピンをUARTに割り当て後、受信した内容を送信 */
		  	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000718:	607b      	str	r3, [r7, #4]
		  	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	60bb      	str	r3, [r7, #8]
		  	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
		  	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
		  	  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000726:	2308      	movs	r3, #8
 8000728:	617b      	str	r3, [r7, #20]
		  	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <main+0x12c>)
 8000730:	f002 f85a 	bl	80027e8 <HAL_GPIO_Init>
		      HAL_UART_Transmit_IT(&huart4, sndBuffer, rcvLength);
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <main+0x124>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <main+0x128>)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <main+0x118>)
 800073e:	f005 f855 	bl	80057ec <HAL_UART_Transmit_IT>
		      rcvLength = 0;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <main+0x124>)
 8000744:	2200      	movs	r2, #0
 8000746:	801a      	strh	r2, [r3, #0]
  {
 8000748:	e79d      	b.n	8000686 <main+0x4e>
 800074a:	bf00      	nop
 800074c:	08008564 	.word	0x08008564
 8000750:	240001d4 	.word	0x240001d4
 8000754:	24000300 	.word	0x24000300
 8000758:	240002fc 	.word	0x240002fc
 800075c:	240002fe 	.word	0x240002fe
 8000760:	240003c8 	.word	0x240003c8
 8000764:	58020800 	.word	0x58020800

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	; 0x70
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	224c      	movs	r2, #76	; 0x4c
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f007 febc 	bl	80084f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2220      	movs	r2, #32
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f007 feb6 	bl	80084f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000788:	2002      	movs	r0, #2
 800078a:	f002 f9ef 	bl	8002b6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <SystemClock_Config+0xdc>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <SystemClock_Config+0xdc>)
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemClock_Config+0xdc>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007aa:	bf00      	nop
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xdc>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b8:	d1f8      	bne.n	80007ac <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007ba:	2321      	movs	r3, #33	; 0x21
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80007d4:	f240 1313 	movw	r3, #275	; 0x113
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007e6:	2304      	movs	r3, #4
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f9f2 	bl	8002be0 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000802:	f000 fa09 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000812:	2308      	movs	r3, #8
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2103      	movs	r1, #3
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fdb1 	bl	8003394 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000838:	f000 f9ee 	bl	8000c18 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58024800 	.word	0x58024800

08000848 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ETH_Init+0x80>)
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_ETH_Init+0x84>)
 8000850:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ETH_Init+0x88>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ETH_Init+0x88>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_ETH_Init+0x88>)
 8000860:	22e1      	movs	r2, #225	; 0xe1
 8000862:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_ETH_Init+0x88>)
 8000866:	2200      	movs	r2, #0
 8000868:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_ETH_Init+0x88>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_ETH_Init+0x88>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ETH_Init+0x80>)
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_ETH_Init+0x88>)
 800087a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ETH_Init+0x80>)
 800087e:	2201      	movs	r2, #1
 8000880:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_ETH_Init+0x80>)
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_ETH_Init+0x8c>)
 8000886:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ETH_Init+0x80>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_ETH_Init+0x90>)
 800088c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_ETH_Init+0x80>)
 8000890:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000894:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_ETH_Init+0x80>)
 8000898:	f001 fb82 	bl	8001fa0 <HAL_ETH_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008a2:	f000 f9b9 	bl	8000c18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008a6:	2238      	movs	r2, #56	; 0x38
 80008a8:	2100      	movs	r1, #0
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_ETH_Init+0x94>)
 80008ac:	f007 fe22 	bl	80084f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_ETH_Init+0x94>)
 80008b2:	2221      	movs	r2, #33	; 0x21
 80008b4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_ETH_Init+0x94>)
 80008b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008bc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_ETH_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000124 	.word	0x24000124
 80008cc:	40028000 	.word	0x40028000
 80008d0:	24000490 	.word	0x24000490
 80008d4:	24000070 	.word	0x24000070
 80008d8:	24000010 	.word	0x24000010
 80008dc:	240000ec 	.word	0x240000ec

080008e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_UART4_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_UART4_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_UART4_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_UART4_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_UART4_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_UART4_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_UART4_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_UART4_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_UART4_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_UART4_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_UART4_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_UART4_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_UART4_Init+0x90>)
 800092a:	f004 fe81 	bl	8005630 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f970 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_UART4_Init+0x90>)
 800093c:	f007 fd0f 	bl	800835e <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f967 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_UART4_Init+0x90>)
 800094e:	f007 fd44 	bl	80083da <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f95e 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_UART4_Init+0x90>)
 800095e:	f007 fcc5 	bl	80082ec <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f956 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	240001d4 	.word	0x240001d4
 8000974:	40004c00 	.word	0x40004c00

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART3_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009c2:	f004 fe35 	bl	8005630 <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f924 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009d4:	f007 fcc3 	bl	800835e <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f91b 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009e6:	f007 fcf8 	bl	80083da <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f912 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART3_UART_Init+0x90>)
 80009f6:	f007 fc79 	bl	80082ec <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f90a 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	24000268 	.word	0x24000268
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b71      	ldr	r3, [pc, #452]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a6f      	ldr	r2, [pc, #444]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b6d      	ldr	r3, [pc, #436]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a54:	4b69      	ldr	r3, [pc, #420]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a68      	ldr	r2, [pc, #416]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b62      	ldr	r3, [pc, #392]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a60      	ldr	r2, [pc, #384]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b5a      	ldr	r3, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a59      	ldr	r2, [pc, #356]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b56      	ldr	r3, [pc, #344]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab4:	4a51      	ldr	r2, [pc, #324]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abe:	4b4f      	ldr	r3, [pc, #316]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a42      	ldr	r2, [pc, #264]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <MX_GPIO_Init+0x1dc>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b0e:	483c      	ldr	r0, [pc, #240]	; (8000c00 <MX_GPIO_Init+0x1e0>)
 8000b10:	f002 f812 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1a:	483a      	ldr	r0, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x1e4>)
 8000b1c:	f002 f80c 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2102      	movs	r1, #2
 8000b24:	4838      	ldr	r0, [pc, #224]	; (8000c08 <MX_GPIO_Init+0x1e8>)
 8000b26:	f002 f807 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_GPIO_Init+0x1ec>)
 8000b40:	f001 fe52 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b44:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4828      	ldr	r0, [pc, #160]	; (8000c00 <MX_GPIO_Init+0x1e0>)
 8000b5e:	f001 fe43 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_GPIO_Init+0x1e4>)
 8000b7c:	f001 fe34 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <MX_GPIO_Init+0x1f0>)
 8000b96:	f001 fe27 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4819      	ldr	r0, [pc, #100]	; (8000c14 <MX_GPIO_Init+0x1f4>)
 8000bb0:	f001 fe1a 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4810      	ldr	r0, [pc, #64]	; (8000c14 <MX_GPIO_Init+0x1f4>)
 8000bd2:	f001 fe09 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_GPIO_Init+0x1e8>)
 8000bee:	f001 fdfb 	bl	80027e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3730      	adds	r7, #48	; 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020400 	.word	0x58020400
 8000c04:	58020c00 	.word	0x58020c00
 8000c08:	58021000 	.word	0x58021000
 8000c0c:	58020800 	.word	0x58020800
 8000c10:	58021800 	.word	0x58021800
 8000c14:	58020000 	.word	0x58020000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x30>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	58024400 	.word	0x58024400

08000c58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <HAL_ETH_MspInit+0x184>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f040 80ab 	bne.w	8000dd2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c7c:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c82:	4a57      	ldr	r2, [pc, #348]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8c:	4b54      	ldr	r3, [pc, #336]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c96:	623b      	str	r3, [r7, #32]
 8000c98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c9a:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca0:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000cb8:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cbe:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a40      	ldr	r2, [pc, #256]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <HAL_ETH_MspInit+0x188>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d4e:	2332      	movs	r3, #50	; 0x32
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	481e      	ldr	r0, [pc, #120]	; (8000de4 <HAL_ETH_MspInit+0x18c>)
 8000d6a:	f001 fd3d 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6e:	2386      	movs	r3, #134	; 0x86
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <HAL_ETH_MspInit+0x190>)
 8000d8a:	f001 fd2d 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da0:	230b      	movs	r3, #11
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <HAL_ETH_MspInit+0x194>)
 8000dac:	f001 fd1c 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000db0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <HAL_ETH_MspInit+0x198>)
 8000dce:	f001 fd0b 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	; 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40028000 	.word	0x40028000
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020800 	.word	0x58020800
 8000de8:	58020000 	.word	0x58020000
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58021800 	.word	0x58021800

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ba      	sub	sp, #232	; 0xe8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	22b8      	movs	r2, #184	; 0xb8
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fb6d 	bl	80084f4 <memset>
  if(huart->Instance==UART4)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <HAL_UART_MspInit+0x170>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d14f      	bne.n	8000ec4 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e24:	f04f 0202 	mov.w	r2, #2
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fe36 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e46:	f7ff fee7 	bl	8000c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e50:	4a45      	ldr	r2, [pc, #276]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482f      	ldr	r0, [pc, #188]	; (8000f6c <HAL_UART_MspInit+0x178>)
 8000eae:	f001 fc9b 	bl	80027e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2034      	movs	r0, #52	; 0x34
 8000eb8:	f000 fad9 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ebc:	2034      	movs	r0, #52	; 0x34
 8000ebe:	f000 faf0 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec2:	e04b      	b.n	8000f5c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_UART_MspInit+0x17c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d146      	bne.n	8000f5c <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ece:	f04f 0202 	mov.w	r2, #2
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee0:	f107 0318 	add.w	r3, r7, #24
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fde1 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000ef0:	f7ff fe92 	bl	8000c18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x174>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <HAL_UART_MspInit+0x180>)
 8000f58:	f001 fc46 	bl	80027e8 <HAL_GPIO_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	37e8      	adds	r7, #232	; 0xe8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40004c00 	.word	0x40004c00
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020800 	.word	0x58020800
 8000f70:	40004800 	.word	0x40004800
 8000f74:	58020c00 	.word	0x58020c00

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f920 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <UART4_IRQHandler+0x10>)
 8000fd2:	f004 fceb 	bl	80059ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	240001d4 	.word	0x240001d4

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <SystemInit+0xd0>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <SystemInit+0xd0>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <SystemInit+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d807      	bhi.n	8001010 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <SystemInit+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 030f 	bic.w	r3, r3, #15
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <SystemInit+0xd4>)
 800100a:	f043 0307 	orr.w	r3, r3, #7
 800100e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <SystemInit+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <SystemInit+0xd8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <SystemInit+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemInit+0xd8>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4924      	ldr	r1, [pc, #144]	; (80010b8 <SystemInit+0xd8>)
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <SystemInit+0xdc>)
 800102a:	4013      	ands	r3, r2
 800102c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SystemInit+0xd4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemInit+0xd4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 030f 	bic.w	r3, r3, #15
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <SystemInit+0xd4>)
 8001044:	f043 0307 	orr.w	r3, r3, #7
 8001048:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <SystemInit+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <SystemInit+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <SystemInit+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <SystemInit+0xd8>)
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <SystemInit+0xe0>)
 8001060:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <SystemInit+0xd8>)
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <SystemInit+0xe4>)
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <SystemInit+0xd8>)
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <SystemInit+0xe8>)
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <SystemInit+0xd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <SystemInit+0xd8>)
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <SystemInit+0xe8>)
 8001078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <SystemInit+0xd8>)
 800107c:	2200      	movs	r2, #0
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <SystemInit+0xd8>)
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <SystemInit+0xe8>)
 8001084:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <SystemInit+0xd8>)
 8001088:	2200      	movs	r2, #0
 800108a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <SystemInit+0xd8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <SystemInit+0xd8>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <SystemInit+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <SystemInit+0xec>)
 80010a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	52002000 	.word	0x52002000
 80010b8:	58024400 	.word	0x58024400
 80010bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80010c0:	02020200 	.word	0x02020200
 80010c4:	01ff0000 	.word	0x01ff0000
 80010c8:	01010280 	.word	0x01010280
 80010cc:	52004000 	.word	0x52004000

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d4:	f7ff ff84 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f007 fa01 	bl	8008504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa99 	bl	8000638 <main>
  bx  lr
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800110c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001110:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001114:	080085bc 	.word	0x080085bc
  ldr r2, =_sbss
 8001118:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800111c:	2400049c 	.word	0x2400049c

08001120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC3_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f994 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001130:	f002 fae6 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_Init+0x68>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4913      	ldr	r1, [pc, #76]	; (8001190 <HAL_Init+0x6c>)
 8001142:	5ccb      	ldrb	r3, [r1, r3]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
 800114c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_Init+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_Init+0x6c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_Init+0x70>)
 8001166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001168:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_Init+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f814 	bl	800119c <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e002      	b.n	8001184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fd51 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400
 8001190:	08008574 	.word	0x08008574
 8001194:	24000004 	.word	0x24000004
 8001198:	24000000 	.word	0x24000000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_InitTick+0x60>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e021      	b.n	80011f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_InitTick+0x64>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_InitTick+0x60>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f979 	bl	80014be <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f943 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x68>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2400000c 	.word	0x2400000c
 8001200:	24000000 	.word	0x24000000
 8001204:	24000008 	.word	0x24000008

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2400000c 	.word	0x2400000c
 800122c:	24000498 	.word	0x24000498

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	24000498 	.word	0x24000498

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2400000c 	.word	0x2400000c

08001290 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012a0:	4904      	ldr	r1, [pc, #16]	; (80012b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	58000400 	.word	0x58000400

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <__NVIC_SetPriorityGrouping+0x40>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x40>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	05fa0000 	.word	0x05fa0000

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff8e 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff29 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff40 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff33 	bl	800131c <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa4 	bl	8001414 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff fea6 	bl	8001230 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e2dc      	b.n	8001aaa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e2cd      	b.n	8001aaa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a76      	ldr	r2, [pc, #472]	; (80016ec <HAL_DMA_Abort+0x214>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04a      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <HAL_DMA_Abort+0x218>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d045      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <HAL_DMA_Abort+0x21c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d040      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a71      	ldr	r2, [pc, #452]	; (80016f8 <HAL_DMA_Abort+0x220>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d03b      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a70      	ldr	r2, [pc, #448]	; (80016fc <HAL_DMA_Abort+0x224>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d036      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_DMA_Abort+0x228>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d031      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6d      	ldr	r2, [pc, #436]	; (8001704 <HAL_DMA_Abort+0x22c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d02c      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6b      	ldr	r2, [pc, #428]	; (8001708 <HAL_DMA_Abort+0x230>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d027      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6a      	ldr	r2, [pc, #424]	; (800170c <HAL_DMA_Abort+0x234>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d022      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a68      	ldr	r2, [pc, #416]	; (8001710 <HAL_DMA_Abort+0x238>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01d      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_DMA_Abort+0x23c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d018      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_DMA_Abort+0x240>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a64      	ldr	r2, [pc, #400]	; (800171c <HAL_DMA_Abort+0x244>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00e      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a62      	ldr	r2, [pc, #392]	; (8001720 <HAL_DMA_Abort+0x248>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d009      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a61      	ldr	r2, [pc, #388]	; (8001724 <HAL_DMA_Abort+0x24c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d004      	beq.n	80015ae <HAL_DMA_Abort+0xd6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a5f      	ldr	r2, [pc, #380]	; (8001728 <HAL_DMA_Abort+0x250>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_DMA_Abort+0xda>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_DMA_Abort+0xdc>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 021e 	bic.w	r2, r2, #30
 80015c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e00a      	b.n	80015f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020e 	bic.w	r2, r2, #14
 80015ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <HAL_DMA_Abort+0x214>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d072      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <HAL_DMA_Abort+0x218>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d06d      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a39      	ldr	r2, [pc, #228]	; (80016f4 <HAL_DMA_Abort+0x21c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d068      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a37      	ldr	r2, [pc, #220]	; (80016f8 <HAL_DMA_Abort+0x220>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d063      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a36      	ldr	r2, [pc, #216]	; (80016fc <HAL_DMA_Abort+0x224>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d05e      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a34      	ldr	r2, [pc, #208]	; (8001700 <HAL_DMA_Abort+0x228>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d059      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a33      	ldr	r2, [pc, #204]	; (8001704 <HAL_DMA_Abort+0x22c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d054      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_DMA_Abort+0x230>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d04f      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_DMA_Abort+0x234>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04a      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <HAL_DMA_Abort+0x238>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d045      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_DMA_Abort+0x23c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d040      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <HAL_DMA_Abort+0x240>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d03b      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_DMA_Abort+0x244>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d036      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_DMA_Abort+0x248>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d031      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <HAL_DMA_Abort+0x24c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d02c      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <HAL_DMA_Abort+0x250>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d027      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_DMA_Abort+0x254>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d022      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a22      	ldr	r2, [pc, #136]	; (8001730 <HAL_DMA_Abort+0x258>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01d      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <HAL_DMA_Abort+0x25c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d018      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_DMA_Abort+0x260>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_DMA_Abort+0x264>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00e      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <HAL_DMA_Abort+0x268>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d009      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_DMA_Abort+0x26c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_DMA_Abort+0x20e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_DMA_Abort+0x270>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d132      	bne.n	800174c <HAL_DMA_Abort+0x274>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e031      	b.n	800174e <HAL_DMA_Abort+0x276>
 80016ea:	bf00      	nop
 80016ec:	40020010 	.word	0x40020010
 80016f0:	40020028 	.word	0x40020028
 80016f4:	40020040 	.word	0x40020040
 80016f8:	40020058 	.word	0x40020058
 80016fc:	40020070 	.word	0x40020070
 8001700:	40020088 	.word	0x40020088
 8001704:	400200a0 	.word	0x400200a0
 8001708:	400200b8 	.word	0x400200b8
 800170c:	40020410 	.word	0x40020410
 8001710:	40020428 	.word	0x40020428
 8001714:	40020440 	.word	0x40020440
 8001718:	40020458 	.word	0x40020458
 800171c:	40020470 	.word	0x40020470
 8001720:	40020488 	.word	0x40020488
 8001724:	400204a0 	.word	0x400204a0
 8001728:	400204b8 	.word	0x400204b8
 800172c:	58025408 	.word	0x58025408
 8001730:	5802541c 	.word	0x5802541c
 8001734:	58025430 	.word	0x58025430
 8001738:	58025444 	.word	0x58025444
 800173c:	58025458 	.word	0x58025458
 8001740:	5802546c 	.word	0x5802546c
 8001744:	58025480 	.word	0x58025480
 8001748:	58025494 	.word	0x58025494
 800174c:	2300      	movs	r3, #0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001760:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6d      	ldr	r2, [pc, #436]	; (800191c <HAL_DMA_Abort+0x444>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04a      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <HAL_DMA_Abort+0x448>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d045      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_DMA_Abort+0x44c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d040      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a68      	ldr	r2, [pc, #416]	; (8001928 <HAL_DMA_Abort+0x450>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d03b      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a67      	ldr	r2, [pc, #412]	; (800192c <HAL_DMA_Abort+0x454>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d036      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_DMA_Abort+0x458>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a64      	ldr	r2, [pc, #400]	; (8001934 <HAL_DMA_Abort+0x45c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d02c      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a62      	ldr	r2, [pc, #392]	; (8001938 <HAL_DMA_Abort+0x460>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d027      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a61      	ldr	r2, [pc, #388]	; (800193c <HAL_DMA_Abort+0x464>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d022      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a5f      	ldr	r2, [pc, #380]	; (8001940 <HAL_DMA_Abort+0x468>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01d      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <HAL_DMA_Abort+0x46c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d018      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <HAL_DMA_Abort+0x470>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5b      	ldr	r2, [pc, #364]	; (800194c <HAL_DMA_Abort+0x474>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00e      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a59      	ldr	r2, [pc, #356]	; (8001950 <HAL_DMA_Abort+0x478>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d009      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_DMA_Abort+0x47c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d004      	beq.n	8001802 <HAL_DMA_Abort+0x32a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_DMA_Abort+0x480>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d108      	bne.n	8001814 <HAL_DMA_Abort+0x33c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e007      	b.n	8001824 <HAL_DMA_Abort+0x34c>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001824:	e013      	b.n	800184e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001826:	f7ff fd03 	bl	8001230 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b05      	cmp	r3, #5
 8001832:	d90c      	bls.n	800184e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2220      	movs	r2, #32
 8001838:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e12d      	b.n	8001aaa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1e5      	bne.n	8001826 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_DMA_Abort+0x444>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04a      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_DMA_Abort+0x448>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d045      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <HAL_DMA_Abort+0x44c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d040      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <HAL_DMA_Abort+0x450>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d03b      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <HAL_DMA_Abort+0x454>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d036      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_DMA_Abort+0x458>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d031      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_DMA_Abort+0x45c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d02c      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_DMA_Abort+0x460>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d027      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_DMA_Abort+0x464>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_DMA_Abort+0x468>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01d      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a20      	ldr	r2, [pc, #128]	; (8001944 <HAL_DMA_Abort+0x46c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d018      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_DMA_Abort+0x470>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_DMA_Abort+0x474>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00e      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_DMA_Abort+0x478>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_DMA_Abort+0x47c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_DMA_Abort+0x422>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_DMA_Abort+0x480>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_DMA_Abort+0x426>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_DMA_Abort+0x428>
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d02b      	beq.n	800195c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	223f      	movs	r2, #63	; 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	e02a      	b.n	8001972 <HAL_DMA_Abort+0x49a>
 800191c:	40020010 	.word	0x40020010
 8001920:	40020028 	.word	0x40020028
 8001924:	40020040 	.word	0x40020040
 8001928:	40020058 	.word	0x40020058
 800192c:	40020070 	.word	0x40020070
 8001930:	40020088 	.word	0x40020088
 8001934:	400200a0 	.word	0x400200a0
 8001938:	400200b8 	.word	0x400200b8
 800193c:	40020410 	.word	0x40020410
 8001940:	40020428 	.word	0x40020428
 8001944:	40020440 	.word	0x40020440
 8001948:	40020458 	.word	0x40020458
 800194c:	40020470 	.word	0x40020470
 8001950:	40020488 	.word	0x40020488
 8001954:	400204a0 	.word	0x400204a0
 8001958:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2201      	movs	r2, #1
 800196c:	409a      	lsls	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_DMA_Abort+0x5dc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d072      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_DMA_Abort+0x5e0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d06d      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_DMA_Abort+0x5e4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d068      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_DMA_Abort+0x5e8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d063      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_DMA_Abort+0x5ec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d05e      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a47      	ldr	r2, [pc, #284]	; (8001ac8 <HAL_DMA_Abort+0x5f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d059      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_DMA_Abort+0x5f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d054      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a44      	ldr	r2, [pc, #272]	; (8001ad0 <HAL_DMA_Abort+0x5f8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d04f      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a43      	ldr	r2, [pc, #268]	; (8001ad4 <HAL_DMA_Abort+0x5fc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d04a      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <HAL_DMA_Abort+0x600>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d045      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_DMA_Abort+0x604>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d040      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <HAL_DMA_Abort+0x608>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d03b      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a3d      	ldr	r2, [pc, #244]	; (8001ae4 <HAL_DMA_Abort+0x60c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d036      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_DMA_Abort+0x610>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d031      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <HAL_DMA_Abort+0x614>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d02c      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_DMA_Abort+0x618>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d027      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <HAL_DMA_Abort+0x61c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d022      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a35      	ldr	r2, [pc, #212]	; (8001af8 <HAL_DMA_Abort+0x620>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01d      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a34      	ldr	r2, [pc, #208]	; (8001afc <HAL_DMA_Abort+0x624>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d018      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <HAL_DMA_Abort+0x628>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <HAL_DMA_Abort+0x62c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00e      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_DMA_Abort+0x630>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d009      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2e      	ldr	r2, [pc, #184]	; (8001b0c <HAL_DMA_Abort+0x634>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d004      	beq.n	8001a62 <HAL_DMA_Abort+0x58a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <HAL_DMA_Abort+0x638>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_DMA_Abort+0x58e>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_DMA_Abort+0x590>
 8001a66:	2300      	movs	r3, #0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00c      	beq.n	8001a98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	58025408 	.word	0x58025408
 8001af8:	5802541c 	.word	0x5802541c
 8001afc:	58025430 	.word	0x58025430
 8001b00:	58025444 	.word	0x58025444
 8001b04:	58025458 	.word	0x58025458
 8001b08:	5802546c 	.word	0x5802546c
 8001b0c:	58025480 	.word	0x58025480
 8001b10:	58025494 	.word	0x58025494

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e237      	b.n	8001f96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d004      	beq.n	8001b3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e22c      	b.n	8001f96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a59      	ldr	r2, [pc, #356]	; (8001cbc <HAL_DMA_Abort_IT+0x1a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_DMA_Abort_IT+0x1ac>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_DMA_Abort_IT+0x1b0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a55      	ldr	r2, [pc, #340]	; (8001cc8 <HAL_DMA_Abort_IT+0x1b4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_DMA_Abort_IT+0x1b8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_DMA_Abort_IT+0x1bc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_DMA_Abort_IT+0x1c0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_DMA_Abort_IT+0x1c4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_DMA_Abort_IT+0x1c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a4c      	ldr	r2, [pc, #304]	; (8001ce0 <HAL_DMA_Abort_IT+0x1cc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_DMA_Abort_IT+0x1d0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_DMA_Abort_IT+0x1d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_DMA_Abort_IT+0x1d8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Abort_IT+0xc8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a46      	ldr	r2, [pc, #280]	; (8001cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Abort_IT+0xcc>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_Abort_IT+0xce>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8086 	beq.w	8001cf4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <HAL_DMA_Abort_IT+0x1a0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d04a      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_DMA_Abort_IT+0x1a4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d045      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <HAL_DMA_Abort_IT+0x1a8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d040      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_DMA_Abort_IT+0x1ac>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d03b      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_DMA_Abort_IT+0x1b0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d036      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_DMA_Abort_IT+0x1b4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d031      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_DMA_Abort_IT+0x1b8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02c      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <HAL_DMA_Abort_IT+0x1bc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d027      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_DMA_Abort_IT+0x1c0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d022      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_DMA_Abort_IT+0x1c4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01d      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <HAL_DMA_Abort_IT+0x1c8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_DMA_Abort_IT+0x1cc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_DMA_Abort_IT+0x1d0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_DMA_Abort_IT+0x1d4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_DMA_Abort_IT+0x1d8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x17c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d108      	bne.n	8001ca2 <HAL_DMA_Abort_IT+0x18e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e178      	b.n	8001f94 <HAL_DMA_Abort_IT+0x480>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e16f      	b.n	8001f94 <HAL_DMA_Abort_IT+0x480>
 8001cb4:	40020010 	.word	0x40020010
 8001cb8:	40020028 	.word	0x40020028
 8001cbc:	40020040 	.word	0x40020040
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	40020070 	.word	0x40020070
 8001cc8:	40020088 	.word	0x40020088
 8001ccc:	400200a0 	.word	0x400200a0
 8001cd0:	400200b8 	.word	0x400200b8
 8001cd4:	40020410 	.word	0x40020410
 8001cd8:	40020428 	.word	0x40020428
 8001cdc:	40020440 	.word	0x40020440
 8001ce0:	40020458 	.word	0x40020458
 8001ce4:	40020470 	.word	0x40020470
 8001ce8:	40020488 	.word	0x40020488
 8001cec:	400204a0 	.word	0x400204a0
 8001cf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020e 	bic.w	r2, r2, #14
 8001d02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6c      	ldr	r2, [pc, #432]	; (8001ebc <HAL_DMA_Abort_IT+0x3a8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6b      	ldr	r2, [pc, #428]	; (8001ec0 <HAL_DMA_Abort_IT+0x3ac>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d045      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_DMA_Abort_IT+0x3b0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d040      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <HAL_DMA_Abort_IT+0x3b4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d03b      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_DMA_Abort_IT+0x3b8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d036      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_DMA_Abort_IT+0x3bc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d031      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <HAL_DMA_Abort_IT+0x3c0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02c      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a62      	ldr	r2, [pc, #392]	; (8001ed8 <HAL_DMA_Abort_IT+0x3c4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d027      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a60      	ldr	r2, [pc, #384]	; (8001edc <HAL_DMA_Abort_IT+0x3c8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_DMA_Abort_IT+0x3cc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d01d      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_DMA_Abort_IT+0x3d0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a5c      	ldr	r2, [pc, #368]	; (8001ee8 <HAL_DMA_Abort_IT+0x3d4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a5a      	ldr	r2, [pc, #360]	; (8001eec <HAL_DMA_Abort_IT+0x3d8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <HAL_DMA_Abort_IT+0x3dc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_DMA_Abort_IT+0x3e0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x290>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_DMA_Abort_IT+0x3e4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <HAL_DMA_Abort_IT+0x2a2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_DMA_Abort_IT+0x2b2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3c      	ldr	r2, [pc, #240]	; (8001ebc <HAL_DMA_Abort_IT+0x3a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d072      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a3a      	ldr	r2, [pc, #232]	; (8001ec0 <HAL_DMA_Abort_IT+0x3ac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d06d      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a39      	ldr	r2, [pc, #228]	; (8001ec4 <HAL_DMA_Abort_IT+0x3b0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d068      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a37      	ldr	r2, [pc, #220]	; (8001ec8 <HAL_DMA_Abort_IT+0x3b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d063      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_DMA_Abort_IT+0x3b8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a34      	ldr	r2, [pc, #208]	; (8001ed0 <HAL_DMA_Abort_IT+0x3bc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d059      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <HAL_DMA_Abort_IT+0x3c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d054      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a31      	ldr	r2, [pc, #196]	; (8001ed8 <HAL_DMA_Abort_IT+0x3c4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d04f      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a30      	ldr	r2, [pc, #192]	; (8001edc <HAL_DMA_Abort_IT+0x3c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04a      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2e      	ldr	r2, [pc, #184]	; (8001ee0 <HAL_DMA_Abort_IT+0x3cc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d045      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <HAL_DMA_Abort_IT+0x3d0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d040      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_DMA_Abort_IT+0x3d4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d03b      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_DMA_Abort_IT+0x3d8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d036      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <HAL_DMA_Abort_IT+0x3dc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d031      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_DMA_Abort_IT+0x3e0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d02c      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_DMA_Abort_IT+0x3e4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d027      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a24      	ldr	r2, [pc, #144]	; (8001efc <HAL_DMA_Abort_IT+0x3e8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d022      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_DMA_Abort_IT+0x3ec>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01d      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_DMA_Abort_IT+0x3f0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_DMA_Abort_IT+0x3f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_DMA_Abort_IT+0x3f8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_DMA_Abort_IT+0x3fc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_DMA_Abort_IT+0x400>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x3a2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_DMA_Abort_IT+0x404>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d132      	bne.n	8001f1c <HAL_DMA_Abort_IT+0x408>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e031      	b.n	8001f1e <HAL_DMA_Abort_IT+0x40a>
 8001eba:	bf00      	nop
 8001ebc:	40020010 	.word	0x40020010
 8001ec0:	40020028 	.word	0x40020028
 8001ec4:	40020040 	.word	0x40020040
 8001ec8:	40020058 	.word	0x40020058
 8001ecc:	40020070 	.word	0x40020070
 8001ed0:	40020088 	.word	0x40020088
 8001ed4:	400200a0 	.word	0x400200a0
 8001ed8:	400200b8 	.word	0x400200b8
 8001edc:	40020410 	.word	0x40020410
 8001ee0:	40020428 	.word	0x40020428
 8001ee4:	40020440 	.word	0x40020440
 8001ee8:	40020458 	.word	0x40020458
 8001eec:	40020470 	.word	0x40020470
 8001ef0:	40020488 	.word	0x40020488
 8001ef4:	400204a0 	.word	0x400204a0
 8001ef8:	400204b8 	.word	0x400204b8
 8001efc:	58025408 	.word	0x58025408
 8001f00:	5802541c 	.word	0x5802541c
 8001f04:	58025430 	.word	0x58025430
 8001f08:	58025444 	.word	0x58025444
 8001f0c:	58025458 	.word	0x58025458
 8001f10:	5802546c 	.word	0x5802546c
 8001f14:	58025480 	.word	0x58025480
 8001f18:	58025494 	.word	0x58025494
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d028      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop

08001fa0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0cf      	b.n	8002152 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2223      	movs	r2, #35	; 0x23
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7fe fe47 	bl	8000c58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_ETH_Init+0x1bc>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <HAL_ETH_Init+0x1bc>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_ETH_Init+0x1bc>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7a1b      	ldrb	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff f94d 	bl	8001290 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ff6:	e003      	b.n	8002000 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ff8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ffc:	f7ff f948 	bl	8001290 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_ETH_Init+0x1c0>)
 8002002:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff f908 	bl	8001230 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002022:	e011      	b.n	8002048 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002024:	f7ff f904 	bl	8001230 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002032:	d909      	bls.n	8002048 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	22e0      	movs	r2, #224	; 0xe0
 8002040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e084      	b.n	8002152 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e4      	bne.n	8002024 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f886 	bl	800216c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002060:	f001 fcc8 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8002064:	4603      	mov	r3, r0
 8002066:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_ETH_Init+0x1c4>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3a01      	subs	r2, #1
 8002074:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa71 	bl	8002560 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800208a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800209a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	22e0      	movs	r2, #224	; 0xe0
 80020b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e049      	b.n	8002152 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_ETH_Init+0x1c8>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6952      	ldr	r2, [r2, #20]
 80020d2:	0051      	lsls	r1, r2, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fad9 	bl	800269a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb1f 	bl	800272c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	3305      	adds	r3, #5
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	3303      	adds	r3, #3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	061a      	lsls	r2, r3, #24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	3302      	adds	r3, #2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800212c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800213a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800213c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2210      	movs	r2, #16
 800214c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	58024400 	.word	0x58024400
 8002160:	58000400 	.word	0x58000400
 8002164:	431bde83 	.word	0x431bde83
 8002168:	ffff8001 	.word	0xffff8001

0800216c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800217c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002184:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002186:	f001 fc35 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 800218a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d908      	bls.n	80021a6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d804      	bhi.n	80021a6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e027      	b.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d908      	bls.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x54>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d204      	bcs.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e01a      	b.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d303      	bcc.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x64>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d911      	bls.n	80021f4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d908      	bls.n	80021ea <HAL_ETH_SetMDIOClockRange+0x7e>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_ETH_SetMDIOClockRange+0xac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d804      	bhi.n	80021ea <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e005      	b.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e000      	b.n	80021f6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021f4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	01312cff 	.word	0x01312cff
 800220c:	02160ebf 	.word	0x02160ebf
 8002210:	03938700 	.word	0x03938700
 8002214:	05f5e0ff 	.word	0x05f5e0ff
 8002218:	08f0d17f 	.word	0x08f0d17f

0800221c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800222e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7b1b      	ldrb	r3, [r3, #12]
 800223c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800223e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	7b5b      	ldrb	r3, [r3, #13]
 8002244:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b9b      	ldrb	r3, [r3, #14]
 800224c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800224e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	7bdb      	ldrb	r3, [r3, #15]
 8002254:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002256:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	7c12      	ldrb	r2, [r2, #16]
 800225c:	2a00      	cmp	r2, #0
 800225e:	d102      	bne.n	8002266 <ETH_SetMACConfig+0x4a>
 8002260:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002264:	e000      	b.n	8002268 <ETH_SetMACConfig+0x4c>
 8002266:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002268:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	7c52      	ldrb	r2, [r2, #17]
 800226e:	2a00      	cmp	r2, #0
 8002270:	d102      	bne.n	8002278 <ETH_SetMACConfig+0x5c>
 8002272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002276:	e000      	b.n	800227a <ETH_SetMACConfig+0x5e>
 8002278:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800227a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	7c9b      	ldrb	r3, [r3, #18]
 8002280:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002282:	431a      	orrs	r2, r3
               macconf->Speed |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002288:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800228e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	7f1b      	ldrb	r3, [r3, #28]
 8002294:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002296:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	7f5b      	ldrb	r3, [r3, #29]
 800229c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800229e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	7f92      	ldrb	r2, [r2, #30]
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d102      	bne.n	80022ae <ETH_SetMACConfig+0x92>
 80022a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ac:	e000      	b.n	80022b0 <ETH_SetMACConfig+0x94>
 80022ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7fdb      	ldrb	r3, [r3, #31]
 80022b6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d102      	bne.n	80022ca <ETH_SetMACConfig+0xae>
 80022c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0xb0>
 80022ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022cc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022da:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022dc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <ETH_SetMACConfig+0x22c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002306:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002308:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002310:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800231a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800231c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002324:	2a00      	cmp	r2, #0
 8002326:	d102      	bne.n	800232e <ETH_SetMACConfig+0x112>
 8002328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800232c:	e000      	b.n	8002330 <ETH_SetMACConfig+0x114>
 800232e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002330:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <ETH_SetMACConfig+0x230>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	430b      	orrs	r3, r1
 800234c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002354:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <ETH_SetMACConfig+0x234>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	430b      	orrs	r3, r1
 8002370:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002378:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800237e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002386:	2a00      	cmp	r2, #0
 8002388:	d101      	bne.n	800238e <ETH_SetMACConfig+0x172>
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	e000      	b.n	8002390 <ETH_SetMACConfig+0x174>
 800238e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002390:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023b8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023c0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f023 0103 	bic.w	r1, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	430a      	orrs	r2, r1
 80023da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023e6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002402:	2a00      	cmp	r2, #0
 8002404:	d101      	bne.n	800240a <ETH_SetMACConfig+0x1ee>
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x1f0>
 800240a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800240c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002414:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800241e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800242c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	430a      	orrs	r2, r1
 8002438:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	00048083 	.word	0x00048083
 800244c:	c0f88000 	.word	0xc0f88000
 8002450:	fffffef0 	.word	0xfffffef0

08002454 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <ETH_SetDMAConfig+0xf8>)
 800246a:	4013      	ands	r3, r2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	430b      	orrs	r3, r1
 8002476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002486:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	7b1b      	ldrb	r3, [r3, #12]
 800248c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <ETH_SetDMAConfig+0xfc>)
 800249e:	4013      	ands	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	430b      	orrs	r3, r1
 80024a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ac:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7b5b      	ldrb	r3, [r3, #13]
 80024b2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <ETH_SetDMAConfig+0x100>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	7d1b      	ldrb	r3, [r3, #20]
 80024e4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7f5b      	ldrb	r3, [r3, #29]
 80024ec:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <ETH_SetDMAConfig+0x104>)
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	430b      	orrs	r3, r1
 800250a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7f1b      	ldrb	r3, [r3, #28]
 8002516:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800251c:	4313      	orrs	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <ETH_SetDMAConfig+0x108>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	430b      	orrs	r3, r1
 8002538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800253c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	ffff87fd 	.word	0xffff87fd
 8002550:	ffff2ffe 	.word	0xffff2ffe
 8002554:	fffec000 	.word	0xfffec000
 8002558:	ffc0efef 	.word	0xffc0efef
 800255c:	7fc0ffff 	.word	0x7fc0ffff

08002560 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0a4      	sub	sp, #144	; 0x90
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800256e:	2300      	movs	r3, #0
 8002570:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800259c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025b8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025bc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025da:	2300      	movs	r3, #0
 80025dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025de:	2300      	movs	r3, #0
 80025e0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025e2:	2300      	movs	r3, #0
 80025e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025f8:	2320      	movs	r3, #32
 80025fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800260a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002610:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800263a:	2300      	movs	r3, #0
 800263c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fde6 	bl	800221c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002650:	2301      	movs	r3, #1
 8002652:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800266a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800266e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002674:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002678:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002680:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fee1 	bl	8002454 <ETH_SetDMAConfig>
}
 8002692:	bf00      	nop
 8002694:	3790      	adds	r7, #144	; 0x90
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e01d      	b.n	80026e4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	3206      	adds	r2, #6
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d9de      	bls.n	80026a8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f8:	461a      	mov	r2, r3
 80026fa:	2303      	movs	r3, #3
 80026fc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e023      	b.n	8002782 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	3212      	adds	r2, #18
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d9d8      	bls.n	800273a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	461a      	mov	r2, r3
 80027b0:	2303      	movs	r3, #3
 80027b2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027f6:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <HAL_GPIO_Init+0x228>)
 80027f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027fa:	e18c      	b.n	8002b16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 817e 	beq.w	8002b10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x44>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d017      	beq.n	80028ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d123      	bne.n	800291e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80d8 	beq.w	8002b10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_GPIO_Init+0x22c>)
 8002962:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_GPIO_Init+0x22c>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_GPIO_Init+0x22c>)
 8002972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297e:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x230>)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_GPIO_Init+0x234>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d04a      	beq.n	8002a40 <HAL_GPIO_Init+0x258>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_GPIO_Init+0x238>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_GPIO_Init+0x23c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_GPIO_Init+0x240>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x244>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x216>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x248>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_GPIO_Init+0x24c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x20e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_GPIO_Init+0x250>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x20a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_GPIO_Init+0x254>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x206>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e029      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e027      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e025      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e023      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e021      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e01f      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e01d      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e01b      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e019      	b.n	8002a42 <HAL_GPIO_Init+0x25a>
 8002a0e:	bf00      	nop
 8002a10:	58000080 	.word	0x58000080
 8002a14:	58024400 	.word	0x58024400
 8002a18:	58000400 	.word	0x58000400
 8002a1c:	58020000 	.word	0x58020000
 8002a20:	58020400 	.word	0x58020400
 8002a24:	58020800 	.word	0x58020800
 8002a28:	58020c00 	.word	0x58020c00
 8002a2c:	58021000 	.word	0x58021000
 8002a30:	58021400 	.word	0x58021400
 8002a34:	58021800 	.word	0x58021800
 8002a38:	58021c00 	.word	0x58021c00
 8002a3c:	58022400 	.word	0x58022400
 8002a40:	2300      	movs	r3, #0
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	f002 0203 	and.w	r2, r2, #3
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4093      	lsls	r3, r2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a52:	4938      	ldr	r1, [pc, #224]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f ae6b 	bne.w	80027fc <HAL_GPIO_Init+0x14>
  }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	3724      	adds	r7, #36	; 0x24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	58000400 	.word	0x58000400

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b54:	e003      	b.n	8002b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_PWREx_ConfigSupply+0x70>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00a      	beq.n	8002b96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_PWREx_ConfigSupply+0x70>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01f      	b.n	8002bd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e01d      	b.n	8002bd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b96:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_PWREx_ConfigSupply+0x70>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	490f      	ldr	r1, [pc, #60]	; (8002bdc <HAL_PWREx_ConfigSupply+0x70>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ba6:	f7fe fb43 	bl	8001230 <HAL_GetTick>
 8002baa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bac:	e009      	b.n	8002bc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bae:	f7fe fb3f 	bl	8001230 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbc:	d901      	bls.n	8002bc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e007      	b.n	8002bd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_PWREx_ConfigSupply+0x70>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bce:	d1ee      	bne.n	8002bae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	58024800 	.word	0x58024800

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e3c8      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0a:	4b86      	ldr	r3, [pc, #536]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46>
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d110      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x12c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d168      	bne.n	8002d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e3a2      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x76>
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a70      	ldr	r2, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xbc>
 8002c82:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a67      	ldr	r2, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a64      	ldr	r2, [pc, #400]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fab8 	bl	8001230 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fab4 	bl	8001230 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e356      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd6:	4b53      	ldr	r3, [pc, #332]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe4>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe faa4 	bl	8001230 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe faa0 	bl	8001230 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e342      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x10c>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 808c 	beq.w	8002e34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1c:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_RCC_OscConfig+0x162>
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2b18      	cmp	r3, #24
 8002d36:	d137      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c8>
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d132      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x17a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e314      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d5a:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0219 	bic.w	r2, r3, #25
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	492f      	ldr	r1, [pc, #188]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fa60 	bl	8001230 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fa5c 	bl	8001230 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e2fe      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	4920      	ldr	r1, [pc, #128]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da6:	e045      	b.n	8002e34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d026      	beq.n	8002dfe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 0219 	bic.w	r2, r3, #25
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4919      	ldr	r1, [pc, #100]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fa35 	bl	8001230 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7fe fa31 	bl	8001230 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e2d3      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	490b      	ldr	r1, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	e01a      	b.n	8002e34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x244>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fa11 	bl	8001230 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fe fa0d 	bl	8001230 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d903      	bls.n	8002e28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e2af      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
 8002e24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e28:	4b96      	ldr	r3, [pc, #600]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d06a      	beq.n	8002f16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e40:	4b90      	ldr	r3, [pc, #576]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d007      	beq.n	8002e66 <HAL_RCC_OscConfig+0x286>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b18      	cmp	r3, #24
 8002e5a:	d11b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2b4>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e66:	4b87      	ldr	r3, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x29e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e282      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	497d      	ldr	r1, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e92:	e040      	b.n	8002f16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e9c:	4b79      	ldr	r3, [pc, #484]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a78      	ldr	r2, [pc, #480]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f9c2 	bl	8001230 <HAL_GetTick>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eb0:	f7fe f9be 	bl	8001230 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e260      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4969      	ldr	r1, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ee4:	4b67      	ldr	r3, [pc, #412]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a66      	ldr	r2, [pc, #408]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f99e 	bl	8001230 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f99a 	bl	8001230 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e23c      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d036      	beq.n	8002f90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	4a55      	ldr	r2, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe f97b 	bl	8001230 <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f977 	bl	8001230 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e219      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x35e>
 8002f5c:	e018      	b.n	8002f90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	4a48      	ldr	r2, [pc, #288]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f961 	bl	8001230 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe f95d 	bl	8001230 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1ff      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d036      	beq.n	800300a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d019      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a36      	ldr	r2, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fb0:	f7fe f93e 	bl	8001230 <HAL_GetTick>
 8002fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb8:	f7fe f93a 	bl	8001230 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1dc      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3d8>
 8002fd6:	e018      	b.n	800300a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8002fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f924 	bl	8001230 <HAL_GetTick>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fec:	f7fe f920 	bl	8001230 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1c2      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8086 	beq.w	8003124 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x4a8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_RCC_OscConfig+0x4a8>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003024:	f7fe f904 	bl	8001230 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe f900 	bl	8001230 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1a2      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_RCC_OscConfig+0x4a8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x480>
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e032      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4ac>
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a05      	ldr	r2, [pc, #20]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a02      	ldr	r2, [pc, #8]	; (8003084 <HAL_RCC_OscConfig+0x4a4>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e021      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e6>
 8003082:	bf00      	nop
 8003084:	58024400 	.word	0x58024400
 8003088:	58024800 	.word	0x58024800
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x4ce>
 8003094:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a82      	ldr	r2, [pc, #520]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4a7f      	ldr	r2, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	; 0x70
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e6>
 80030ae:	4b7d      	ldr	r3, [pc, #500]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a7c      	ldr	r2, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a79      	ldr	r2, [pc, #484]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe f8af 	bl	8001230 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe f8ab 	bl	8001230 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e14b      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ec:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
 80030f8:	e014      	b.n	8003124 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe f899 	bl	8001230 <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe f895 	bl	8001230 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e135      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003118:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 812a 	beq.w	8003382 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003136:	2b18      	cmp	r3, #24
 8003138:	f000 80ba 	beq.w	80032b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b02      	cmp	r3, #2
 8003142:	f040 8095 	bne.w	8003270 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800314c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe f86d 	bl	8001230 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe f869 	bl	8001230 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e10b      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800316c:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800317a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317c:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCC_OscConfig+0x6c8>)
 800317e:	4013      	ands	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	430a      	orrs	r2, r1
 800318c:	4945      	ldr	r1, [pc, #276]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	628b      	str	r3, [r1, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	3b01      	subs	r3, #1
 8003198:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	3b01      	subs	r3, #1
 80031a2:	025b      	lsls	r3, r3, #9
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	3b01      	subs	r3, #1
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031c2:	4938      	ldr	r1, [pc, #224]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4a35      	ldr	r2, [pc, #212]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x6cc>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031e0:	00d2      	lsls	r2, r2, #3
 80031e2:	4930      	ldr	r1, [pc, #192]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031e8:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f023 020c 	bic.w	r2, r3, #12
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	492b      	ldr	r1, [pc, #172]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	f023 0202 	bic.w	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4927      	ldr	r1, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800321e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800322a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd fff2 	bl	8001230 <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd ffee 	bl	8001230 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e090      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x670>
 800326e:	e088      	b.n	8003382 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fd ffd8 	bl	8001230 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fd ffd4 	bl	8001230 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e076      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003296:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_OscConfig+0x6c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a4>
 80032a2:	e06e      	b.n	8003382 <HAL_RCC_OscConfig+0x7a2>
 80032a4:	58024400 	.word	0x58024400
 80032a8:	fffffc0c 	.word	0xfffffc0c
 80032ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032b6:	4b35      	ldr	r3, [pc, #212]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d031      	beq.n	8003328 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d12a      	bne.n	8003328 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d122      	bne.n	8003328 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0a5b      	lsrs	r3, r3, #9
 80032f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d111      	bne.n	8003328 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	0e1b      	lsrs	r3, r3, #24
 800331a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e02b      	b.n	8003384 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003336:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d01f      	beq.n	8003382 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	4a11      	ldr	r2, [pc, #68]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334e:	f7fd ff6f 	bl	8001230 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003354:	bf00      	nop
 8003356:	f7fd ff6b 	bl	8001230 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	4293      	cmp	r3, r2
 8003360:	d0f9      	beq.n	8003356 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 8003364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_OscConfig+0x7b0>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800336e:	00d2      	lsls	r2, r2, #3
 8003370:	4906      	ldr	r1, [pc, #24]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 8003372:	4313      	orrs	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_RCC_OscConfig+0x7ac>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	ffff0007 	.word	0xffff0007

08003394 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e19c      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b8a      	ldr	r3, [pc, #552]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b87      	ldr	r3, [pc, #540]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 020f 	bic.w	r2, r3, #15
 80033be:	4985      	ldr	r1, [pc, #532]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b83      	ldr	r3, [pc, #524]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e184      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d010      	beq.n	8003406 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	4b7b      	ldr	r3, [pc, #492]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d908      	bls.n	8003406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f4:	4b78      	ldr	r3, [pc, #480]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4975      	ldr	r1, [pc, #468]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003402:	4313      	orrs	r3, r2
 8003404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800341e:	429a      	cmp	r2, r3
 8003420:	d908      	bls.n	8003434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	496a      	ldr	r1, [pc, #424]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003430:	4313      	orrs	r3, r2
 8003432:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800344c:	429a      	cmp	r2, r3
 800344e:	d908      	bls.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	495e      	ldr	r1, [pc, #376]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 800345e:	4313      	orrs	r3, r2
 8003460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800347a:	429a      	cmp	r2, r3
 800347c:	d908      	bls.n	8003490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4953      	ldr	r1, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 800348c:	4313      	orrs	r3, r2
 800348e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d908      	bls.n	80034be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 020f 	bic.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4947      	ldr	r1, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d055      	beq.n	8003576 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4940      	ldr	r1, [pc, #256]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e4:	4b3c      	ldr	r3, [pc, #240]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d121      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0f6      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d115      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0ea      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0de      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0d6      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003542:	4313      	orrs	r3, r2
 8003544:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003546:	f7fd fe73 	bl	8001230 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fd fe6f 	bl	8001230 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0be      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	429a      	cmp	r2, r3
 8003574:	d1eb      	bne.n	800354e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	429a      	cmp	r2, r3
 8003590:	d208      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d214      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	4906      	ldr	r1, [pc, #24]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_RCC_ClockConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d005      	beq.n	80035dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e086      	b.n	80036e2 <HAL_RCC_ClockConfig+0x34e>
 80035d4:	52002000 	.word	0x52002000
 80035d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d208      	bcs.n	800360a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f8:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	4939      	ldr	r1, [pc, #228]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003606:	4313      	orrs	r3, r2
 8003608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003622:	429a      	cmp	r2, r3
 8003624:	d208      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	492e      	ldr	r1, [pc, #184]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003634:	4313      	orrs	r3, r2
 8003636:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003650:	429a      	cmp	r2, r3
 8003652:	d208      	bcs.n	8003666 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	4922      	ldr	r1, [pc, #136]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003662:	4313      	orrs	r3, r2
 8003664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800367e:	429a      	cmp	r2, r3
 8003680:	d208      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003682:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4917      	ldr	r1, [pc, #92]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 8003690:	4313      	orrs	r3, r2
 8003692:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003694:	f000 f834 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	4912      	ldr	r1, [pc, #72]	; (80036f0 <HAL_RCC_ClockConfig+0x35c>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x358>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <HAL_RCC_ClockConfig+0x35c>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x360>)
 80036ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036cc:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_RCC_ClockConfig+0x364>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x368>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fd60 	bl	800119c <HAL_InitTick>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
 80036f0:	08008574 	.word	0x08008574
 80036f4:	24000004 	.word	0x24000004
 80036f8:	24000000 	.word	0x24000000
 80036fc:	24000008 	.word	0x24000008

08003700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003706:	4bb3      	ldr	r3, [pc, #716]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800370e:	2b18      	cmp	r3, #24
 8003710:	f200 8155 	bhi.w	80039be <HAL_RCC_GetSysClockFreq+0x2be>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003781 	.word	0x08003781
 8003720:	080039bf 	.word	0x080039bf
 8003724:	080039bf 	.word	0x080039bf
 8003728:	080039bf 	.word	0x080039bf
 800372c:	080039bf 	.word	0x080039bf
 8003730:	080039bf 	.word	0x080039bf
 8003734:	080039bf 	.word	0x080039bf
 8003738:	080039bf 	.word	0x080039bf
 800373c:	080037a7 	.word	0x080037a7
 8003740:	080039bf 	.word	0x080039bf
 8003744:	080039bf 	.word	0x080039bf
 8003748:	080039bf 	.word	0x080039bf
 800374c:	080039bf 	.word	0x080039bf
 8003750:	080039bf 	.word	0x080039bf
 8003754:	080039bf 	.word	0x080039bf
 8003758:	080039bf 	.word	0x080039bf
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080039bf 	.word	0x080039bf
 8003764:	080039bf 	.word	0x080039bf
 8003768:	080039bf 	.word	0x080039bf
 800376c:	080039bf 	.word	0x080039bf
 8003770:	080039bf 	.word	0x080039bf
 8003774:	080039bf 	.word	0x080039bf
 8003778:	080039bf 	.word	0x080039bf
 800377c:	080037b3 	.word	0x080037b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003780:	4b94      	ldr	r3, [pc, #592]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800378c:	4b91      	ldr	r3, [pc, #580]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	4a90      	ldr	r2, [pc, #576]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800379e:	e111      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037a0:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037a2:	61bb      	str	r3, [r7, #24]
      break;
 80037a4:	e10e      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037a6:	4b8d      	ldr	r3, [pc, #564]	; (80039dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a8:	61bb      	str	r3, [r7, #24]
      break;
 80037aa:	e10b      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037ac:	4b8c      	ldr	r3, [pc, #560]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037ae:	61bb      	str	r3, [r7, #24]
      break;
 80037b0:	e108      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037bc:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037c8:	4b82      	ldr	r3, [pc, #520]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037d2:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80e1 	beq.w	80039b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f000 8083 	beq.w	8003904 <HAL_RCC_GetSysClockFreq+0x204>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b02      	cmp	r3, #2
 8003802:	f200 80a1 	bhi.w	8003948 <HAL_RCC_GetSysClockFreq+0x248>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x114>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d056      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003812:	e099      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003814:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02d      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003820:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	4a6b      	ldr	r2, [pc, #428]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385a:	ed97 6a02 	vldr	s12, [r7, #8]
 800385e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800386e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003876:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800387a:	e087      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800388a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388e:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389e:	ed97 6a02 	vldr	s12, [r7, #8]
 80038a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038be:	e065      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d2:	4b40      	ldr	r3, [pc, #256]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003902:	e043      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003926:	ed97 6a02 	vldr	s12, [r7, #8]
 800392a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800392e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003946:	e021      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003952:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396a:	ed97 6a02 	vldr	s12, [r7, #8]
 800396e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800397e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800398a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	0a5b      	lsrs	r3, r3, #9
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003996:	3301      	adds	r3, #1
 8003998:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b0:	ee17 3a90 	vmov	r3, s15
 80039b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039b6:	e005      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
      break;
 80039bc:	e002      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039c0:	61bb      	str	r3, [r7, #24]
      break;
 80039c2:	bf00      	nop
  }

  return sysclockfreq;
 80039c4:	69bb      	ldr	r3, [r7, #24]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	03d09000 	.word	0x03d09000
 80039dc:	003d0900 	.word	0x003d0900
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	46000000 	.word	0x46000000
 80039e8:	4c742400 	.word	0x4c742400
 80039ec:	4a742400 	.word	0x4a742400
 80039f0:	4af42400 	.word	0x4af42400

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039fa:	f7ff fe81 	bl	8003700 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490f      	ldr	r1, [pc, #60]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024400 	.word	0x58024400
 8003a48:	08008574 	.word	0x08008574
 8003a4c:	24000004 	.word	0x24000004
 8003a50:	24000000 	.word	0x24000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a58:	f7ff ffcc 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	08008574 	.word	0x08008574

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a84:	f7ff ffb6 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	08008574 	.word	0x08008574

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b0c6      	sub	sp, #280	; 0x118
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ad6:	d049      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ade:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae2:	d02f      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ae4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ae8:	d828      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aee:	d01a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af4:	d822      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b00:	e01c      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4bab      	ldr	r3, [pc, #684]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4aaa      	ldr	r2, [pc, #680]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b0e:	e01a      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b14:	3308      	adds	r3, #8
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fc25 	bl	8005368 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2a:	3328      	adds	r3, #40	; 0x28
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fccc 	bl	80054cc <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b4e:	4b98      	ldr	r3, [pc, #608]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	4a94      	ldr	r2, [pc, #592]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6513      	str	r3, [r2, #80]	; 0x50
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003b78:	f04f 0900 	mov.w	r9, #0
 8003b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003b80:	d047      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d82a      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba9 	.word	0x08003ba9
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003bcd 	.word	0x08003bcd
 8003ba0:	08003beb 	.word	0x08003beb
 8003ba4:	08003beb 	.word	0x08003beb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a80      	ldr	r2, [pc, #512]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb4:	e01a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fbd2 	bl	8005368 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bca:	e00f      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	3328      	adds	r3, #40	; 0x28
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fc79 	bl	80054cc <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf4:	4b6e      	ldr	r3, [pc, #440]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	f023 0107 	bic.w	r1, r3, #7
 8003bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4a6b      	ldr	r2, [pc, #428]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6513      	str	r3, [r2, #80]	; 0x50
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003c1e:	f04f 0b00 	mov.w	fp, #0
 8003c22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c30:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003c34:	d03b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003c36:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003c3a:	d834      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c40:	d037      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c46:	d82e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c4c:	d033      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c52:	d828      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c58:	d01a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5e:	d822      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003c6a:	e01c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a4f      	ldr	r2, [pc, #316]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c78:	e01e      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fb70 	bl	8005368 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e013      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fc17 	bl	80054cc <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd0:	4a37      	ldr	r2, [pc, #220]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cf6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	d05d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d0c:	d03b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d12:	d834      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d18:	d037      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d1e:	d82e      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d24:	d033      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d2a:	d828      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d30:	d01a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d36:	d822      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d40:	d007      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003d42:	e01c      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d50:	e01e      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d56:	3308      	adds	r3, #8
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 fb04 	bl	8005368 <RCCEx_PLL2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d66:	e013      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6c:	3328      	adds	r3, #40	; 0x28
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fbab 	bl	80054cc <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d7c:	e008      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d84:	e004      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003d86:	bf00      	nop
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10d      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da8:	4a01      	ldr	r2, [pc, #4]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003daa:	430b      	orrs	r3, r1
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003db8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003dd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	d03a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d01f      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d819      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d815      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d111      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfa:	4baa      	ldr	r3, [pc, #680]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4aa9      	ldr	r2, [pc, #676]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e06:	e011      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 faa9 	bl	8005368 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e34:	4b9b      	ldr	r3, [pc, #620]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	4a98      	ldr	r2, [pc, #608]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e48:	e003      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d051      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7c:	d035      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e82:	d82e      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e88:	d031      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e8e:	d828      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d01a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d822      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d007      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003ea6:	e01c      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a7d      	ldr	r2, [pc, #500]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eb4:	e01c      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	3308      	adds	r3, #8
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fa52 	bl	8005368 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 faf9 	bl	80054cc <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee0:	e006      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f06:	4a67      	ldr	r2, [pc, #412]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d053      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d033      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f46:	d82c      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f4c:	d02f      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f52:	d826      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f58:	d02b      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f5e:	d820      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f64:	d012      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6a:	d81a      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d022      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d115      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f9f2 	bl	8005368 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f90:	3328      	adds	r3, #40	; 0x28
 8003f92:	2101      	movs	r1, #1
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fa99 	bl	80054cc <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fc0:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ff4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d058      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400a:	d033      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d82c      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d02f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d826      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800401e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004028:	d820      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d012      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d81a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d022      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d115      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004044:	3308      	adds	r3, #8
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f98d 	bl	8005368 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004054:	e015      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405a:	3328      	adds	r3, #40	; 0x28
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fa34 	bl	80054cc <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6593      	str	r3, [r2, #88]	; 0x58
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	d037      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040da:	d00e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e0:	d816      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80040e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ea:	d111      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ec:	4bc4      	ldr	r3, [pc, #784]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	4ac3      	ldr	r2, [pc, #780]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fe:	3308      	adds	r3, #8
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f930 	bl	8005368 <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004122:	4bb7      	ldr	r3, [pc, #732]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004130:	4ab3      	ldr	r2, [pc, #716]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004132:	430b      	orrs	r3, r1
 8004134:	6513      	str	r3, [r2, #80]	; 0x50
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800414c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004156:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d039      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004166:	2b03      	cmp	r3, #3
 8004168:	d81c      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041ad 	.word	0x080041ad
 8004174:	08004181 	.word	0x08004181
 8004178:	0800418f 	.word	0x0800418f
 800417c:	080041ad 	.word	0x080041ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b9f      	ldr	r3, [pc, #636]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a9e      	ldr	r2, [pc, #632]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800418c:	e00f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004192:	3308      	adds	r3, #8
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f8e6 	bl	8005368 <RCCEx_PLL2_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041a2:	e004      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041aa:	e000      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80041ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041b6:	4b92      	ldr	r3, [pc, #584]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	f023 0103 	bic.w	r1, r3, #3
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c4:	4a8e      	ldr	r2, [pc, #568]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c6:	430b      	orrs	r3, r1
 80041c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80041e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f000 8099 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f6:	4b83      	ldr	r3, [pc, #524]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a82      	ldr	r2, [pc, #520]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004202:	f7fd f815 	bl	8001230 <HAL_GetTick>
 8004206:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800420a:	e00b      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fd f810 	bl	8001230 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	; 0x64
 800421a:	d903      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004222:	e005      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004224:	4b77      	ldr	r3, [pc, #476]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ed      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004230:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004234:	2b00      	cmp	r3, #0
 8004236:	d173      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004238:	4b71      	ldr	r3, [pc, #452]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004244:	4053      	eors	r3, r2
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424e:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800425a:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a65      	ldr	r2, [pc, #404]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004272:	4a63      	ldr	r2, [pc, #396]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d118      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fc ffd2 	bl	8001230 <HAL_GetTick>
 800428c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004290:	e00d      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fc ffcd 	bl	8001230 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800429c:	1ad2      	subs	r2, r2, r3
 800429e:	f241 3388 	movw	r3, #5000	; 0x1388
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d903      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80042ac:	e005      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0eb      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80042ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d129      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d2:	d10e      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80042d4:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042e4:	091a      	lsrs	r2, r3, #4
 80042e6:	4b48      	ldr	r3, [pc, #288]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	4a45      	ldr	r2, [pc, #276]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6113      	str	r3, [r2, #16]
 80042f0:	e005      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80042f2:	4b43      	ldr	r3, [pc, #268]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042fc:	6113      	str	r3, [r2, #16]
 80042fe:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004300:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800430a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430e:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004316:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800431a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004324:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f002 0301 	and.w	r3, r2, #1
 8004334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800433e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	f000 808f 	beq.w	8004468 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004350:	2b28      	cmp	r3, #40	; 0x28
 8004352:	d871      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004441 	.word	0x08004441
 8004360:	08004439 	.word	0x08004439
 8004364:	08004439 	.word	0x08004439
 8004368:	08004439 	.word	0x08004439
 800436c:	08004439 	.word	0x08004439
 8004370:	08004439 	.word	0x08004439
 8004374:	08004439 	.word	0x08004439
 8004378:	08004439 	.word	0x08004439
 800437c:	0800440d 	.word	0x0800440d
 8004380:	08004439 	.word	0x08004439
 8004384:	08004439 	.word	0x08004439
 8004388:	08004439 	.word	0x08004439
 800438c:	08004439 	.word	0x08004439
 8004390:	08004439 	.word	0x08004439
 8004394:	08004439 	.word	0x08004439
 8004398:	08004439 	.word	0x08004439
 800439c:	08004423 	.word	0x08004423
 80043a0:	08004439 	.word	0x08004439
 80043a4:	08004439 	.word	0x08004439
 80043a8:	08004439 	.word	0x08004439
 80043ac:	08004439 	.word	0x08004439
 80043b0:	08004439 	.word	0x08004439
 80043b4:	08004439 	.word	0x08004439
 80043b8:	08004439 	.word	0x08004439
 80043bc:	08004441 	.word	0x08004441
 80043c0:	08004439 	.word	0x08004439
 80043c4:	08004439 	.word	0x08004439
 80043c8:	08004439 	.word	0x08004439
 80043cc:	08004439 	.word	0x08004439
 80043d0:	08004439 	.word	0x08004439
 80043d4:	08004439 	.word	0x08004439
 80043d8:	08004439 	.word	0x08004439
 80043dc:	08004441 	.word	0x08004441
 80043e0:	08004439 	.word	0x08004439
 80043e4:	08004439 	.word	0x08004439
 80043e8:	08004439 	.word	0x08004439
 80043ec:	08004439 	.word	0x08004439
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004439 	.word	0x08004439
 80043f8:	08004439 	.word	0x08004439
 80043fc:	08004441 	.word	0x08004441
 8004400:	58024400 	.word	0x58024400
 8004404:	58024800 	.word	0x58024800
 8004408:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004410:	3308      	adds	r3, #8
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 ffa7 	bl	8005368 <RCCEx_PLL2_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004420:	e00f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004426:	3328      	adds	r3, #40	; 0x28
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f84e 	bl	80054cc <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800444a:	4bbf      	ldr	r3, [pc, #764]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004458:	4abb      	ldr	r2, [pc, #748]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6553      	str	r3, [r2, #84]	; 0x54
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004464:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f002 0302 	and.w	r3, r2, #2
 8004474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800447e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d041      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	2b05      	cmp	r3, #5
 8004490:	d824      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044e5 	.word	0x080044e5
 800449c:	080044b1 	.word	0x080044b1
 80044a0:	080044c7 	.word	0x080044c7
 80044a4:	080044e5 	.word	0x080044e5
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044e5 	.word	0x080044e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b4:	3308      	adds	r3, #8
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 ff55 	bl	8005368 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ca:	3328      	adds	r3, #40	; 0x28
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fffc 	bl	80054cc <RCCEx_PLL3_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044ee:	4b96      	ldr	r3, [pc, #600]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f023 0107 	bic.w	r1, r3, #7
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fc:	4a92      	ldr	r2, [pc, #584]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	6553      	str	r3, [r2, #84]	; 0x54
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 0304 	and.w	r3, r2, #4
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004522:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d044      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	2b05      	cmp	r3, #5
 8004536:	d825      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	0800458d 	.word	0x0800458d
 8004544:	08004559 	.word	0x08004559
 8004548:	0800456f 	.word	0x0800456f
 800454c:	0800458d 	.word	0x0800458d
 8004550:	0800458d 	.word	0x0800458d
 8004554:	0800458d 	.word	0x0800458d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	3308      	adds	r3, #8
 800455e:	2101      	movs	r1, #1
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ff01 	bl	8005368 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800456c:	e00f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004572:	3328      	adds	r3, #40	; 0x28
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f000 ffa8 	bl	80054cc <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800458c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004596:	4b6c      	ldr	r3, [pc, #432]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f023 0107 	bic.w	r1, r3, #7
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	4a68      	ldr	r2, [pc, #416]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6593      	str	r3, [r2, #88]	; 0x58
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f002 0320 	and.w	r3, r2, #32
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d055      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045e2:	d033      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80045e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045e8:	d82c      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d02f      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d826      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80045f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045fa:	d02b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80045fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004600:	d820      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004606:	d012      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800460c:	d81a      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d022      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d115      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800461c:	3308      	adds	r3, #8
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fea1 	bl	8005368 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800462e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004632:	3328      	adds	r3, #40	; 0x28
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ff48 	bl	80054cc <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004642:	e00a      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800464a:	e006      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800464c:	bf00      	nop
 800464e:	e004      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004672:	4a35      	ldr	r2, [pc, #212]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6553      	str	r3, [r2, #84]	; 0x54
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800467e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800468e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004692:	2300      	movs	r3, #0
 8004694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004698:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800469c:	460b      	mov	r3, r1
 800469e:	4313      	orrs	r3, r2
 80046a0:	d058      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046ae:	d033      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80046b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046b4:	d82c      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	d02f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d826      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c6:	d02b      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80046c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046cc:	d820      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d2:	d012      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80046d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d8:	d81a      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d022      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d115      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e8:	3308      	adds	r3, #8
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe3b 	bl	8005368 <RCCEx_PLL2_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046f8:	e015      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fe:	3328      	adds	r3, #40	; 0x28
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fee2 	bl	80054cc <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800470e:	e00a      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004716:	e006      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004718:	bf00      	nop
 800471a:	e004      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800473a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800473e:	4a02      	ldr	r2, [pc, #8]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004740:	430b      	orrs	r3, r1
 8004742:	6593      	str	r3, [r2, #88]	; 0x58
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004750:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800476a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d055      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004780:	d033      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004782:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004786:	d82c      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478c:	d02f      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004792:	d826      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004794:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004798:	d02b      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800479a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800479e:	d820      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d012      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80047a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047aa:	d81a      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d022      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80047b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b4:	d115      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ba:	3308      	adds	r3, #8
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fdd2 	bl	8005368 <RCCEx_PLL2_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047ca:	e015      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d0:	3328      	adds	r3, #40	; 0x28
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fe79 	bl	80054cc <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047e0:	e00a      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80047ea:	bf00      	nop
 80047ec:	e004      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80047f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004800:	4ba0      	ldr	r3, [pc, #640]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004810:	4a9c      	ldr	r2, [pc, #624]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004812:	430b      	orrs	r3, r1
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800481c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f002 0308 	and.w	r3, r2, #8
 800482c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004836:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d01e      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	3328      	adds	r3, #40	; 0x28
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fe38 	bl	80054cc <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004868:	4b86      	ldr	r3, [pc, #536]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004878:	4a82      	ldr	r2, [pc, #520]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800487a:	430b      	orrs	r3, r1
 800487c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f002 0310 	and.w	r3, r2, #16
 800488a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004894:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004898:	460b      	mov	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	d01e      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800489e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048aa:	d10c      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b0:	3328      	adds	r3, #40	; 0x28
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fe09 	bl	80054cc <RCCEx_PLL3_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048c6:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	4a6b      	ldr	r2, [pc, #428]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80048d8:	430b      	orrs	r3, r1
 80048da:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80048e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ea:	2300      	movs	r3, #0
 80048ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048ee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048f2:	460b      	mov	r3, r1
 80048f4:	4313      	orrs	r3, r2
 80048f6:	d03e      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004904:	d022      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490a:	d81b      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d00b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004916:	e015      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491c:	3308      	adds	r3, #8
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fd21 	bl	8005368 <RCCEx_PLL2_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800492c:	e00f      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004932:	3328      	adds	r3, #40	; 0x28
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fdc8 	bl	80054cc <RCCEx_PLL3_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004942:	e004      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800494c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004956:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800495e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004966:	4a47      	ldr	r2, [pc, #284]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004968:	430b      	orrs	r3, r1
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004972:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004982:	673b      	str	r3, [r7, #112]	; 0x70
 8004984:	2300      	movs	r3, #0
 8004986:	677b      	str	r3, [r7, #116]	; 0x74
 8004988:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800498c:	460b      	mov	r3, r1
 800498e:	4313      	orrs	r3, r2
 8004990:	d03b      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800499e:	d01f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80049a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049a4:	d818      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80049ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80049b2:	e011      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a32      	ldr	r2, [pc, #200]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049c0:	e00f      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c6:	3328      	adds	r3, #40	; 0x28
 80049c8:	2101      	movs	r1, #1
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fd7e 	bl	80054cc <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80049d6:	e004      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80049e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fa:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6553      	str	r3, [r2, #84]	; 0x54
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a18:	2300      	movs	r3, #0
 8004a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d034      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d007      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a44:	e00e      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fc8a 	bl	8005368 <RCCEx_PLL2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a5a:	e003      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7a:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab0:	3328      	adds	r3, #40	; 0x28
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd09 	bl	80054cc <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004adc:	460b      	mov	r3, r1
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	d036      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aec:	d018      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af2:	d811      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af8:	d014      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afe:	d80b      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b08:	d106      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0a:	4bb7      	ldr	r3, [pc, #732]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4ab6      	ldr	r2, [pc, #728]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b16:	e008      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b1e:	e004      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b20:	bf00      	nop
 8004b22:	e002      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b32:	4bad      	ldr	r3, [pc, #692]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b40:	4aa9      	ldr	r2, [pc, #676]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b42:	430b      	orrs	r3, r1
 8004b44:	6553      	str	r3, [r2, #84]	; 0x54
 8004b46:	e003      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b5e:	2300      	movs	r3, #0
 8004b60:	657b      	str	r3, [r7, #84]	; 0x54
 8004b62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004b66:	460b      	mov	r3, r1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b6c:	4b9e      	ldr	r3, [pc, #632]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a9b      	ldr	r2, [pc, #620]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b8e:	2300      	movs	r3, #0
 8004b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b9c:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004baa:	4a8f      	ldr	r2, [pc, #572]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bcc:	4b86      	ldr	r3, [pc, #536]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	4a85      	ldr	r2, [pc, #532]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bd6:	6113      	str	r3, [r2, #16]
 8004bd8:	4b83      	ldr	r3, [pc, #524]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004bda:	6919      	ldr	r1, [r3, #16]
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004be4:	4a80      	ldr	r2, [pc, #512]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c06:	4b78      	ldr	r3, [pc, #480]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	4a74      	ldr	r2, [pc, #464]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c30:	460b      	mov	r3, r1
 8004c32:	4313      	orrs	r3, r2
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c36:	4b6c      	ldr	r3, [pc, #432]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	4a68      	ldr	r2, [pc, #416]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	2100      	movs	r1, #0
 8004c56:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c62:	460b      	mov	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	d011      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fb79 	bl	8005368 <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	2100      	movs	r1, #0
 8004c96:	6239      	str	r1, [r7, #32]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	d011      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	3308      	adds	r3, #8
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fb59 	bl	8005368 <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	61b9      	str	r1, [r7, #24]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d011      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cec:	3308      	adds	r3, #8
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fb39 	bl	8005368 <RCCEx_PLL2_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	2100      	movs	r1, #0
 8004d16:	6139      	str	r1, [r7, #16]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	d011      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2c:	3328      	adds	r3, #40	; 0x28
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fbcb 	bl	80054cc <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	2100      	movs	r1, #0
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d011      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	3328      	adds	r3, #40	; 0x28
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fbab 	bl	80054cc <RCCEx_PLL3_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	2100      	movs	r1, #0
 8004d96:	6039      	str	r1, [r7, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d011      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dac:	3328      	adds	r3, #40	; 0x28
 8004dae:	2102      	movs	r1, #2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fb8b 	bl	80054cc <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004dcc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004de0:	46bd      	mov	sp, r7
 8004de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400

08004dec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004df0:	f7fe fe00 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4904      	ldr	r1, [pc, #16]	; (8004e14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	58024400 	.word	0x58024400
 8004e14:	08008574 	.word	0x08008574

08004e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e20:	4ba1      	ldr	r3, [pc, #644]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e2a:	4b9f      	ldr	r3, [pc, #636]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	0b1b      	lsrs	r3, r3, #12
 8004e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e36:	4b9c      	ldr	r3, [pc, #624]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e42:	4b99      	ldr	r3, [pc, #612]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	08db      	lsrs	r3, r3, #3
 8004e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8111 	beq.w	8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	f000 8083 	beq.w	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	f200 80a1 	bhi.w	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d056      	beq.n	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e82:	e099      	b.n	8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e84:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02d      	beq.n	8004eec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e90:	4b85      	ldr	r3, [pc, #532]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	4a84      	ldr	r2, [pc, #528]	; (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eba:	4b7b      	ldr	r3, [pc, #492]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ece:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004eea:	e087      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b6a      	ldr	r3, [pc, #424]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f12:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2e:	e065      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f56:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f72:	e043      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b48      	ldr	r3, [pc, #288]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb6:	e021      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fde:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ffc:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	0a5b      	lsrs	r3, r3, #9
 8005002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005016:	edd7 6a07 	vldr	s13, [r7, #28]
 800501a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005022:	ee17 2a90 	vmov	r2, s15
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005034:	ee07 3a90 	vmov	s15, r3
 8005038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005044:	edd7 6a07 	vldr	s13, [r7, #28]
 8005048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800504c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005050:	ee17 2a90 	vmov	r2, s15
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	0e1b      	lsrs	r3, r3, #24
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800506e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005072:	edd7 6a07 	vldr	s13, [r7, #28]
 8005076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800507a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507e:	ee17 2a90 	vmov	r2, s15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005086:	e008      	b.n	800509a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	bf00      	nop
 800509c:	3724      	adds	r7, #36	; 0x24
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	58024400 	.word	0x58024400
 80050ac:	03d09000 	.word	0x03d09000
 80050b0:	46000000 	.word	0x46000000
 80050b4:	4c742400 	.word	0x4c742400
 80050b8:	4a742400 	.word	0x4a742400
 80050bc:	4af42400 	.word	0x4af42400

080050c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050c8:	4ba1      	ldr	r3, [pc, #644]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050d2:	4b9f      	ldr	r3, [pc, #636]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	0d1b      	lsrs	r3, r3, #20
 80050d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050de:	4b9c      	ldr	r3, [pc, #624]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80050ea:	4b99      	ldr	r3, [pc, #612]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8111 	beq.w	8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b02      	cmp	r3, #2
 8005112:	f000 8083 	beq.w	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b02      	cmp	r3, #2
 800511a:	f200 80a1 	bhi.w	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d056      	beq.n	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800512a:	e099      	b.n	8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512c:	4b88      	ldr	r3, [pc, #544]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02d      	beq.n	8005194 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005138:	4b85      	ldr	r3, [pc, #532]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	4a84      	ldr	r2, [pc, #528]	; (8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005192:	e087      	b.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800535c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e065      	b.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	e043      	b.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b48      	ldr	r3, [pc, #288]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005242:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800525e:	e021      	b.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a03 	vldr	s12, [r7, #12]
 8005286:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	0a5b      	lsrs	r3, r3, #9
 80052aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052be:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ca:	ee17 2a90 	vmov	r2, s15
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80052d2:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f8:	ee17 2a90 	vmov	r2, s15
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800531a:	edd7 6a07 	vldr	s13, [r7, #28]
 800531e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005326:	ee17 2a90 	vmov	r2, s15
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800532e:	e008      	b.n	8005342 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	58024400 	.word	0x58024400
 8005354:	03d09000 	.word	0x03d09000
 8005358:	46000000 	.word	0x46000000
 800535c:	4c742400 	.word	0x4c742400
 8005360:	4a742400 	.word	0x4a742400
 8005364:	4af42400 	.word	0x4af42400

08005368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005376:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b03      	cmp	r3, #3
 8005380:	d101      	bne.n	8005386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e099      	b.n	80054ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005386:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4e      	ldr	r2, [pc, #312]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005392:	f7fb ff4d 	bl	8001230 <HAL_GetTick>
 8005396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005398:	e008      	b.n	80053ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800539a:	f7fb ff49 	bl	8001230 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e086      	b.n	80054ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053ac:	4b45      	ldr	r3, [pc, #276]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053b8:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	493f      	ldr	r1, [pc, #252]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	628b      	str	r3, [r1, #40]	; 0x28
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	3b01      	subs	r3, #1
 80053dc:	025b      	lsls	r3, r3, #9
 80053de:	b29b      	uxth	r3, r3
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053fc:	4931      	ldr	r1, [pc, #196]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005402:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	492d      	ldr	r1, [pc, #180]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005410:	4313      	orrs	r3, r2
 8005412:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005414:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	f023 0220 	bic.w	r2, r3, #32
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	4928      	ldr	r1, [pc, #160]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f023 0310 	bic.w	r3, r3, #16
 8005430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <RCCEx_PLL2_Config+0x160>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	69d2      	ldr	r2, [r2, #28]
 800543e:	00d2      	lsls	r2, r2, #3
 8005440:	4920      	ldr	r1, [pc, #128]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005446:	4b1f      	ldr	r3, [pc, #124]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800544c:	f043 0310 	orr.w	r3, r3, #16
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005458:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800545e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005462:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005464:	e00f      	b.n	8005486 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d106      	bne.n	800547a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800546c:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005478:	e005      	b.n	8005486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005484:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 800548c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005492:	f7fb fecd 	bl	8001230 <HAL_GetTick>
 8005496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005498:	e008      	b.n	80054ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800549a:	f7fb fec9 	bl	8001230 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <RCCEx_PLL2_Config+0x15c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	58024400 	.word	0x58024400
 80054c8:	ffff0007 	.word	0xffff0007

080054cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054da:	4b53      	ldr	r3, [pc, #332]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d101      	bne.n	80054ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e099      	b.n	800561e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054ea:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4e      	ldr	r2, [pc, #312]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f6:	f7fb fe9b 	bl	8001230 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054fc:	e008      	b.n	8005510 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054fe:	f7fb fe97 	bl	8001230 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e086      	b.n	800561e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005510:	4b45      	ldr	r3, [pc, #276]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800551c:	4b42      	ldr	r3, [pc, #264]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	051b      	lsls	r3, r3, #20
 800552a:	493f      	ldr	r1, [pc, #252]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	628b      	str	r3, [r1, #40]	; 0x28
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	3b01      	subs	r3, #1
 8005536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	3b01      	subs	r3, #1
 8005540:	025b      	lsls	r3, r3, #9
 8005542:	b29b      	uxth	r3, r3
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	3b01      	subs	r3, #1
 800555a:	061b      	lsls	r3, r3, #24
 800555c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005560:	4931      	ldr	r1, [pc, #196]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005566:	4b30      	ldr	r3, [pc, #192]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	492d      	ldr	r1, [pc, #180]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	4928      	ldr	r1, [pc, #160]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <RCCEx_PLL3_Config+0x160>)
 800559c:	4013      	ands	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	69d2      	ldr	r2, [r2, #28]
 80055a2:	00d2      	lsls	r2, r2, #3
 80055a4:	4920      	ldr	r1, [pc, #128]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055aa:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055bc:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055c8:	e00f      	b.n	80055ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d106      	bne.n	80055de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055dc:	e005      	b.n	80055ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f6:	f7fb fe1b 	bl	8001230 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055fc:	e008      	b.n	8005610 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055fe:	f7fb fe17 	bl	8001230 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <RCCEx_PLL3_Config+0x15c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	58024400 	.word	0x58024400
 800562c:	ffff0007 	.word	0xffff0007

08005630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e042      	b.n	80056c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb fbcd 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fd74 	bl	8006160 <UART_SetConfig>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e022      	b.n	80056c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fbd4 	bl	8006e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fc5b 	bl	8006f7c <UART_CheckIdleState>
 80056c6:	4603      	mov	r3, r0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d17b      	bne.n	80057e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_UART_Transmit+0x26>
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e074      	b.n	80057e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2221      	movs	r2, #33	; 0x21
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570a:	f7fb fd91 	bl	8001230 <HAL_GetTick>
 800570e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005728:	d108      	bne.n	800573c <HAL_UART_Transmit+0x6c>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e003      	b.n	8005744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005744:	e030      	b.n	80057a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	; 0x80
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f001 fcbd 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e03d      	b.n	80057e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	3302      	adds	r3, #2
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e007      	b.n	8005796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1c8      	bne.n	8005746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	2140      	movs	r1, #64	; 0x40
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f001 fc86 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e006      	b.n	80057e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
  }
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b091      	sub	sp, #68	; 0x44
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	2b20      	cmp	r3, #32
 8005802:	d178      	bne.n	80058f6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Transmit_IT+0x24>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e071      	b.n	80058f8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2221      	movs	r2, #33	; 0x21
 800583c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d12a      	bne.n	80058a0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d107      	bne.n	8005864 <HAL_UART_Transmit_IT+0x78>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a29      	ldr	r2, [pc, #164]	; (8005904 <HAL_UART_Transmit_IT+0x118>)
 8005860:	679a      	str	r2, [r3, #120]	; 0x78
 8005862:	e002      	b.n	800586a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a28      	ldr	r2, [pc, #160]	; (8005908 <HAL_UART_Transmit_IT+0x11c>)
 8005868:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3308      	adds	r3, #8
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005880:	63bb      	str	r3, [r7, #56]	; 0x38
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588a:	637a      	str	r2, [r7, #52]	; 0x34
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <HAL_UART_Transmit_IT+0x7e>
 800589e:	e028      	b.n	80058f2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d107      	bne.n	80058ba <HAL_UART_Transmit_IT+0xce>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a15      	ldr	r2, [pc, #84]	; (800590c <HAL_UART_Transmit_IT+0x120>)
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78
 80058b8:	e002      	b.n	80058c0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a14      	ldr	r2, [pc, #80]	; (8005910 <HAL_UART_Transmit_IT+0x124>)
 80058be:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69f9      	ldr	r1, [r7, #28]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e6      	bne.n	80058c0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3744      	adds	r7, #68	; 0x44
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	08007737 	.word	0x08007737
 8005908:	08007657 	.word	0x08007657
 800590c:	08007595 	.word	0x08007595
 8005910:	080074dd 	.word	0x080074dd

08005914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005928:	2b20      	cmp	r3, #32
 800592a:	d137      	bne.n	800599c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_UART_Receive_IT+0x24>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e030      	b.n	800599e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <HAL_UART_Receive_IT+0x94>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01f      	beq.n	800598c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d018      	beq.n	800598c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	613b      	str	r3, [r7, #16]
   return(result);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	61bb      	str	r3, [r7, #24]
   return(result);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	461a      	mov	r2, r3
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f001 fc04 	bl	80071a0 <UART_Start_Receive_IT>
 8005998:	4603      	mov	r3, r0
 800599a:	e000      	b.n	800599e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	58000c00 	.word	0x58000c00

080059ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b0ba      	sub	sp, #232	; 0xe8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059da:	4013      	ands	r3, r2
 80059dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11b      	bne.n	8005a20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d015      	beq.n	8005a20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8377 	beq.w	8006104 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
      }
      return;
 8005a1e:	e371      	b.n	8006104 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8123 	beq.w	8005c70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a2e:	4b8d      	ldr	r3, [pc, #564]	; (8005c64 <HAL_UART_IRQHandler+0x2b8>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	; (8005c68 <HAL_UART_IRQHandler+0x2bc>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8116 	beq.w	8005c70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_UART_IRQHandler+0xc8>
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2201      	movs	r2, #1
 8005a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xf8>
 8005a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2202      	movs	r2, #2
 8005a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f043 0204 	orr.w	r2, r3, #4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x128>
 8005ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	f043 0202 	orr.w	r2, r3, #2
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d017      	beq.n	8005b10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005aec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005af0:	4b5c      	ldr	r3, [pc, #368]	; (8005c64 <HAL_UART_IRQHandler+0x2b8>)
 8005af2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2208      	movs	r2, #8
 8005afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d012      	beq.n	8005b42 <HAL_UART_IRQHandler+0x196>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00c      	beq.n	8005b42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 82dd 	beq.w	8006108 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d013      	beq.n	8005b82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d054      	beq.n	8005c50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fc1c 	bl	80073e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d146      	bne.n	8005c48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1d9      	bne.n	8005bba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d017      	beq.n	8005c40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c16:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <HAL_UART_IRQHandler+0x2c0>)
 8005c18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fb ff77 	bl	8001b14 <HAL_DMA_Abort_IT>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d019      	beq.n	8005c60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3e:	e00f      	b.n	8005c60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fa77 	bl	8006134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c46:	e00b      	b.n	8005c60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fa73 	bl	8006134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c4e:	e007      	b.n	8005c60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fa6f 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005c5e:	e253      	b.n	8006108 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	bf00      	nop
    return;
 8005c62:	e251      	b.n	8006108 <HAL_UART_IRQHandler+0x75c>
 8005c64:	10000001 	.word	0x10000001
 8005c68:	04000120 	.word	0x04000120
 8005c6c:	080074b1 	.word	0x080074b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	f040 81e7 	bne.w	8006048 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 81e0 	beq.w	8006048 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 81d9 	beq.w	8006048 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	f040 8151 	bne.w	8005f50 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a96      	ldr	r2, [pc, #600]	; (8005f10 <HAL_UART_IRQHandler+0x564>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d068      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a93      	ldr	r2, [pc, #588]	; (8005f14 <HAL_UART_IRQHandler+0x568>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d061      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a91      	ldr	r2, [pc, #580]	; (8005f18 <HAL_UART_IRQHandler+0x56c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d05a      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a8e      	ldr	r2, [pc, #568]	; (8005f1c <HAL_UART_IRQHandler+0x570>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d053      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a8c      	ldr	r2, [pc, #560]	; (8005f20 <HAL_UART_IRQHandler+0x574>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04c      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a89      	ldr	r2, [pc, #548]	; (8005f24 <HAL_UART_IRQHandler+0x578>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d045      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a87      	ldr	r2, [pc, #540]	; (8005f28 <HAL_UART_IRQHandler+0x57c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03e      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a84      	ldr	r2, [pc, #528]	; (8005f2c <HAL_UART_IRQHandler+0x580>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d037      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a82      	ldr	r2, [pc, #520]	; (8005f30 <HAL_UART_IRQHandler+0x584>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d030      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7f      	ldr	r2, [pc, #508]	; (8005f34 <HAL_UART_IRQHandler+0x588>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d029      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a7d      	ldr	r2, [pc, #500]	; (8005f38 <HAL_UART_IRQHandler+0x58c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d022      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a7a      	ldr	r2, [pc, #488]	; (8005f3c <HAL_UART_IRQHandler+0x590>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01b      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a78      	ldr	r2, [pc, #480]	; (8005f40 <HAL_UART_IRQHandler+0x594>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d014      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a75      	ldr	r2, [pc, #468]	; (8005f44 <HAL_UART_IRQHandler+0x598>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00d      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a73      	ldr	r2, [pc, #460]	; (8005f48 <HAL_UART_IRQHandler+0x59c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d006      	beq.n	8005d8e <HAL_UART_IRQHandler+0x3e2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a70      	ldr	r2, [pc, #448]	; (8005f4c <HAL_UART_IRQHandler+0x5a0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d106      	bne.n	8005d9c <HAL_UART_IRQHandler+0x3f0>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	e005      	b.n	8005da8 <HAL_UART_IRQHandler+0x3fc>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 81ab 	beq.w	800610c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	f080 81a3 	bcs.w	800610c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	f000 8087 	beq.w	8005eee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1da      	bne.n	8005de0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e1      	bne.n	8005e2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e3      	bne.n	8005e66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebc:	f023 0310 	bic.w	r3, r3, #16
 8005ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e4      	bne.n	8005eac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fb faf5 	bl	80014d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f91d 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f0e:	e0fd      	b.n	800610c <HAL_UART_IRQHandler+0x760>
 8005f10:	40020010 	.word	0x40020010
 8005f14:	40020028 	.word	0x40020028
 8005f18:	40020040 	.word	0x40020040
 8005f1c:	40020058 	.word	0x40020058
 8005f20:	40020070 	.word	0x40020070
 8005f24:	40020088 	.word	0x40020088
 8005f28:	400200a0 	.word	0x400200a0
 8005f2c:	400200b8 	.word	0x400200b8
 8005f30:	40020410 	.word	0x40020410
 8005f34:	40020428 	.word	0x40020428
 8005f38:	40020440 	.word	0x40020440
 8005f3c:	40020458 	.word	0x40020458
 8005f40:	40020470 	.word	0x40020470
 8005f44:	40020488 	.word	0x40020488
 8005f48:	400204a0 	.word	0x400204a0
 8005f4c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80cf 	beq.w	8006110 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 80ca 	beq.w	8006110 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e4      	bne.n	8005f7c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	4b55      	ldr	r3, [pc, #340]	; (800611c <HAL_UART_IRQHandler+0x770>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e3      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	60fb      	str	r3, [r7, #12]
   return(result);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0310 	bic.w	r3, r3, #16
 8006012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	617b      	str	r3, [r7, #20]
   return(result);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e4      	bne.n	8005ffe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800603a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f881 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006046:	e063      	b.n	8006110 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <HAL_UART_IRQHandler+0x6c6>
 8006054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f002 f920 	bl	80082b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006070:	e051      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d014      	beq.n	80060a8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800607e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800608a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609a:	2b00      	cmp	r3, #0
 800609c:	d03a      	beq.n	8006114 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
    }
    return;
 80060a6:	e035      	b.n	8006114 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <HAL_UART_IRQHandler+0x71c>
 80060b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fbad 	bl	8007820 <UART_EndTransmit_IT>
    return;
 80060c6:	e026      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_UART_IRQHandler+0x73c>
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 f8f9 	bl	80082d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060e6:	e016      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d010      	beq.n	8006116 <HAL_UART_IRQHandler+0x76a>
 80060f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	da0c      	bge.n	8006116 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f002 f8e1 	bl	80082c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006102:	e008      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
      return;
 8006104:	bf00      	nop
 8006106:	e006      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
    return;
 8006108:	bf00      	nop
 800610a:	e004      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
      return;
 800610c:	bf00      	nop
 800610e:	e002      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
      return;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <HAL_UART_IRQHandler+0x76a>
    return;
 8006114:	bf00      	nop
  }
}
 8006116:	37e8      	adds	r7, #232	; 0xe8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	effffffe 	.word	0xeffffffe

08006120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006164:	b092      	sub	sp, #72	; 0x48
 8006166:	af00      	add	r7, sp, #0
 8006168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	431a      	orrs	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	431a      	orrs	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4bbe      	ldr	r3, [pc, #760]	; (8006488 <UART_SetConfig+0x328>)
 8006190:	4013      	ands	r3, r2
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006198:	430b      	orrs	r3, r1
 800619a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4ab3      	ldr	r2, [pc, #716]	; (800648c <UART_SetConfig+0x32c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c8:	4313      	orrs	r3, r2
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	4baf      	ldr	r3, [pc, #700]	; (8006490 <UART_SetConfig+0x330>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061dc:	430b      	orrs	r3, r1
 80061de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f023 010f 	bic.w	r1, r3, #15
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4aa6      	ldr	r2, [pc, #664]	; (8006494 <UART_SetConfig+0x334>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d177      	bne.n	80062f0 <UART_SetConfig+0x190>
 8006200:	4ba5      	ldr	r3, [pc, #660]	; (8006498 <UART_SetConfig+0x338>)
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006208:	2b28      	cmp	r3, #40	; 0x28
 800620a:	d86d      	bhi.n	80062e8 <UART_SetConfig+0x188>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <UART_SetConfig+0xb4>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	080062b9 	.word	0x080062b9
 8006218:	080062e9 	.word	0x080062e9
 800621c:	080062e9 	.word	0x080062e9
 8006220:	080062e9 	.word	0x080062e9
 8006224:	080062e9 	.word	0x080062e9
 8006228:	080062e9 	.word	0x080062e9
 800622c:	080062e9 	.word	0x080062e9
 8006230:	080062e9 	.word	0x080062e9
 8006234:	080062c1 	.word	0x080062c1
 8006238:	080062e9 	.word	0x080062e9
 800623c:	080062e9 	.word	0x080062e9
 8006240:	080062e9 	.word	0x080062e9
 8006244:	080062e9 	.word	0x080062e9
 8006248:	080062e9 	.word	0x080062e9
 800624c:	080062e9 	.word	0x080062e9
 8006250:	080062e9 	.word	0x080062e9
 8006254:	080062c9 	.word	0x080062c9
 8006258:	080062e9 	.word	0x080062e9
 800625c:	080062e9 	.word	0x080062e9
 8006260:	080062e9 	.word	0x080062e9
 8006264:	080062e9 	.word	0x080062e9
 8006268:	080062e9 	.word	0x080062e9
 800626c:	080062e9 	.word	0x080062e9
 8006270:	080062e9 	.word	0x080062e9
 8006274:	080062d1 	.word	0x080062d1
 8006278:	080062e9 	.word	0x080062e9
 800627c:	080062e9 	.word	0x080062e9
 8006280:	080062e9 	.word	0x080062e9
 8006284:	080062e9 	.word	0x080062e9
 8006288:	080062e9 	.word	0x080062e9
 800628c:	080062e9 	.word	0x080062e9
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062d9 	.word	0x080062d9
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062e9 	.word	0x080062e9
 80062a0:	080062e9 	.word	0x080062e9
 80062a4:	080062e9 	.word	0x080062e9
 80062a8:	080062e9 	.word	0x080062e9
 80062ac:	080062e9 	.word	0x080062e9
 80062b0:	080062e9 	.word	0x080062e9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e326      	b.n	800690e <UART_SetConfig+0x7ae>
 80062c0:	2304      	movs	r3, #4
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e322      	b.n	800690e <UART_SetConfig+0x7ae>
 80062c8:	2308      	movs	r3, #8
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e31e      	b.n	800690e <UART_SetConfig+0x7ae>
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d6:	e31a      	b.n	800690e <UART_SetConfig+0x7ae>
 80062d8:	2320      	movs	r3, #32
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e316      	b.n	800690e <UART_SetConfig+0x7ae>
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e312      	b.n	800690e <UART_SetConfig+0x7ae>
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e30e      	b.n	800690e <UART_SetConfig+0x7ae>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a69      	ldr	r2, [pc, #420]	; (800649c <UART_SetConfig+0x33c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d130      	bne.n	800635c <UART_SetConfig+0x1fc>
 80062fa:	4b67      	ldr	r3, [pc, #412]	; (8006498 <UART_SetConfig+0x338>)
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	2b05      	cmp	r3, #5
 8006304:	d826      	bhi.n	8006354 <UART_SetConfig+0x1f4>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0x1ac>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006325 	.word	0x08006325
 8006310:	0800632d 	.word	0x0800632d
 8006314:	08006335 	.word	0x08006335
 8006318:	0800633d 	.word	0x0800633d
 800631c:	08006345 	.word	0x08006345
 8006320:	0800634d 	.word	0x0800634d
 8006324:	2300      	movs	r3, #0
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e2f0      	b.n	800690e <UART_SetConfig+0x7ae>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e2ec      	b.n	800690e <UART_SetConfig+0x7ae>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e2e8      	b.n	800690e <UART_SetConfig+0x7ae>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e2e4      	b.n	800690e <UART_SetConfig+0x7ae>
 8006344:	2320      	movs	r3, #32
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e2e0      	b.n	800690e <UART_SetConfig+0x7ae>
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e2dc      	b.n	800690e <UART_SetConfig+0x7ae>
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e2d8      	b.n	800690e <UART_SetConfig+0x7ae>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <UART_SetConfig+0x340>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d130      	bne.n	80063c8 <UART_SetConfig+0x268>
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <UART_SetConfig+0x338>)
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	d826      	bhi.n	80063c0 <UART_SetConfig+0x260>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0x218>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006391 	.word	0x08006391
 800637c:	08006399 	.word	0x08006399
 8006380:	080063a1 	.word	0x080063a1
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e2ba      	b.n	800690e <UART_SetConfig+0x7ae>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e2b6      	b.n	800690e <UART_SetConfig+0x7ae>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e2b2      	b.n	800690e <UART_SetConfig+0x7ae>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e2ae      	b.n	800690e <UART_SetConfig+0x7ae>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e2aa      	b.n	800690e <UART_SetConfig+0x7ae>
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e2a6      	b.n	800690e <UART_SetConfig+0x7ae>
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e2a2      	b.n	800690e <UART_SetConfig+0x7ae>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a35      	ldr	r2, [pc, #212]	; (80064a4 <UART_SetConfig+0x344>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d130      	bne.n	8006434 <UART_SetConfig+0x2d4>
 80063d2:	4b31      	ldr	r3, [pc, #196]	; (8006498 <UART_SetConfig+0x338>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d826      	bhi.n	800642c <UART_SetConfig+0x2cc>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0x284>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e284      	b.n	800690e <UART_SetConfig+0x7ae>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e280      	b.n	800690e <UART_SetConfig+0x7ae>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e27c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e278      	b.n	800690e <UART_SetConfig+0x7ae>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e274      	b.n	800690e <UART_SetConfig+0x7ae>
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e270      	b.n	800690e <UART_SetConfig+0x7ae>
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e26c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <UART_SetConfig+0x348>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d142      	bne.n	80064c4 <UART_SetConfig+0x364>
 800643e:	4b16      	ldr	r3, [pc, #88]	; (8006498 <UART_SetConfig+0x338>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b05      	cmp	r3, #5
 8006448:	d838      	bhi.n	80064bc <UART_SetConfig+0x35c>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0x2f0>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006469 	.word	0x08006469
 8006454:	08006471 	.word	0x08006471
 8006458:	08006479 	.word	0x08006479
 800645c:	08006481 	.word	0x08006481
 8006460:	080064ad 	.word	0x080064ad
 8006464:	080064b5 	.word	0x080064b5
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646e:	e24e      	b.n	800690e <UART_SetConfig+0x7ae>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006476:	e24a      	b.n	800690e <UART_SetConfig+0x7ae>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647e:	e246      	b.n	800690e <UART_SetConfig+0x7ae>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e242      	b.n	800690e <UART_SetConfig+0x7ae>
 8006488:	cfff69f3 	.word	0xcfff69f3
 800648c:	58000c00 	.word	0x58000c00
 8006490:	11fff4ff 	.word	0x11fff4ff
 8006494:	40011000 	.word	0x40011000
 8006498:	58024400 	.word	0x58024400
 800649c:	40004400 	.word	0x40004400
 80064a0:	40004800 	.word	0x40004800
 80064a4:	40004c00 	.word	0x40004c00
 80064a8:	40005000 	.word	0x40005000
 80064ac:	2320      	movs	r3, #32
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b2:	e22c      	b.n	800690e <UART_SetConfig+0x7ae>
 80064b4:	2340      	movs	r3, #64	; 0x40
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ba:	e228      	b.n	800690e <UART_SetConfig+0x7ae>
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c2:	e224      	b.n	800690e <UART_SetConfig+0x7ae>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4ab1      	ldr	r2, [pc, #708]	; (8006790 <UART_SetConfig+0x630>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d176      	bne.n	80065bc <UART_SetConfig+0x45c>
 80064ce:	4bb1      	ldr	r3, [pc, #708]	; (8006794 <UART_SetConfig+0x634>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d6:	2b28      	cmp	r3, #40	; 0x28
 80064d8:	d86c      	bhi.n	80065b4 <UART_SetConfig+0x454>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0x380>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006585 	.word	0x08006585
 80064e4:	080065b5 	.word	0x080065b5
 80064e8:	080065b5 	.word	0x080065b5
 80064ec:	080065b5 	.word	0x080065b5
 80064f0:	080065b5 	.word	0x080065b5
 80064f4:	080065b5 	.word	0x080065b5
 80064f8:	080065b5 	.word	0x080065b5
 80064fc:	080065b5 	.word	0x080065b5
 8006500:	0800658d 	.word	0x0800658d
 8006504:	080065b5 	.word	0x080065b5
 8006508:	080065b5 	.word	0x080065b5
 800650c:	080065b5 	.word	0x080065b5
 8006510:	080065b5 	.word	0x080065b5
 8006514:	080065b5 	.word	0x080065b5
 8006518:	080065b5 	.word	0x080065b5
 800651c:	080065b5 	.word	0x080065b5
 8006520:	08006595 	.word	0x08006595
 8006524:	080065b5 	.word	0x080065b5
 8006528:	080065b5 	.word	0x080065b5
 800652c:	080065b5 	.word	0x080065b5
 8006530:	080065b5 	.word	0x080065b5
 8006534:	080065b5 	.word	0x080065b5
 8006538:	080065b5 	.word	0x080065b5
 800653c:	080065b5 	.word	0x080065b5
 8006540:	0800659d 	.word	0x0800659d
 8006544:	080065b5 	.word	0x080065b5
 8006548:	080065b5 	.word	0x080065b5
 800654c:	080065b5 	.word	0x080065b5
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065b5 	.word	0x080065b5
 8006558:	080065b5 	.word	0x080065b5
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065a5 	.word	0x080065a5
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065b5 	.word	0x080065b5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e1c0      	b.n	800690e <UART_SetConfig+0x7ae>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e1bc      	b.n	800690e <UART_SetConfig+0x7ae>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659a:	e1b8      	b.n	800690e <UART_SetConfig+0x7ae>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e1b4      	b.n	800690e <UART_SetConfig+0x7ae>
 80065a4:	2320      	movs	r3, #32
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e1b0      	b.n	800690e <UART_SetConfig+0x7ae>
 80065ac:	2340      	movs	r3, #64	; 0x40
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e1ac      	b.n	800690e <UART_SetConfig+0x7ae>
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e1a8      	b.n	800690e <UART_SetConfig+0x7ae>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a75      	ldr	r2, [pc, #468]	; (8006798 <UART_SetConfig+0x638>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d130      	bne.n	8006628 <UART_SetConfig+0x4c8>
 80065c6:	4b73      	ldr	r3, [pc, #460]	; (8006794 <UART_SetConfig+0x634>)
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d826      	bhi.n	8006620 <UART_SetConfig+0x4c0>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x478>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065f1 	.word	0x080065f1
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	08006601 	.word	0x08006601
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e18a      	b.n	800690e <UART_SetConfig+0x7ae>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e186      	b.n	800690e <UART_SetConfig+0x7ae>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006606:	e182      	b.n	800690e <UART_SetConfig+0x7ae>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e17e      	b.n	800690e <UART_SetConfig+0x7ae>
 8006610:	2320      	movs	r3, #32
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e17a      	b.n	800690e <UART_SetConfig+0x7ae>
 8006618:	2340      	movs	r3, #64	; 0x40
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e176      	b.n	800690e <UART_SetConfig+0x7ae>
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006626:	e172      	b.n	800690e <UART_SetConfig+0x7ae>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5b      	ldr	r2, [pc, #364]	; (800679c <UART_SetConfig+0x63c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d130      	bne.n	8006694 <UART_SetConfig+0x534>
 8006632:	4b58      	ldr	r3, [pc, #352]	; (8006794 <UART_SetConfig+0x634>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b05      	cmp	r3, #5
 800663c:	d826      	bhi.n	800668c <UART_SetConfig+0x52c>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x4e4>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006665 	.word	0x08006665
 800664c:	0800666d 	.word	0x0800666d
 8006650:	08006675 	.word	0x08006675
 8006654:	0800667d 	.word	0x0800667d
 8006658:	08006685 	.word	0x08006685
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e154      	b.n	800690e <UART_SetConfig+0x7ae>
 8006664:	2304      	movs	r3, #4
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e150      	b.n	800690e <UART_SetConfig+0x7ae>
 800666c:	2308      	movs	r3, #8
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e14c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006674:	2310      	movs	r3, #16
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e148      	b.n	800690e <UART_SetConfig+0x7ae>
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e144      	b.n	800690e <UART_SetConfig+0x7ae>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e140      	b.n	800690e <UART_SetConfig+0x7ae>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e13c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a41      	ldr	r2, [pc, #260]	; (80067a0 <UART_SetConfig+0x640>)
 800669a:	4293      	cmp	r3, r2
 800669c:	f040 8082 	bne.w	80067a4 <UART_SetConfig+0x644>
 80066a0:	4b3c      	ldr	r3, [pc, #240]	; (8006794 <UART_SetConfig+0x634>)
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a8:	2b28      	cmp	r3, #40	; 0x28
 80066aa:	d86d      	bhi.n	8006788 <UART_SetConfig+0x628>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x554>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	08006759 	.word	0x08006759
 80066b8:	08006789 	.word	0x08006789
 80066bc:	08006789 	.word	0x08006789
 80066c0:	08006789 	.word	0x08006789
 80066c4:	08006789 	.word	0x08006789
 80066c8:	08006789 	.word	0x08006789
 80066cc:	08006789 	.word	0x08006789
 80066d0:	08006789 	.word	0x08006789
 80066d4:	08006761 	.word	0x08006761
 80066d8:	08006789 	.word	0x08006789
 80066dc:	08006789 	.word	0x08006789
 80066e0:	08006789 	.word	0x08006789
 80066e4:	08006789 	.word	0x08006789
 80066e8:	08006789 	.word	0x08006789
 80066ec:	08006789 	.word	0x08006789
 80066f0:	08006789 	.word	0x08006789
 80066f4:	08006769 	.word	0x08006769
 80066f8:	08006789 	.word	0x08006789
 80066fc:	08006789 	.word	0x08006789
 8006700:	08006789 	.word	0x08006789
 8006704:	08006789 	.word	0x08006789
 8006708:	08006789 	.word	0x08006789
 800670c:	08006789 	.word	0x08006789
 8006710:	08006789 	.word	0x08006789
 8006714:	08006771 	.word	0x08006771
 8006718:	08006789 	.word	0x08006789
 800671c:	08006789 	.word	0x08006789
 8006720:	08006789 	.word	0x08006789
 8006724:	08006789 	.word	0x08006789
 8006728:	08006789 	.word	0x08006789
 800672c:	08006789 	.word	0x08006789
 8006730:	08006789 	.word	0x08006789
 8006734:	08006779 	.word	0x08006779
 8006738:	08006789 	.word	0x08006789
 800673c:	08006789 	.word	0x08006789
 8006740:	08006789 	.word	0x08006789
 8006744:	08006789 	.word	0x08006789
 8006748:	08006789 	.word	0x08006789
 800674c:	08006789 	.word	0x08006789
 8006750:	08006789 	.word	0x08006789
 8006754:	08006781 	.word	0x08006781
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e0d6      	b.n	800690e <UART_SetConfig+0x7ae>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e0d2      	b.n	800690e <UART_SetConfig+0x7ae>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e0ce      	b.n	800690e <UART_SetConfig+0x7ae>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e0ca      	b.n	800690e <UART_SetConfig+0x7ae>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e0c6      	b.n	800690e <UART_SetConfig+0x7ae>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e0c2      	b.n	800690e <UART_SetConfig+0x7ae>
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e0be      	b.n	800690e <UART_SetConfig+0x7ae>
 8006790:	40011400 	.word	0x40011400
 8006794:	58024400 	.word	0x58024400
 8006798:	40007800 	.word	0x40007800
 800679c:	40007c00 	.word	0x40007c00
 80067a0:	40011800 	.word	0x40011800
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4aad      	ldr	r2, [pc, #692]	; (8006a60 <UART_SetConfig+0x900>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d176      	bne.n	800689c <UART_SetConfig+0x73c>
 80067ae:	4bad      	ldr	r3, [pc, #692]	; (8006a64 <UART_SetConfig+0x904>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b6:	2b28      	cmp	r3, #40	; 0x28
 80067b8:	d86c      	bhi.n	8006894 <UART_SetConfig+0x734>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x660>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	08006865 	.word	0x08006865
 80067c4:	08006895 	.word	0x08006895
 80067c8:	08006895 	.word	0x08006895
 80067cc:	08006895 	.word	0x08006895
 80067d0:	08006895 	.word	0x08006895
 80067d4:	08006895 	.word	0x08006895
 80067d8:	08006895 	.word	0x08006895
 80067dc:	08006895 	.word	0x08006895
 80067e0:	0800686d 	.word	0x0800686d
 80067e4:	08006895 	.word	0x08006895
 80067e8:	08006895 	.word	0x08006895
 80067ec:	08006895 	.word	0x08006895
 80067f0:	08006895 	.word	0x08006895
 80067f4:	08006895 	.word	0x08006895
 80067f8:	08006895 	.word	0x08006895
 80067fc:	08006895 	.word	0x08006895
 8006800:	08006875 	.word	0x08006875
 8006804:	08006895 	.word	0x08006895
 8006808:	08006895 	.word	0x08006895
 800680c:	08006895 	.word	0x08006895
 8006810:	08006895 	.word	0x08006895
 8006814:	08006895 	.word	0x08006895
 8006818:	08006895 	.word	0x08006895
 800681c:	08006895 	.word	0x08006895
 8006820:	0800687d 	.word	0x0800687d
 8006824:	08006895 	.word	0x08006895
 8006828:	08006895 	.word	0x08006895
 800682c:	08006895 	.word	0x08006895
 8006830:	08006895 	.word	0x08006895
 8006834:	08006895 	.word	0x08006895
 8006838:	08006895 	.word	0x08006895
 800683c:	08006895 	.word	0x08006895
 8006840:	08006885 	.word	0x08006885
 8006844:	08006895 	.word	0x08006895
 8006848:	08006895 	.word	0x08006895
 800684c:	08006895 	.word	0x08006895
 8006850:	08006895 	.word	0x08006895
 8006854:	08006895 	.word	0x08006895
 8006858:	08006895 	.word	0x08006895
 800685c:	08006895 	.word	0x08006895
 8006860:	0800688d 	.word	0x0800688d
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e050      	b.n	800690e <UART_SetConfig+0x7ae>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e04c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e048      	b.n	800690e <UART_SetConfig+0x7ae>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006882:	e044      	b.n	800690e <UART_SetConfig+0x7ae>
 8006884:	2320      	movs	r3, #32
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e040      	b.n	800690e <UART_SetConfig+0x7ae>
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e03c      	b.n	800690e <UART_SetConfig+0x7ae>
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e038      	b.n	800690e <UART_SetConfig+0x7ae>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a71      	ldr	r2, [pc, #452]	; (8006a68 <UART_SetConfig+0x908>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d130      	bne.n	8006908 <UART_SetConfig+0x7a8>
 80068a6:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <UART_SetConfig+0x904>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d826      	bhi.n	8006900 <UART_SetConfig+0x7a0>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <UART_SetConfig+0x758>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068d1 	.word	0x080068d1
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e01a      	b.n	800690e <UART_SetConfig+0x7ae>
 80068d8:	2304      	movs	r3, #4
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e016      	b.n	800690e <UART_SetConfig+0x7ae>
 80068e0:	2308      	movs	r3, #8
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e6:	e012      	b.n	800690e <UART_SetConfig+0x7ae>
 80068e8:	2310      	movs	r3, #16
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ee:	e00e      	b.n	800690e <UART_SetConfig+0x7ae>
 80068f0:	2320      	movs	r3, #32
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f6:	e00a      	b.n	800690e <UART_SetConfig+0x7ae>
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e006      	b.n	800690e <UART_SetConfig+0x7ae>
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e002      	b.n	800690e <UART_SetConfig+0x7ae>
 8006908:	2380      	movs	r3, #128	; 0x80
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a55      	ldr	r2, [pc, #340]	; (8006a68 <UART_SetConfig+0x908>)
 8006914:	4293      	cmp	r3, r2
 8006916:	f040 80f8 	bne.w	8006b0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800691a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800691e:	2b20      	cmp	r3, #32
 8006920:	dc46      	bgt.n	80069b0 <UART_SetConfig+0x850>
 8006922:	2b02      	cmp	r3, #2
 8006924:	db75      	blt.n	8006a12 <UART_SetConfig+0x8b2>
 8006926:	3b02      	subs	r3, #2
 8006928:	2b1e      	cmp	r3, #30
 800692a:	d872      	bhi.n	8006a12 <UART_SetConfig+0x8b2>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x7d4>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	080069b7 	.word	0x080069b7
 8006938:	08006a13 	.word	0x08006a13
 800693c:	080069bf 	.word	0x080069bf
 8006940:	08006a13 	.word	0x08006a13
 8006944:	08006a13 	.word	0x08006a13
 8006948:	08006a13 	.word	0x08006a13
 800694c:	080069cf 	.word	0x080069cf
 8006950:	08006a13 	.word	0x08006a13
 8006954:	08006a13 	.word	0x08006a13
 8006958:	08006a13 	.word	0x08006a13
 800695c:	08006a13 	.word	0x08006a13
 8006960:	08006a13 	.word	0x08006a13
 8006964:	08006a13 	.word	0x08006a13
 8006968:	08006a13 	.word	0x08006a13
 800696c:	080069df 	.word	0x080069df
 8006970:	08006a13 	.word	0x08006a13
 8006974:	08006a13 	.word	0x08006a13
 8006978:	08006a13 	.word	0x08006a13
 800697c:	08006a13 	.word	0x08006a13
 8006980:	08006a13 	.word	0x08006a13
 8006984:	08006a13 	.word	0x08006a13
 8006988:	08006a13 	.word	0x08006a13
 800698c:	08006a13 	.word	0x08006a13
 8006990:	08006a13 	.word	0x08006a13
 8006994:	08006a13 	.word	0x08006a13
 8006998:	08006a13 	.word	0x08006a13
 800699c:	08006a13 	.word	0x08006a13
 80069a0:	08006a13 	.word	0x08006a13
 80069a4:	08006a13 	.word	0x08006a13
 80069a8:	08006a13 	.word	0x08006a13
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d02a      	beq.n	8006a0a <UART_SetConfig+0x8aa>
 80069b4:	e02d      	b.n	8006a12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069b6:	f7fe fa19 	bl	8004dec <HAL_RCCEx_GetD3PCLK1Freq>
 80069ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069bc:	e02f      	b.n	8006a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fa28 	bl	8004e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069cc:	e027      	b.n	8006a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ce:	f107 0318 	add.w	r3, r7, #24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fb74 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069dc:	e01f      	b.n	8006a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069de:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <UART_SetConfig+0x904>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ea:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <UART_SetConfig+0x904>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <UART_SetConfig+0x90c>)
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069fc:	e00f      	b.n	8006a1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80069fe:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <UART_SetConfig+0x90c>)
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a02:	e00c      	b.n	8006a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <UART_SetConfig+0x910>)
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a08:	e009      	b.n	8006a1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a10:	e005      	b.n	8006a1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 81ee 	beq.w	8006e02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <UART_SetConfig+0x914>)
 8006a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d305      	bcc.n	8006a56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d910      	bls.n	8006a78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a5c:	e1d1      	b.n	8006e02 <UART_SetConfig+0xca2>
 8006a5e:	bf00      	nop
 8006a60:	40011c00 	.word	0x40011c00
 8006a64:	58024400 	.word	0x58024400
 8006a68:	58000c00 	.word	0x58000c00
 8006a6c:	03d09000 	.word	0x03d09000
 8006a70:	003d0900 	.word	0x003d0900
 8006a74:	08008584 	.word	0x08008584
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	60fa      	str	r2, [r7, #12]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	4ac0      	ldr	r2, [pc, #768]	; (8006d88 <UART_SetConfig+0xc28>)
 8006a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a9a:	f7f9 fc3f 	bl	800031c <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	020b      	lsls	r3, r1, #8
 8006ab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ab4:	0202      	lsls	r2, r0, #8
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	6849      	ldr	r1, [r1, #4]
 8006aba:	0849      	lsrs	r1, r1, #1
 8006abc:	2000      	movs	r0, #0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	eb12 0804 	adds.w	r8, r2, r4
 8006ac6:	eb43 0905 	adc.w	r9, r3, r5
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	469a      	mov	sl, r3
 8006ad2:	4693      	mov	fp, r2
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	f7f9 fc1e 	bl	800031c <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aee:	d308      	bcc.n	8006b02 <UART_SetConfig+0x9a2>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af6:	d204      	bcs.n	8006b02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	e17f      	b.n	8006e02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b08:	e17b      	b.n	8006e02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b12:	f040 80bd 	bne.w	8006c90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	dc48      	bgt.n	8006bb0 <UART_SetConfig+0xa50>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	db7b      	blt.n	8006c1a <UART_SetConfig+0xaba>
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d879      	bhi.n	8006c1a <UART_SetConfig+0xaba>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0x9cc>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006bb7 	.word	0x08006bb7
 8006b30:	08006bbf 	.word	0x08006bbf
 8006b34:	08006c1b 	.word	0x08006c1b
 8006b38:	08006c1b 	.word	0x08006c1b
 8006b3c:	08006bc7 	.word	0x08006bc7
 8006b40:	08006c1b 	.word	0x08006c1b
 8006b44:	08006c1b 	.word	0x08006c1b
 8006b48:	08006c1b 	.word	0x08006c1b
 8006b4c:	08006bd7 	.word	0x08006bd7
 8006b50:	08006c1b 	.word	0x08006c1b
 8006b54:	08006c1b 	.word	0x08006c1b
 8006b58:	08006c1b 	.word	0x08006c1b
 8006b5c:	08006c1b 	.word	0x08006c1b
 8006b60:	08006c1b 	.word	0x08006c1b
 8006b64:	08006c1b 	.word	0x08006c1b
 8006b68:	08006c1b 	.word	0x08006c1b
 8006b6c:	08006be7 	.word	0x08006be7
 8006b70:	08006c1b 	.word	0x08006c1b
 8006b74:	08006c1b 	.word	0x08006c1b
 8006b78:	08006c1b 	.word	0x08006c1b
 8006b7c:	08006c1b 	.word	0x08006c1b
 8006b80:	08006c1b 	.word	0x08006c1b
 8006b84:	08006c1b 	.word	0x08006c1b
 8006b88:	08006c1b 	.word	0x08006c1b
 8006b8c:	08006c1b 	.word	0x08006c1b
 8006b90:	08006c1b 	.word	0x08006c1b
 8006b94:	08006c1b 	.word	0x08006c1b
 8006b98:	08006c1b 	.word	0x08006c1b
 8006b9c:	08006c1b 	.word	0x08006c1b
 8006ba0:	08006c1b 	.word	0x08006c1b
 8006ba4:	08006c1b 	.word	0x08006c1b
 8006ba8:	08006c1b 	.word	0x08006c1b
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d02e      	beq.n	8006c12 <UART_SetConfig+0xab2>
 8006bb4:	e031      	b.n	8006c1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb6:	f7fc ff4d 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8006bba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bbc:	e033      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbe:	f7fc ff5f 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8006bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc4:	e02f      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe f924 	bl	8004e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd4:	e027      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bd6:	f107 0318 	add.w	r3, r7, #24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fa70 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be4:	e01f      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be6:	4b69      	ldr	r3, [pc, #420]	; (8006d8c <UART_SetConfig+0xc2c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bf2:	4b66      	ldr	r3, [pc, #408]	; (8006d8c <UART_SetConfig+0xc2c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	08db      	lsrs	r3, r3, #3
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	4a64      	ldr	r2, [pc, #400]	; (8006d90 <UART_SetConfig+0xc30>)
 8006bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c04:	e00f      	b.n	8006c26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c06:	4b62      	ldr	r3, [pc, #392]	; (8006d90 <UART_SetConfig+0xc30>)
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0a:	e00c      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c0c:	4b61      	ldr	r3, [pc, #388]	; (8006d94 <UART_SetConfig+0xc34>)
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c10:	e009      	b.n	8006c26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c18:	e005      	b.n	8006c26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80ea 	beq.w	8006e02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	4a55      	ldr	r2, [pc, #340]	; (8006d88 <UART_SetConfig+0xc28>)
 8006c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c40:	005a      	lsls	r2, r3, #1
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	441a      	add	r2, r3
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	2b0f      	cmp	r3, #15
 8006c58:	d916      	bls.n	8006c88 <UART_SetConfig+0xb28>
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d212      	bcs.n	8006c88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f023 030f 	bic.w	r3, r3, #15
 8006c6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	e0bc      	b.n	8006e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c8e:	e0b8      	b.n	8006e02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	dc4b      	bgt.n	8006d30 <UART_SetConfig+0xbd0>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f2c0 8087 	blt.w	8006dac <UART_SetConfig+0xc4c>
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	f200 8084 	bhi.w	8006dac <UART_SetConfig+0xc4c>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0xb4c>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006d37 	.word	0x08006d37
 8006cb0:	08006d3f 	.word	0x08006d3f
 8006cb4:	08006dad 	.word	0x08006dad
 8006cb8:	08006dad 	.word	0x08006dad
 8006cbc:	08006d47 	.word	0x08006d47
 8006cc0:	08006dad 	.word	0x08006dad
 8006cc4:	08006dad 	.word	0x08006dad
 8006cc8:	08006dad 	.word	0x08006dad
 8006ccc:	08006d57 	.word	0x08006d57
 8006cd0:	08006dad 	.word	0x08006dad
 8006cd4:	08006dad 	.word	0x08006dad
 8006cd8:	08006dad 	.word	0x08006dad
 8006cdc:	08006dad 	.word	0x08006dad
 8006ce0:	08006dad 	.word	0x08006dad
 8006ce4:	08006dad 	.word	0x08006dad
 8006ce8:	08006dad 	.word	0x08006dad
 8006cec:	08006d67 	.word	0x08006d67
 8006cf0:	08006dad 	.word	0x08006dad
 8006cf4:	08006dad 	.word	0x08006dad
 8006cf8:	08006dad 	.word	0x08006dad
 8006cfc:	08006dad 	.word	0x08006dad
 8006d00:	08006dad 	.word	0x08006dad
 8006d04:	08006dad 	.word	0x08006dad
 8006d08:	08006dad 	.word	0x08006dad
 8006d0c:	08006dad 	.word	0x08006dad
 8006d10:	08006dad 	.word	0x08006dad
 8006d14:	08006dad 	.word	0x08006dad
 8006d18:	08006dad 	.word	0x08006dad
 8006d1c:	08006dad 	.word	0x08006dad
 8006d20:	08006dad 	.word	0x08006dad
 8006d24:	08006dad 	.word	0x08006dad
 8006d28:	08006dad 	.word	0x08006dad
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d037      	beq.n	8006da4 <UART_SetConfig+0xc44>
 8006d34:	e03a      	b.n	8006dac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d36:	f7fc fe8d 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8006d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d3c:	e03c      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d3e:	f7fc fe9f 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8006d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d44:	e038      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe f864 	bl	8004e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d54:	e030      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe f9b0 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d64:	e028      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <UART_SetConfig+0xc2c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d72:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <UART_SetConfig+0xc2c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <UART_SetConfig+0xc30>)
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d84:	e018      	b.n	8006db8 <UART_SetConfig+0xc58>
 8006d86:	bf00      	nop
 8006d88:	08008584 	.word	0x08008584
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	03d09000 	.word	0x03d09000
 8006d94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <UART_SetConfig+0xccc>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9c:	e00c      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <UART_SetConfig+0xcd0>)
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da2:	e009      	b.n	8006db8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006daa:	e005      	b.n	8006db8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006db6:	bf00      	nop
    }

    if (pclk != 0U)
 8006db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d021      	beq.n	8006e02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	4a1c      	ldr	r2, [pc, #112]	; (8006e34 <UART_SetConfig+0xcd4>)
 8006dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	085b      	lsrs	r3, r3, #1
 8006dd6:	441a      	add	r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b0f      	cmp	r3, #15
 8006de6:	d909      	bls.n	8006dfc <UART_SetConfig+0xc9c>
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dee:	d205      	bcs.n	8006dfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	e002      	b.n	8006e02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3748      	adds	r7, #72	; 0x48
 8006e26:	46bd      	mov	sp, r7
 8006e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2c:	03d09000 	.word	0x03d09000
 8006e30:	003d0900 	.word	0x003d0900
 8006e34:	08008584 	.word	0x08008584

08006e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f36:	d10a      	bne.n	8006f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
  }
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b098      	sub	sp, #96	; 0x60
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f8c:	f7fa f950 	bl	8001230 <HAL_GetTick>
 8006f90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d12f      	bne.n	8007000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f88e 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d022      	beq.n	8007000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fce:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e6      	bne.n	8006fba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e063      	b.n	80070c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b04      	cmp	r3, #4
 800700c:	d149      	bne.n	80070a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007016:	2200      	movs	r2, #0
 8007018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f857 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d03c      	beq.n	80070a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	623b      	str	r3, [r7, #32]
   return(result);
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007046:	633b      	str	r3, [r7, #48]	; 0x30
 8007048:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e6      	bne.n	8007028 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60fb      	str	r3, [r7, #12]
   return(result);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707a:	61fa      	str	r2, [r7, #28]
 800707c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	69b9      	ldr	r1, [r7, #24]
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	617b      	str	r3, [r7, #20]
   return(result);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e5      	bne.n	800705a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e012      	b.n	80070c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3758      	adds	r7, #88	; 0x58
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e0:	e049      	b.n	8007176 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d045      	beq.n	8007176 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ea:	f7fa f8a1 	bl	8001230 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d302      	bcc.n	8007100 <UART_WaitOnFlagUntilTimeout+0x30>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e048      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d031      	beq.n	8007176 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f003 0308 	and.w	r3, r3, #8
 800711c:	2b08      	cmp	r3, #8
 800711e:	d110      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2208      	movs	r2, #8
 8007126:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f95b 	bl	80073e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2208      	movs	r2, #8
 8007132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e029      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007150:	d111      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800715a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f941 	bl	80073e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e00f      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	429a      	cmp	r2, r3
 8007184:	bf0c      	ite	eq
 8007186:	2301      	moveq	r3, #1
 8007188:	2300      	movne	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	429a      	cmp	r2, r3
 8007192:	d0a6      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b0a3      	sub	sp, #140	; 0x8c
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	88fa      	ldrh	r2, [r7, #6]
 80071b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d10e      	bne.n	80071f2 <UART_Start_Receive_IT+0x52>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <UART_Start_Receive_IT+0x48>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071e6:	e02d      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	22ff      	movs	r2, #255	; 0xff
 80071ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071f0:	e028      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10d      	bne.n	8007216 <UART_Start_Receive_IT+0x76>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <UART_Start_Receive_IT+0x6c>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	22ff      	movs	r2, #255	; 0xff
 8007206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800720a:	e01b      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	227f      	movs	r2, #127	; 0x7f
 8007210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007214:	e016      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800721e:	d10d      	bne.n	800723c <UART_Start_Receive_IT+0x9c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <UART_Start_Receive_IT+0x92>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	227f      	movs	r2, #127	; 0x7f
 800722c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007230:	e008      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	223f      	movs	r2, #63	; 0x3f
 8007236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800723a:	e003      	b.n	8007244 <UART_Start_Receive_IT+0xa4>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2222      	movs	r2, #34	; 0x22
 8007250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007278:	673a      	str	r2, [r7, #112]	; 0x70
 800727a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800727e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e3      	bne.n	8007254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007294:	d14f      	bne.n	8007336 <UART_Start_Receive_IT+0x196>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d349      	bcc.n	8007336 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d107      	bne.n	80072bc <UART_Start_Receive_IT+0x11c>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a47      	ldr	r2, [pc, #284]	; (80073d4 <UART_Start_Receive_IT+0x234>)
 80072b8:	675a      	str	r2, [r3, #116]	; 0x74
 80072ba:	e002      	b.n	80072c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a46      	ldr	r2, [pc, #280]	; (80073d8 <UART_Start_Receive_IT+0x238>)
 80072c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01a      	beq.n	8007300 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e4      	bne.n	80072ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007316:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007320:	64ba      	str	r2, [r7, #72]	; 0x48
 8007322:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_Start_Receive_IT+0x160>
 8007334:	e046      	b.n	80073c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733e:	d107      	bne.n	8007350 <UART_Start_Receive_IT+0x1b0>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4a24      	ldr	r2, [pc, #144]	; (80073dc <UART_Start_Receive_IT+0x23c>)
 800734c:	675a      	str	r2, [r3, #116]	; 0x74
 800734e:	e002      	b.n	8007356 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a23      	ldr	r2, [pc, #140]	; (80073e0 <UART_Start_Receive_IT+0x240>)
 8007354:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d019      	beq.n	8007392 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007372:	677b      	str	r3, [r7, #116]	; 0x74
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_Start_Receive_IT+0x1be>
 8007390:	e018      	b.n	80073c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	613b      	str	r3, [r7, #16]
   return(result);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f043 0320 	orr.w	r3, r3, #32
 80073a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	378c      	adds	r7, #140	; 0x8c
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	08007f49 	.word	0x08007f49
 80073d8:	08007be9 	.word	0x08007be9
 80073dc:	08007a31 	.word	0x08007a31
 80073e0:	08007879 	.word	0x08007879

080073e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b095      	sub	sp, #84	; 0x54
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740a:	643b      	str	r3, [r7, #64]	; 0x40
 800740c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	61fb      	str	r3, [r7, #28]
   return(result);
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <UART_EndRxTransfer+0xc8>)
 8007432:	4013      	ands	r3, r2
 8007434:	64bb      	str	r3, [r7, #72]	; 0x48
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d118      	bne.n	800748c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	60bb      	str	r3, [r7, #8]
   return(result);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f023 0310 	bic.w	r3, r3, #16
 800746e:	647b      	str	r3, [r7, #68]	; 0x44
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6979      	ldr	r1, [r7, #20]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e6      	bne.n	800745a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074a0:	bf00      	nop
 80074a2:	3754      	adds	r7, #84	; 0x54
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	effffffe 	.word	0xeffffffe

080074b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7fe fe30 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b08f      	sub	sp, #60	; 0x3c
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	2b21      	cmp	r3, #33	; 0x21
 80074ec:	d14c      	bne.n	8007588 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d132      	bne.n	8007560 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	61fb      	str	r3, [r7, #28]
   return(result);
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800751a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800751e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e6      	bne.n	80074fa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	60bb      	str	r3, [r7, #8]
   return(result);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	633b      	str	r3, [r7, #48]	; 0x30
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	613b      	str	r3, [r7, #16]
   return(result);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e6      	bne.n	800752c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800755e:	e013      	b.n	8007588 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007588:	bf00      	nop
 800758a:	373c      	adds	r7, #60	; 0x3c
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b091      	sub	sp, #68	; 0x44
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	2b21      	cmp	r3, #33	; 0x21
 80075a4:	d151      	bne.n	800764a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d132      	bne.n	8007618 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	623b      	str	r3, [r7, #32]
   return(result);
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	633b      	str	r3, [r7, #48]	; 0x30
 80075d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	69b9      	ldr	r1, [r7, #24]
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	617b      	str	r3, [r7, #20]
   return(result);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e6      	bne.n	80075e4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007616:	e018      	b.n	800764a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800762c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800764a:	bf00      	nop
 800764c:	3744      	adds	r7, #68	; 0x44
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007656:	b480      	push	{r7}
 8007658:	b091      	sub	sp, #68	; 0x44
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	2b21      	cmp	r3, #33	; 0x21
 8007666:	d160      	bne.n	800772a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800766e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007670:	e057      	b.n	8007722 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d133      	bne.n	80076e6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	623b      	str	r3, [r7, #32]
   return(result);
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007694:	63bb      	str	r3, [r7, #56]	; 0x38
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769e:	633a      	str	r2, [r7, #48]	; 0x30
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	69b9      	ldr	r1, [r7, #24]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	617b      	str	r3, [r7, #20]
   return(result);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e6      	bne.n	80076b2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80076e4:	e021      	b.n	800772a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d013      	beq.n	800771c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800771c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800771e:	3b01      	subs	r3, #1
 8007720:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007722:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1a4      	bne.n	8007672 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007728:	e7ff      	b.n	800772a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800772a:	bf00      	nop
 800772c:	3744      	adds	r7, #68	; 0x44
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007736:	b480      	push	{r7}
 8007738:	b091      	sub	sp, #68	; 0x44
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007744:	2b21      	cmp	r3, #33	; 0x21
 8007746:	d165      	bne.n	8007814 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800774e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007750:	e05c      	b.n	800780c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d133      	bne.n	80077c6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	61fb      	str	r3, [r7, #28]
   return(result);
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800777e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e5      	bne.n	800775e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6979      	ldr	r1, [r7, #20]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	613b      	str	r3, [r7, #16]
   return(result);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e6      	bne.n	8007792 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80077c4:	e026      	b.n	8007814 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d018      	beq.n	8007806 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	1c9a      	adds	r2, r3, #2
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007806:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007808:	3b01      	subs	r3, #1
 800780a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800780c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800780e:	2b00      	cmp	r3, #0
 8007810:	d19f      	bne.n	8007752 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007812:	e7ff      	b.n	8007814 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007814:	bf00      	nop
 8007816:	3744      	adds	r7, #68	; 0x44
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	60bb      	str	r3, [r7, #8]
   return(result);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783c:	61fb      	str	r3, [r7, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6979      	ldr	r1, [r7, #20]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	613b      	str	r3, [r7, #16]
   return(result);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e6      	bne.n	8007828 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe fc59 	bl	8006120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800786e:	bf00      	nop
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b09c      	sub	sp, #112	; 0x70
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007890:	2b22      	cmp	r3, #34	; 0x22
 8007892:	f040 80be 	bne.w	8007a12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078a4:	b2d9      	uxtb	r1, r3
 80078a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b0:	400a      	ands	r2, r1
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 80a1 	bne.w	8007a22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	667b      	str	r3, [r7, #100]	; 0x64
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007932:	647a      	str	r2, [r7, #68]	; 0x44
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a33      	ldr	r2, [pc, #204]	; (8007a2c <UART_RxISR_8BIT+0x1b4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d01f      	beq.n	80079a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d018      	beq.n	80079a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	623b      	str	r3, [r7, #32]
   return(result);
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007986:	663b      	str	r3, [r7, #96]	; 0x60
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
 8007992:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d12e      	bne.n	8007a0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0310 	bic.w	r3, r3, #16
 80079c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	69b9      	ldr	r1, [r7, #24]
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	617b      	str	r3, [r7, #20]
   return(result);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d103      	bne.n	80079fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2210      	movs	r2, #16
 80079f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fe fba0 	bl	8006148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a08:	e00b      	b.n	8007a22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f8 fe04 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 8007a10:	e007      	b.n	8007a22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	619a      	str	r2, [r3, #24]
}
 8007a22:	bf00      	nop
 8007a24:	3770      	adds	r7, #112	; 0x70
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	58000c00 	.word	0x58000c00

08007a30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b09c      	sub	sp, #112	; 0x70
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a48:	2b22      	cmp	r3, #34	; 0x22
 8007a4a:	f040 80be 	bne.w	8007bca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007a62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a66:	4013      	ands	r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 80a1 	bne.w	8007bda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aac:	667b      	str	r3, [r7, #100]	; 0x64
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3308      	adds	r3, #8
 8007ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aea:	643a      	str	r2, [r7, #64]	; 0x40
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e5      	bne.n	8007aca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a33      	ldr	r2, [pc, #204]	; (8007be4 <UART_RxISR_16BIT+0x1b4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d01f      	beq.n	8007b5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d018      	beq.n	8007b5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d12e      	bne.n	8007bc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0310 	bic.w	r3, r3, #16
 8007b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2b10      	cmp	r3, #16
 8007ba8:	d103      	bne.n	8007bb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fe fac4 	bl	8006148 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bc0:	e00b      	b.n	8007bda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f8 fd28 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 8007bc8:	e007      	b.n	8007bda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0208 	orr.w	r2, r2, #8
 8007bd8:	619a      	str	r2, [r3, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	3770      	adds	r7, #112	; 0x70
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	58000c00 	.word	0x58000c00

08007be8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b0ac      	sub	sp, #176	; 0xb0
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1e:	2b22      	cmp	r3, #34	; 0x22
 8007c20:	f040 8180 	bne.w	8007f24 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c2e:	e123      	b.n	8007e78 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007c3e:	b2d9      	uxtb	r1, r3
 8007c40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4a:	400a      	ands	r2, r1
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d053      	beq.n	8007d2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d011      	beq.n	8007cb2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	f043 0201 	orr.w	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d011      	beq.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f043 0204 	orr.w	r2, r3, #4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d08:	f043 0202 	orr.w	r2, r3, #2
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d006      	beq.n	8007d2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7fe fa09 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 80a0 	bne.w	8007e78 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d5c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007d60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e4      	bne.n	8007d38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d80:	4b6e      	ldr	r3, [pc, #440]	; (8007f3c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d92:	66ba      	str	r2, [r7, #104]	; 0x68
 8007d94:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e3      	bne.n	8007d6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a60      	ldr	r2, [pc, #384]	; (8007f40 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d021      	beq.n	8007e08 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01a      	beq.n	8007e08 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007df4:	657b      	str	r3, [r7, #84]	; 0x54
 8007df6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e4      	bne.n	8007dd2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d130      	bne.n	8007e72 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e38:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d103      	bne.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2210      	movs	r2, #16
 8007e60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fe f96c 	bl	8006148 <HAL_UARTEx_RxEventCallback>
 8007e70:	e002      	b.n	8007e78 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7f8 fbd0 	bl	8000618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f47f aed1 	bne.w	8007c30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d049      	beq.n	8007f34 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ea6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d242      	bcs.n	8007f34 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e3      	bne.n	8007eae <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007eea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f043 0320 	orr.w	r3, r3, #32
 8007f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e4      	bne.n	8007eec <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f22:	e007      	b.n	8007f34 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0208 	orr.w	r2, r2, #8
 8007f32:	619a      	str	r2, [r3, #24]
}
 8007f34:	bf00      	nop
 8007f36:	37b0      	adds	r7, #176	; 0xb0
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	effffffe 	.word	0xeffffffe
 8007f40:	58000c00 	.word	0x58000c00
 8007f44:	08007879 	.word	0x08007879

08007f48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b0ae      	sub	sp, #184	; 0xb8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f56:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7e:	2b22      	cmp	r3, #34	; 0x22
 8007f80:	f040 8184 	bne.w	800828c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f8e:	e127      	b.n	80081e0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007fa2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007fa6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007faa:	4013      	ands	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb8:	1c9a      	adds	r2, r3, #2
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d053      	beq.n	800808e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2201      	movs	r2, #1
 8008004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	f043 0201 	orr.w	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2202      	movs	r2, #2
 8008034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803c:	f043 0204 	orr.w	r2, r3, #4
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d011      	beq.n	8008076 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2204      	movs	r2, #4
 8008064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806c:	f043 0202 	orr.w	r2, r3, #2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fe f857 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 80a2 	bne.w	80081e0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e2      	bne.n	800809c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080e8:	4b6e      	ldr	r3, [pc, #440]	; (80082a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80080fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e3      	bne.n	80080d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a60      	ldr	r2, [pc, #384]	; (80082a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d021      	beq.n	8008170 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01a      	beq.n	8008170 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800814e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800815c:	65bb      	str	r3, [r7, #88]	; 0x58
 800815e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800816a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e4      	bne.n	800813a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008174:	2b01      	cmp	r3, #1
 8008176:	d130      	bne.n	80081da <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081a0:	647b      	str	r3, [r7, #68]	; 0x44
 80081a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e4      	bne.n	800817e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b10      	cmp	r3, #16
 80081c0:	d103      	bne.n	80081ca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2210      	movs	r2, #16
 80081c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fd ffb8 	bl	8006148 <HAL_UARTEx_RxEventCallback>
 80081d8:	e002      	b.n	80081e0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7f8 fa1c 	bl	8000618 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80081e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f47f aecd 	bne.w	8007f90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008200:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008204:	2b00      	cmp	r3, #0
 8008206:	d049      	beq.n	800829c <UART_RxISR_16BIT_FIFOEN+0x354>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800820e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008212:	429a      	cmp	r2, r3
 8008214:	d242      	bcs.n	800829c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	623b      	str	r3, [r7, #32]
   return(result);
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800822c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800823a:	633a      	str	r2, [r7, #48]	; 0x30
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008242:	e841 2300 	strex	r3, r2, [r1]
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1e3      	bne.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a16      	ldr	r2, [pc, #88]	; (80082ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008252:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	60fb      	str	r3, [r7, #12]
   return(result);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f043 0320 	orr.w	r3, r3, #32
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008276:	61fb      	str	r3, [r7, #28]
 8008278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	69b9      	ldr	r1, [r7, #24]
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	617b      	str	r3, [r7, #20]
   return(result);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e4      	bne.n	8008254 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800828a:	e007      	b.n	800829c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0208 	orr.w	r2, r2, #8
 800829a:	619a      	str	r2, [r3, #24]
}
 800829c:	bf00      	nop
 800829e:	37b8      	adds	r7, #184	; 0xb8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	effffffe 	.word	0xeffffffe
 80082a8:	58000c00 	.word	0x58000c00
 80082ac:	08007a31 	.word	0x08007a31

080082b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UARTEx_DisableFifoMode+0x16>
 80082fe:	2302      	movs	r3, #2
 8008300:	e027      	b.n	8008352 <HAL_UARTEx_DisableFifoMode+0x66>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	; 0x24
 800830e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008372:	2302      	movs	r3, #2
 8008374:	e02d      	b.n	80083d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2224      	movs	r2, #36	; 0x24
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f850 	bl	8008458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e02d      	b.n	800844e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2224      	movs	r2, #36	; 0x24
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f812 	bl	8008458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008464:	2b00      	cmp	r3, #0
 8008466:	d108      	bne.n	800847a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008478:	e031      	b.n	80084de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800847a:	2310      	movs	r3, #16
 800847c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800847e:	2310      	movs	r3, #16
 8008480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	0e5b      	lsrs	r3, r3, #25
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	0f5b      	lsrs	r3, r3, #29
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	7b3a      	ldrb	r2, [r7, #12]
 80084a6:	4911      	ldr	r1, [pc, #68]	; (80084ec <UARTEx_SetNbDataToProcess+0x94>)
 80084a8:	5c8a      	ldrb	r2, [r1, r2]
 80084aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ae:	7b3a      	ldrb	r2, [r7, #12]
 80084b0:	490f      	ldr	r1, [pc, #60]	; (80084f0 <UARTEx_SetNbDataToProcess+0x98>)
 80084b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	7b7a      	ldrb	r2, [r7, #13]
 80084c4:	4909      	ldr	r1, [pc, #36]	; (80084ec <UARTEx_SetNbDataToProcess+0x94>)
 80084c6:	5c8a      	ldrb	r2, [r1, r2]
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084cc:	7b7a      	ldrb	r2, [r7, #13]
 80084ce:	4908      	ldr	r1, [pc, #32]	; (80084f0 <UARTEx_SetNbDataToProcess+0x98>)
 80084d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	0800859c 	.word	0x0800859c
 80084f0:	080085a4 	.word	0x080085a4

080084f4 <memset>:
 80084f4:	4402      	add	r2, r0
 80084f6:	4603      	mov	r3, r0
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d100      	bne.n	80084fe <memset+0xa>
 80084fc:	4770      	bx	lr
 80084fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008502:	e7f9      	b.n	80084f8 <memset+0x4>

08008504 <__libc_init_array>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	4d0d      	ldr	r5, [pc, #52]	; (800853c <__libc_init_array+0x38>)
 8008508:	4c0d      	ldr	r4, [pc, #52]	; (8008540 <__libc_init_array+0x3c>)
 800850a:	1b64      	subs	r4, r4, r5
 800850c:	10a4      	asrs	r4, r4, #2
 800850e:	2600      	movs	r6, #0
 8008510:	42a6      	cmp	r6, r4
 8008512:	d109      	bne.n	8008528 <__libc_init_array+0x24>
 8008514:	4d0b      	ldr	r5, [pc, #44]	; (8008544 <__libc_init_array+0x40>)
 8008516:	4c0c      	ldr	r4, [pc, #48]	; (8008548 <__libc_init_array+0x44>)
 8008518:	f000 f818 	bl	800854c <_init>
 800851c:	1b64      	subs	r4, r4, r5
 800851e:	10a4      	asrs	r4, r4, #2
 8008520:	2600      	movs	r6, #0
 8008522:	42a6      	cmp	r6, r4
 8008524:	d105      	bne.n	8008532 <__libc_init_array+0x2e>
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	f855 3b04 	ldr.w	r3, [r5], #4
 800852c:	4798      	blx	r3
 800852e:	3601      	adds	r6, #1
 8008530:	e7ee      	b.n	8008510 <__libc_init_array+0xc>
 8008532:	f855 3b04 	ldr.w	r3, [r5], #4
 8008536:	4798      	blx	r3
 8008538:	3601      	adds	r6, #1
 800853a:	e7f2      	b.n	8008522 <__libc_init_array+0x1e>
 800853c:	080085b4 	.word	0x080085b4
 8008540:	080085b4 	.word	0x080085b4
 8008544:	080085b4 	.word	0x080085b4
 8008548:	080085b8 	.word	0x080085b8

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
