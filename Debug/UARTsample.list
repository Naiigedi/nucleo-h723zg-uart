
UARTsample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006034  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006094  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  240000d0  080060f4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000308  080060f4  00020308  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132e1  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f7e  00000000  00000000  00033422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  00035fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032085  00000000  00000000  00036912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe78  00000000  00000000  00068997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00144db9  00000000  00000000  0007880f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003278  00000000  00000000  001bd5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001c0840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005fb4 	.word	0x08005fb4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005fb4 	.word	0x08005fb4

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b970 	b.w	8000614 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9e08      	ldr	r6, [sp, #32]
 8000352:	460d      	mov	r5, r1
 8000354:	4604      	mov	r4, r0
 8000356:	460f      	mov	r7, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4694      	mov	ip, r2
 8000360:	d965      	bls.n	800042e <__udivmoddi4+0xe2>
 8000362:	fab2 f382 	clz	r3, r2
 8000366:	b143      	cbz	r3, 800037a <__udivmoddi4+0x2e>
 8000368:	fa02 fc03 	lsl.w	ip, r2, r3
 800036c:	f1c3 0220 	rsb	r2, r3, #32
 8000370:	409f      	lsls	r7, r3
 8000372:	fa20 f202 	lsr.w	r2, r0, r2
 8000376:	4317      	orrs	r7, r2
 8000378:	409c      	lsls	r4, r3
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fa1f f58c 	uxth.w	r5, ip
 8000382:	fbb7 f1fe 	udiv	r1, r7, lr
 8000386:	0c22      	lsrs	r2, r4, #16
 8000388:	fb0e 7711 	mls	r7, lr, r1, r7
 800038c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000390:	fb01 f005 	mul.w	r0, r1, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x62>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a0:	f080 811c 	bcs.w	80005dc <__udivmoddi4+0x290>
 80003a4:	4290      	cmp	r0, r2
 80003a6:	f240 8119 	bls.w	80005dc <__udivmoddi4+0x290>
 80003aa:	3902      	subs	r1, #2
 80003ac:	4462      	add	r2, ip
 80003ae:	1a12      	subs	r2, r2, r0
 80003b0:	b2a4      	uxth	r4, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003be:	fb00 f505 	mul.w	r5, r0, r5
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d90a      	bls.n	80003dc <__udivmoddi4+0x90>
 80003c6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x294>
 80003d2:	42a5      	cmp	r5, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x294>
 80003d8:	4464      	add	r4, ip
 80003da:	3802      	subs	r0, #2
 80003dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11e      	cbz	r6, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40dc      	lsrs	r4, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	e9c6 4300 	strd	r4, r3, [r6]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0xbc>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f000 80ed 	beq.w	80005d6 <__udivmoddi4+0x28a>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	d149      	bne.n	80004a4 <__udivmoddi4+0x158>
 8000410:	42ab      	cmp	r3, r5
 8000412:	d302      	bcc.n	800041a <__udivmoddi4+0xce>
 8000414:	4282      	cmp	r2, r0
 8000416:	f200 80f8 	bhi.w	800060a <__udivmoddi4+0x2be>
 800041a:	1a84      	subs	r4, r0, r2
 800041c:	eb65 0203 	sbc.w	r2, r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	4617      	mov	r7, r2
 8000424:	2e00      	cmp	r6, #0
 8000426:	d0e2      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000428:	e9c6 4700 	strd	r4, r7, [r6]
 800042c:	e7df      	b.n	80003ee <__udivmoddi4+0xa2>
 800042e:	b902      	cbnz	r2, 8000432 <__udivmoddi4+0xe6>
 8000430:	deff      	udf	#255	; 0xff
 8000432:	fab2 f382 	clz	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 8090 	bne.w	800055c <__udivmoddi4+0x210>
 800043c:	1a8a      	subs	r2, r1, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f fe8c 	uxth.w	lr, ip
 8000446:	2101      	movs	r1, #1
 8000448:	fbb2 f5f7 	udiv	r5, r2, r7
 800044c:	fb07 2015 	mls	r0, r7, r5, r2
 8000450:	0c22      	lsrs	r2, r4, #16
 8000452:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000456:	fb0e f005 	mul.w	r0, lr, r5
 800045a:	4290      	cmp	r0, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x124>
 800045e:	eb1c 0202 	adds.w	r2, ip, r2
 8000462:	f105 38ff 	add.w	r8, r5, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x122>
 8000468:	4290      	cmp	r0, r2
 800046a:	f200 80cb 	bhi.w	8000604 <__udivmoddi4+0x2b8>
 800046e:	4645      	mov	r5, r8
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb2 f0f7 	udiv	r0, r2, r7
 8000478:	fb07 2210 	mls	r2, r7, r0, r2
 800047c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000480:	fb0e fe00 	mul.w	lr, lr, r0
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x14e>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	d202      	bcs.n	8000498 <__udivmoddi4+0x14c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f200 80bb 	bhi.w	800060e <__udivmoddi4+0x2c2>
 8000498:	4610      	mov	r0, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a2:	e79f      	b.n	80003e4 <__udivmoddi4+0x98>
 80004a4:	f1c1 0720 	rsb	r7, r1, #32
 80004a8:	408b      	lsls	r3, r1
 80004aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b2:	fa05 f401 	lsl.w	r4, r5, r1
 80004b6:	fa20 f307 	lsr.w	r3, r0, r7
 80004ba:	40fd      	lsrs	r5, r7
 80004bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c0:	4323      	orrs	r3, r4
 80004c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	fb09 5518 	mls	r5, r9, r8, r5
 80004ce:	0c1c      	lsrs	r4, r3, #16
 80004d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d4:	fb08 f50e 	mul.w	r5, r8, lr
 80004d8:	42a5      	cmp	r5, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	fa00 f001 	lsl.w	r0, r0, r1
 80004e2:	d90b      	bls.n	80004fc <__udivmoddi4+0x1b0>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ec:	f080 8088 	bcs.w	8000600 <__udivmoddi4+0x2b4>
 80004f0:	42a5      	cmp	r5, r4
 80004f2:	f240 8085 	bls.w	8000600 <__udivmoddi4+0x2b4>
 80004f6:	f1a8 0802 	sub.w	r8, r8, #2
 80004fa:	4464      	add	r4, ip
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	b29d      	uxth	r5, r3
 8000500:	fbb4 f3f9 	udiv	r3, r4, r9
 8000504:	fb09 4413 	mls	r4, r9, r3, r4
 8000508:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800050c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x1da>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f103 35ff 	add.w	r5, r3, #4294967295
 800051c:	d26c      	bcs.n	80005f8 <__udivmoddi4+0x2ac>
 800051e:	45a6      	cmp	lr, r4
 8000520:	d96a      	bls.n	80005f8 <__udivmoddi4+0x2ac>
 8000522:	3b02      	subs	r3, #2
 8000524:	4464      	add	r4, ip
 8000526:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052a:	fba3 9502 	umull	r9, r5, r3, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	42ac      	cmp	r4, r5
 8000534:	46c8      	mov	r8, r9
 8000536:	46ae      	mov	lr, r5
 8000538:	d356      	bcc.n	80005e8 <__udivmoddi4+0x29c>
 800053a:	d053      	beq.n	80005e4 <__udivmoddi4+0x298>
 800053c:	b156      	cbz	r6, 8000554 <__udivmoddi4+0x208>
 800053e:	ebb0 0208 	subs.w	r2, r0, r8
 8000542:	eb64 040e 	sbc.w	r4, r4, lr
 8000546:	fa04 f707 	lsl.w	r7, r4, r7
 800054a:	40ca      	lsrs	r2, r1
 800054c:	40cc      	lsrs	r4, r1
 800054e:	4317      	orrs	r7, r2
 8000550:	e9c6 7400 	strd	r7, r4, [r6]
 8000554:	4618      	mov	r0, r3
 8000556:	2100      	movs	r1, #0
 8000558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055c:	f1c3 0120 	rsb	r1, r3, #32
 8000560:	fa02 fc03 	lsl.w	ip, r2, r3
 8000564:	fa20 f201 	lsr.w	r2, r0, r1
 8000568:	fa25 f101 	lsr.w	r1, r5, r1
 800056c:	409d      	lsls	r5, r3
 800056e:	432a      	orrs	r2, r5
 8000570:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000574:	fa1f fe8c 	uxth.w	lr, ip
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1510 	mls	r5, r7, r0, r1
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000586:	fb00 f50e 	mul.w	r5, r0, lr
 800058a:	428d      	cmp	r5, r1
 800058c:	fa04 f403 	lsl.w	r4, r4, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x258>
 8000592:	eb1c 0101 	adds.w	r1, ip, r1
 8000596:	f100 38ff 	add.w	r8, r0, #4294967295
 800059a:	d22f      	bcs.n	80005fc <__udivmoddi4+0x2b0>
 800059c:	428d      	cmp	r5, r1
 800059e:	d92d      	bls.n	80005fc <__udivmoddi4+0x2b0>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	1b49      	subs	r1, r1, r5
 80005a6:	b292      	uxth	r2, r2
 80005a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80005ac:	fb07 1115 	mls	r1, r7, r5, r1
 80005b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b4:	fb05 f10e 	mul.w	r1, r5, lr
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x282>
 80005bc:	eb1c 0202 	adds.w	r2, ip, r2
 80005c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c4:	d216      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d914      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 80005ca:	3d02      	subs	r5, #2
 80005cc:	4462      	add	r2, ip
 80005ce:	1a52      	subs	r2, r2, r1
 80005d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d4:	e738      	b.n	8000448 <__udivmoddi4+0xfc>
 80005d6:	4631      	mov	r1, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xa2>
 80005dc:	4639      	mov	r1, r7
 80005de:	e6e6      	b.n	80003ae <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x90>
 80005e4:	4548      	cmp	r0, r9
 80005e6:	d2a9      	bcs.n	800053c <__udivmoddi4+0x1f0>
 80005e8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f0:	3b01      	subs	r3, #1
 80005f2:	e7a3      	b.n	800053c <__udivmoddi4+0x1f0>
 80005f4:	4645      	mov	r5, r8
 80005f6:	e7ea      	b.n	80005ce <__udivmoddi4+0x282>
 80005f8:	462b      	mov	r3, r5
 80005fa:	e794      	b.n	8000526 <__udivmoddi4+0x1da>
 80005fc:	4640      	mov	r0, r8
 80005fe:	e7d1      	b.n	80005a4 <__udivmoddi4+0x258>
 8000600:	46d0      	mov	r8, sl
 8000602:	e77b      	b.n	80004fc <__udivmoddi4+0x1b0>
 8000604:	3d02      	subs	r5, #2
 8000606:	4462      	add	r2, ip
 8000608:	e732      	b.n	8000470 <__udivmoddi4+0x124>
 800060a:	4608      	mov	r0, r1
 800060c:	e70a      	b.n	8000424 <__udivmoddi4+0xd8>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	e742      	b.n	800049a <__udivmoddi4+0x14e>

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fcf3 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f823 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f97f 	bl	8000928 <MX_GPIO_Init>
  MX_ETH_Init();
 800062a:	f000 f88f 	bl	800074c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800062e:	f000 f927 	bl	8000880 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000632:	f000 f971 	bl	8000918 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000636:	f000 f8d5 	bl	80007e4 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t msg[] = "hello world!\n\r";
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0x4c>)
 800063c:	463c      	mov	r4, r7
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	c407      	stmia	r4!, {r0, r1, r2}
 8000642:	8023      	strh	r3, [r4, #0]
 8000644:	3402      	adds	r4, #2
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart4, msg, strlen((char*)msg), 100);
 800064a:	463b      	mov	r3, r7
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fe5d 	bl	800030c <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	4639      	mov	r1, r7
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <main+0x50>)
 800065c:	f004 fa66 	bl	8004b2c <HAL_UART_Transmit>
  {
 8000660:	e7eb      	b.n	800063a <main+0x22>
 8000662:	bf00      	nop
 8000664:	08005fcc 	.word	0x08005fcc
 8000668:	240001d4 	.word	0x240001d4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	224c      	movs	r2, #76	; 0x4c
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fc6e 	bl	8005f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2220      	movs	r2, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fc68 	bl	8005f5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068c:	2002      	movs	r0, #2
 800068e:	f001 fc2b 	bl	8001ee8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <SystemClock_Config+0xdc>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <SystemClock_Config+0xdc>)
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xdc>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ae:	bf00      	nop
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xdc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006bc:	d1f8      	bne.n	80006b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006be:	2321      	movs	r3, #33	; 0x21
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006d8:	f240 1313 	movw	r3, #275	; 0x113
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006ea:	2304      	movs	r3, #4
 80006ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fc2e 	bl	8001f5c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 fa0b 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	233f      	movs	r3, #63	; 0x3f
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000716:	2308      	movs	r3, #8
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071e:	2340      	movs	r3, #64	; 0x40
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2103      	movs	r1, #3
 8000730:	4618      	mov	r0, r3
 8000732:	f001 ffed 	bl	8002710 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800073c:	f000 f9f0 	bl	8000b20 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3770      	adds	r7, #112	; 0x70
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024800 	.word	0x58024800

0800074c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ETH_Init+0x80>)
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_ETH_Init+0x84>)
 8000754:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ETH_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ETH_Init+0x88>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ETH_Init+0x88>)
 8000764:	22e1      	movs	r2, #225	; 0xe1
 8000766:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ETH_Init+0x88>)
 800076a:	2200      	movs	r2, #0
 800076c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ETH_Init+0x88>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ETH_Init+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ETH_Init+0x80>)
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_ETH_Init+0x88>)
 800077e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ETH_Init+0x80>)
 8000782:	2201      	movs	r2, #1
 8000784:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ETH_Init+0x80>)
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_ETH_Init+0x8c>)
 800078a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ETH_Init+0x80>)
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_ETH_Init+0x90>)
 8000790:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_ETH_Init+0x80>)
 8000794:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000798:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_ETH_Init+0x80>)
 800079c:	f000 fdbe 	bl	800131c <HAL_ETH_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 f9bb 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007aa:	2238      	movs	r2, #56	; 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_ETH_Init+0x94>)
 80007b0:	f005 fbd4 	bl	8005f5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_ETH_Init+0x94>)
 80007b6:	2221      	movs	r2, #33	; 0x21
 80007b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_ETH_Init+0x94>)
 80007bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_ETH_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000124 	.word	0x24000124
 80007d0:	40028000 	.word	0x40028000
 80007d4:	240002fc 	.word	0x240002fc
 80007d8:	24000070 	.word	0x24000070
 80007dc:	24000010 	.word	0x24000010
 80007e0:	240000ec 	.word	0x240000ec

080007e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_UART4_Init+0x94>)
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <MX_UART4_Init+0x98>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_UART4_Init+0x94>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_UART4_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_UART4_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_UART4_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_UART4_Init+0x94>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_UART4_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_UART4_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_UART4_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_UART4_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_UART4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LIN_Init(&huart4, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_UART4_Init+0x94>)
 8000830:	f004 f90c 	bl	8004a4c <HAL_LIN_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800083a:	f000 f971 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_UART4_Init+0x94>)
 8000842:	f005 fac0 	bl	8005dc6 <HAL_UARTEx_SetTxFifoThreshold>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 800084c:	f000 f968 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <MX_UART4_Init+0x94>)
 8000854:	f005 faf5 	bl	8005e42 <HAL_UARTEx_SetRxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800085e:	f000 f95f 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_UART4_Init+0x94>)
 8000864:	f005 fa76 	bl	8005d54 <HAL_UARTEx_DisableFifoMode>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 f957 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	240001d4 	.word	0x240001d4
 800087c:	40004c00 	.word	0x40004c00

08000880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_USART3_UART_Init+0x90>)
 8000886:	4a23      	ldr	r2, [pc, #140]	; (8000914 <MX_USART3_UART_Init+0x94>)
 8000888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_USART3_UART_Init+0x90>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008ca:	f004 f86f 	bl	80049ac <HAL_UART_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f924 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008dc:	f005 fa73 	bl	8005dc6 <HAL_UARTEx_SetTxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 f91b 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008ee:	f005 faa8 	bl	8005e42 <HAL_UARTEx_SetRxFifoThreshold>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f912 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_USART3_UART_Init+0x90>)
 80008fe:	f005 fa29 	bl	8005d54 <HAL_UARTEx_DisableFifoMode>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000908:	f000 f90a 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	24000268 	.word	0x24000268
 8000914:	40004800 	.word	0x40004800

08000918 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b71      	ldr	r3, [pc, #452]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a6f      	ldr	r2, [pc, #444]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b6d      	ldr	r3, [pc, #436]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095c:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b62      	ldr	r3, [pc, #392]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a60      	ldr	r2, [pc, #384]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b5e      	ldr	r3, [pc, #376]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b5a      	ldr	r3, [pc, #360]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a51      	ldr	r2, [pc, #324]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a42      	ldr	r2, [pc, #264]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_GPIO_Init+0x1dc>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a16:	483c      	ldr	r0, [pc, #240]	; (8000b08 <MX_GPIO_Init+0x1e0>)
 8000a18:	f001 fa4c 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a22:	483a      	ldr	r0, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x1e4>)
 8000a24:	f001 fa46 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4838      	ldr	r0, [pc, #224]	; (8000b10 <MX_GPIO_Init+0x1e8>)
 8000a2e:	f001 fa41 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4833      	ldr	r0, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x1ec>)
 8000a48:	f001 f88c 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4828      	ldr	r0, [pc, #160]	; (8000b08 <MX_GPIO_Init+0x1e0>)
 8000a66:	f001 f87d 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <MX_GPIO_Init+0x1e4>)
 8000a84:	f001 f86e 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481e      	ldr	r0, [pc, #120]	; (8000b18 <MX_GPIO_Init+0x1f0>)
 8000a9e:	f001 f861 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0x1f4>)
 8000ab8:	f001 f854 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ace:	230a      	movs	r3, #10
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_GPIO_Init+0x1f4>)
 8000ada:	f001 f843 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x1e8>)
 8000af6:	f001 f835 	bl	8001b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58020400 	.word	0x58020400
 8000b0c:	58020c00 	.word	0x58020c00
 8000b10:	58021000 	.word	0x58021000
 8000b14:	58020800 	.word	0x58020800
 8000b18:	58021800 	.word	0x58021800
 8000b1c:	58020000 	.word	0x58020000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b38:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a59      	ldr	r2, [pc, #356]	; (8000ce4 <HAL_ETH_MspInit+0x184>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 80ab 	bne.w	8000cda <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8a:	4a57      	ldr	r2, [pc, #348]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b94:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9e:	623b      	str	r3, [r7, #32]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba8:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bc0:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc6:	4a48      	ldr	r2, [pc, #288]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a39      	ldr	r2, [pc, #228]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c56:	2332      	movs	r3, #50	; 0x32
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c66:	230b      	movs	r3, #11
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481e      	ldr	r0, [pc, #120]	; (8000cec <HAL_ETH_MspInit+0x18c>)
 8000c72:	f000 ff77 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c76:	2386      	movs	r3, #134	; 0x86
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_ETH_MspInit+0x190>)
 8000c92:	f000 ff67 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <HAL_ETH_MspInit+0x194>)
 8000cb4:	f000 ff56 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <HAL_ETH_MspInit+0x198>)
 8000cd6:	f000 ff45 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3738      	adds	r7, #56	; 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40028000 	.word	0x40028000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020800 	.word	0x58020800
 8000cf0:	58020000 	.word	0x58020000
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58021800 	.word	0x58021800

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ba      	sub	sp, #232	; 0xe8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	22b8      	movs	r2, #184	; 0xb8
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 f91d 	bl	8005f5c <memset>
  if(huart->Instance==UART4)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <HAL_UART_MspInit+0x160>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d147      	bne.n	8000dbc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d2c:	f04f 0202 	mov.w	r2, #2
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 f870 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d4e:	f7ff fee7 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d52:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d58:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000da8:	2308      	movs	r3, #8
 8000daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000db2:	4619      	mov	r1, r3
 8000db4:	482b      	ldr	r0, [pc, #172]	; (8000e64 <HAL_UART_MspInit+0x168>)
 8000db6:	f000 fed5 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dba:	e04b      	b.n	8000e54 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_UART_MspInit+0x16c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d146      	bne.n	8000e54 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc6:	f04f 0202 	mov.w	r2, #2
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 f823 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000de8:	f7ff fe9a 	bl	8000b20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df2:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x164>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e42:	2307      	movs	r3, #7
 8000e44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <HAL_UART_MspInit+0x170>)
 8000e50:	f000 fe88 	bl	8001b64 <HAL_GPIO_Init>
}
 8000e54:	bf00      	nop
 8000e56:	37e8      	adds	r7, #232	; 0xe8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40004c00 	.word	0x40004c00
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58020800 	.word	0x58020800
 8000e68:	40004800 	.word	0x40004800
 8000e6c:	58020c00 	.word	0x58020c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f916 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <SystemInit+0xd0>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <SystemInit+0xd0>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <SystemInit+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d807      	bhi.n	8000ef4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <SystemInit+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	4a2a      	ldr	r2, [pc, #168]	; (8000f98 <SystemInit+0xd4>)
 8000eee:	f043 0307 	orr.w	r3, r3, #7
 8000ef2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <SystemInit+0xd8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <SystemInit+0xd8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <SystemInit+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <SystemInit+0xd8>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4924      	ldr	r1, [pc, #144]	; (8000f9c <SystemInit+0xd8>)
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <SystemInit+0xdc>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <SystemInit+0xd4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <SystemInit+0xd4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 030f 	bic.w	r3, r3, #15
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SystemInit+0xd4>)
 8000f28:	f043 0307 	orr.w	r3, r3, #7
 8000f2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <SystemInit+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <SystemInit+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <SystemInit+0xd8>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <SystemInit+0xe0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <SystemInit+0xd8>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <SystemInit+0xe4>)
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <SystemInit+0xd8>)
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <SystemInit+0xe8>)
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <SystemInit+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <SystemInit+0xd8>)
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <SystemInit+0xe8>)
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <SystemInit+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <SystemInit+0xd8>)
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <SystemInit+0xe8>)
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <SystemInit+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <SystemInit+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <SystemInit+0xd8>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <SystemInit+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <SystemInit+0xec>)
 8000f84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	52002000 	.word	0x52002000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fa4:	02020200 	.word	0x02020200
 8000fa8:	01ff0000 	.word	0x01ff0000
 8000fac:	01010280 	.word	0x01010280
 8000fb0:	52004000 	.word	0x52004000

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff ff84 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f004 ffc3 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fb17 	bl	8000618 <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff8:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 8000ffc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001000:	24000308 	.word	0x24000308

08001004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f952 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001014:	f001 fd32 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f814 	bl	8001080 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fd63 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	08005fdc 	.word	0x08005fdc
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f929 	bl	8001302 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f901 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24000008 	.word	0x24000008

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2400000c 	.word	0x2400000c
 8001110:	24000304 	.word	0x24000304

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	24000304 	.word	0x24000304

0800112c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800113c:	4904      	ldr	r1, [pc, #16]	; (8001150 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	58000400 	.word	0x58000400

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	4313      	orrs	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x40>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	05fa0000 	.word	0x05fa0000

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff47 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff5e 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffb2 	bl	8001274 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0cf      	b.n	80014ce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2223      	movs	r2, #35	; 0x23
 800133c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fc0d 	bl	8000b60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <HAL_ETH_Init+0x1bc>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	4a62      	ldr	r2, [pc, #392]	; (80014d8 <HAL_ETH_Init+0x1bc>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_ETH_Init+0x1bc>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7a1b      	ldrb	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fedd 	bl	800112c <HAL_SYSCFG_ETHInterfaceSelect>
 8001372:	e003      	b.n	800137c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001374:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001378:	f7ff fed8 	bl	800112c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_ETH_Init+0x1c0>)
 800137e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001398:	f7ff febc 	bl	8001114 <HAL_GetTick>
 800139c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800139e:	e011      	b.n	80013c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a0:	f7ff feb8 	bl	8001114 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ae:	d909      	bls.n	80013c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	22e0      	movs	r2, #224	; 0xe0
 80013bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e084      	b.n	80014ce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1e4      	bne.n	80013a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f886 	bl	80014e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013dc:	f001 fcc8 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <HAL_ETH_Init+0x1c4>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9a      	lsrs	r2, r3, #18
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3a01      	subs	r2, #1
 80013f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa71 	bl	80018dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001402:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001406:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001416:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	22e0      	movs	r2, #224	; 0xe0
 8001432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e049      	b.n	80014ce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_ETH_Init+0x1c8>)
 8001448:	4013      	ands	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6952      	ldr	r2, [r2, #20]
 800144e:	0051      	lsls	r1, r2, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800145a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fad9 	bl	8001a16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fb1f 	bl	8001aa8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	3305      	adds	r3, #5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	021a      	lsls	r2, r3, #8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	3303      	adds	r3, #3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	061a      	lsls	r2, r3, #24
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	3302      	adds	r3, #2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014b6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2210      	movs	r2, #16
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58000400 	.word	0x58000400
 80014e0:	431bde83 	.word	0x431bde83
 80014e4:	ffff8001 	.word	0xffff8001

080014e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001500:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001502:	f001 fc35 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8001506:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d908      	bls.n	8001522 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d804      	bhi.n	8001522 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e027      	b.n	8001572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d908      	bls.n	800153c <HAL_ETH_SetMDIOClockRange+0x54>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d204      	bcs.n	800153c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e01a      	b.n	8001572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d303      	bcc.n	800154c <HAL_ETH_SetMDIOClockRange+0x64>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d911      	bls.n	8001570 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d908      	bls.n	8001566 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d804      	bhi.n	8001566 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e005      	b.n	8001572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e000      	b.n	8001572 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001570:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	01312cff 	.word	0x01312cff
 8001588:	02160ebf 	.word	0x02160ebf
 800158c:	03938700 	.word	0x03938700
 8001590:	05f5e0ff 	.word	0x05f5e0ff
 8001594:	08f0d17f 	.word	0x08f0d17f

08001598 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
 80015b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	7b5b      	ldrb	r3, [r3, #13]
 80015c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7b9b      	ldrb	r3, [r3, #14]
 80015c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	7bdb      	ldrb	r3, [r3, #15]
 80015d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	7c12      	ldrb	r2, [r2, #16]
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d102      	bne.n	80015e2 <ETH_SetMACConfig+0x4a>
 80015dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015e0:	e000      	b.n	80015e4 <ETH_SetMACConfig+0x4c>
 80015e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	7c52      	ldrb	r2, [r2, #17]
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d102      	bne.n	80015f4 <ETH_SetMACConfig+0x5c>
 80015ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f2:	e000      	b.n	80015f6 <ETH_SetMACConfig+0x5e>
 80015f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	7c9b      	ldrb	r3, [r3, #18]
 80015fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001604:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800160a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	7f1b      	ldrb	r3, [r3, #28]
 8001610:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	7f5b      	ldrb	r3, [r3, #29]
 8001618:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800161a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	7f92      	ldrb	r2, [r2, #30]
 8001620:	2a00      	cmp	r2, #0
 8001622:	d102      	bne.n	800162a <ETH_SetMACConfig+0x92>
 8001624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001628:	e000      	b.n	800162c <ETH_SetMACConfig+0x94>
 800162a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800162c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7fdb      	ldrb	r3, [r3, #31]
 8001632:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001634:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	f892 2020 	ldrb.w	r2, [r2, #32]
 800163c:	2a00      	cmp	r2, #0
 800163e:	d102      	bne.n	8001646 <ETH_SetMACConfig+0xae>
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	e000      	b.n	8001648 <ETH_SetMACConfig+0xb0>
 8001646:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001648:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800164e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001656:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001658:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <ETH_SetMACConfig+0x22c>)
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	430b      	orrs	r3, r1
 8001674:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001682:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001684:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800168e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001696:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001698:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d102      	bne.n	80016aa <ETH_SetMACConfig+0x112>
 80016a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a8:	e000      	b.n	80016ac <ETH_SetMACConfig+0x114>
 80016aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <ETH_SetMACConfig+0x230>)
 80016be:	4013      	ands	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <ETH_SetMACConfig+0x234>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001702:	2a00      	cmp	r2, #0
 8001704:	d101      	bne.n	800170a <ETH_SetMACConfig+0x172>
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	e000      	b.n	800170c <ETH_SetMACConfig+0x174>
 800170a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800170c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001712:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001714:	4313      	orrs	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800171e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001722:	4013      	ands	r3, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	430b      	orrs	r3, r1
 800172c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001734:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800173c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	f023 0103 	bic.w	r1, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	430a      	orrs	r2, r1
 8001756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001762:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800177e:	2a00      	cmp	r2, #0
 8001780:	d101      	bne.n	8001786 <ETH_SetMACConfig+0x1ee>
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	e000      	b.n	8001788 <ETH_SetMACConfig+0x1f0>
 8001786:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001788:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001790:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800179a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800179c:	4313      	orrs	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80017a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	00048083 	.word	0x00048083
 80017c8:	c0f88000 	.word	0xc0f88000
 80017cc:	fffffef0 	.word	0xfffffef0

080017d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <ETH_SetDMAConfig+0xf8>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001802:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	7b1b      	ldrb	r3, [r3, #12]
 8001808:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <ETH_SetDMAConfig+0xfc>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	430b      	orrs	r3, r1
 8001824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001828:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	7b5b      	ldrb	r3, [r3, #13]
 800182e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <ETH_SetDMAConfig+0x100>)
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	430b      	orrs	r3, r1
 8001850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001854:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	7d1b      	ldrb	r3, [r3, #20]
 8001860:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7f5b      	ldrb	r3, [r3, #29]
 8001868:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <ETH_SetDMAConfig+0x104>)
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	430b      	orrs	r3, r1
 8001886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	7f1b      	ldrb	r3, [r3, #28]
 8001892:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <ETH_SetDMAConfig+0x108>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	ffff87fd 	.word	0xffff87fd
 80018cc:	ffff2ffe 	.word	0xffff2ffe
 80018d0:	fffec000 	.word	0xfffec000
 80018d4:	ffc0efef 	.word	0xffc0efef
 80018d8:	7fc0ffff 	.word	0x7fc0ffff

080018dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0a4      	sub	sp, #144	; 0x90
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018ea:	2300      	movs	r3, #0
 80018ec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001924:	2300      	movs	r3, #0
 8001926:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001934:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001938:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001956:	2300      	movs	r3, #0
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800195a:	2300      	movs	r3, #0
 800195c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800195e:	2300      	movs	r3, #0
 8001960:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001974:	2320      	movs	r3, #32
 8001976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800197a:	2301      	movs	r3, #1
 800197c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001986:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800198c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019b6:	2300      	movs	r3, #0
 80019b8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fde6 	bl	8001598 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019d0:	2301      	movs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fee1 	bl	80017d0 <ETH_SetDMAConfig>
}
 8001a0e:	bf00      	nop
 8001a10:	3790      	adds	r7, #144	; 0x90
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e01d      	b.n	8001a60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68d9      	ldr	r1, [r3, #12]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	3206      	adds	r2, #6
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d9de      	bls.n	8001a24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	461a      	mov	r2, r3
 8001a76:	2303      	movs	r3, #3
 8001a78:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e023      	b.n	8001afe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6919      	ldr	r1, [r3, #16]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	3212      	adds	r2, #18
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d9d8      	bls.n	8001ab6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <HAL_GPIO_Init+0x228>)
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b76:	e18c      	b.n	8001e92 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 817e 	beq.w	8001e8c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x44>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	69b9      	ldr	r1, [r7, #24]
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0203 	and.w	r2, r3, #3
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80d8 	beq.w	8001e8c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x22c>)
 8001cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_GPIO_Init+0x22c>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x22c>)
 8001cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfa:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_GPIO_Init+0x230>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x234>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d04a      	beq.n	8001dbc <HAL_GPIO_Init+0x258>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_GPIO_Init+0x238>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_GPIO_Init+0x23c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <HAL_GPIO_Init+0x240>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x244>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x248>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x24c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_GPIO_Init+0x250>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_GPIO_Init+0x254>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d66:	2309      	movs	r3, #9
 8001d68:	e029      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	e027      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e025      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e023      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e021      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e01f      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e01d      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e01b      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e019      	b.n	8001dbe <HAL_GPIO_Init+0x25a>
 8001d8a:	bf00      	nop
 8001d8c:	58000080 	.word	0x58000080
 8001d90:	58024400 	.word	0x58024400
 8001d94:	58000400 	.word	0x58000400
 8001d98:	58020000 	.word	0x58020000
 8001d9c:	58020400 	.word	0x58020400
 8001da0:	58020800 	.word	0x58020800
 8001da4:	58020c00 	.word	0x58020c00
 8001da8:	58021000 	.word	0x58021000
 8001dac:	58021400 	.word	0x58021400
 8001db0:	58021800 	.word	0x58021800
 8001db4:	58021c00 	.word	0x58021c00
 8001db8:	58022400 	.word	0x58022400
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f002 0203 	and.w	r2, r2, #3
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	4093      	lsls	r3, r2
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dce:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <HAL_GPIO_Init+0x34c>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f ae6b 	bne.w	8001b78 <HAL_GPIO_Init+0x14>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	3724      	adds	r7, #36	; 0x24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	58000400 	.word	0x58000400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	619a      	str	r2, [r3, #24]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_PWREx_ConfigSupply+0x70>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d00a      	beq.n	8001f12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_PWREx_ConfigSupply+0x70>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d001      	beq.n	8001f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e01f      	b.n	8001f4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e01d      	b.n	8001f4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_PWREx_ConfigSupply+0x70>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	490f      	ldr	r1, [pc, #60]	; (8001f58 <HAL_PWREx_ConfigSupply+0x70>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f22:	f7ff f8f7 	bl	8001114 <HAL_GetTick>
 8001f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f28:	e009      	b.n	8001f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f2a:	f7ff f8f3 	bl	8001114 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f38:	d901      	bls.n	8001f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e007      	b.n	8001f4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_PWREx_ConfigSupply+0x70>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58024800 	.word	0x58024800

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e3c8      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f86:	4b86      	ldr	r3, [pc, #536]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d007      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46>
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	2b18      	cmp	r3, #24
 8001f96:	d110      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x12c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e3a2      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x76>
 8001fc4:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a75      	ldr	r2, [pc, #468]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b71      	ldr	r3, [pc, #452]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a70      	ldr	r2, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6d      	ldr	r2, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xbc>
 8001ffe:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b65      	ldr	r3, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a64      	ldr	r2, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5d      	ldr	r2, [pc, #372]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f86c 	bl	8001114 <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff f868 	bl	8001114 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e356      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002052:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe4>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f858 	bl	8001114 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff f854 	bl	8001114 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e342      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207a:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x10c>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 808c 	beq.w	80021b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_RCC_OscConfig+0x162>
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2b18      	cmp	r3, #24
 80020b2:	d137      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c8>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d132      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x17a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e314      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0219 	bic.w	r2, r3, #25
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	492f      	ldr	r1, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f814 	bl	8001114 <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff f810 	bl	8001114 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e2fe      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	061b      	lsls	r3, r3, #24
 800211c:	4920      	ldr	r1, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002122:	e045      	b.n	80021b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d026      	beq.n	800217a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0219 	bic.w	r2, r3, #25
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4919      	ldr	r1, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe ffe9 	bl	8001114 <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe ffe5 	bl	8001114 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e2d3      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	490b      	ldr	r1, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e01a      	b.n	80021b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ffc5 	bl	8001114 <HAL_GetTick>
 800218a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe ffc1 	bl	8001114 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d903      	bls.n	80021a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e2af      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
 80021a0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021a4:	4b96      	ldr	r3, [pc, #600]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06a      	beq.n	8002292 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021bc:	4b90      	ldr	r3, [pc, #576]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021c6:	4b8e      	ldr	r3, [pc, #568]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d007      	beq.n	80021e2 <HAL_RCC_OscConfig+0x286>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b18      	cmp	r3, #24
 80021d6:	d11b      	bne.n	8002210 <HAL_RCC_OscConfig+0x2b4>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d116      	bne.n	8002210 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021e2:	4b87      	ldr	r3, [pc, #540]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x29e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e282      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021fa:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	061b      	lsls	r3, r3, #24
 8002208:	497d      	ldr	r1, [pc, #500]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800220e:	e040      	b.n	8002292 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d023      	beq.n	8002260 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002218:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a78      	ldr	r2, [pc, #480]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800221e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe ff76 	bl	8001114 <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800222c:	f7fe ff72 	bl	8001114 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e260      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800223e:	4b70      	ldr	r3, [pc, #448]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800224a:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	4969      	ldr	r1, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	60cb      	str	r3, [r1, #12]
 800225e:	e018      	b.n	8002292 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002260:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe ff52 	bl	8001114 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002274:	f7fe ff4e 	bl	8001114 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e23c      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002286:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d036      	beq.n	800230c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b56      	ldr	r3, [pc, #344]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80022a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022aa:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe ff2f 	bl	8001114 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ba:	f7fe ff2b 	bl	8001114 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e219      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x35e>
 80022d8:	e018      	b.n	800230c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	4a48      	ldr	r2, [pc, #288]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe ff15 	bl	8001114 <HAL_GetTick>
 80022ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7fe ff11 	bl	8001114 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1ff      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d036      	beq.n	8002386 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d019      	beq.n	8002354 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800232c:	f7fe fef2 	bl	8001114 <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002334:	f7fe feee 	bl	8001114 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1dc      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x3d8>
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a29      	ldr	r2, [pc, #164]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800235a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800235e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002360:	f7fe fed8 	bl	8001114 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002368:	f7fe fed4 	bl	8001114 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1c2      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8086 	beq.w	80024a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a0:	f7fe feb8 	bl	8001114 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe feb4 	bl	8001114 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1a2      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x480>
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	e032      	b.n	8002442 <HAL_RCC_OscConfig+0x4e6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x4ac>
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a02      	ldr	r2, [pc, #8]	; (8002400 <HAL_RCC_OscConfig+0x4a4>)
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e021      	b.n	8002442 <HAL_RCC_OscConfig+0x4e6>
 80023fe:	bf00      	nop
 8002400:	58024400 	.word	0x58024400
 8002404:	58024800 	.word	0x58024800
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x4ce>
 8002410:	4b83      	ldr	r3, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a82      	ldr	r2, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b80      	ldr	r3, [pc, #512]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a7f      	ldr	r2, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x4e6>
 800242a:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a7c      	ldr	r2, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a79      	ldr	r2, [pc, #484]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fe63 	bl	8001114 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fe5f 	bl	8001114 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e14b      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x4f6>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fe4d 	bl	8001114 <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fe49 	bl	8001114 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e135      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002494:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 812a 	beq.w	80026fe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	f000 80ba 	beq.w	800262c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b02      	cmp	r3, #2
 80024be:	f040 8095 	bne.w	80025ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fe21 	bl	8001114 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fe1d 	bl	8001114 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e10b      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80024f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x6c8>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	4945      	ldr	r1, [pc, #276]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	628b      	str	r3, [r1, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	3b01      	subs	r3, #1
 8002514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	3b01      	subs	r3, #1
 800251e:	025b      	lsls	r3, r3, #9
 8002520:	b29b      	uxth	r3, r3
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	3b01      	subs	r3, #1
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800253e:	4938      	ldr	r1, [pc, #224]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	4a35      	ldr	r2, [pc, #212]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCC_OscConfig+0x6cc>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800255c:	00d2      	lsls	r2, r2, #3
 800255e:	4930      	ldr	r1, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f023 020c 	bic.w	r2, r3, #12
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	492b      	ldr	r1, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f023 0202 	bic.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4927      	ldr	r1, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fda6 	bl	8001114 <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fda2 	bl	8001114 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e090      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x670>
 80025ea:	e088      	b.n	80026fe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 80025f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fd8c 	bl	8001114 <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe fd88 	bl	8001114 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e076      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002612:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_RCC_OscConfig+0x6c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x6a4>
 800261e:	e06e      	b.n	80026fe <HAL_RCC_OscConfig+0x7a2>
 8002620:	58024400 	.word	0x58024400
 8002624:	fffffc0c 	.word	0xfffffc0c
 8002628:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	2b01      	cmp	r3, #1
 800263e:	d031      	beq.n	80026a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d12a      	bne.n	80026a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d122      	bne.n	80026a4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d11a      	bne.n	80026a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0a5b      	lsrs	r3, r3, #9
 8002672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d111      	bne.n	80026a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0e1b      	lsrs	r3, r3, #24
 8002696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e02b      	b.n	8002700 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d01f      	beq.n	80026fe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ca:	f7fe fd23 	bl	8001114 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026d0:	bf00      	nop
 80026d2:	f7fe fd1f 	bl	8001114 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	4293      	cmp	r3, r2
 80026dc:	d0f9      	beq.n	80026d2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_RCC_OscConfig+0x7b0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026ea:	00d2      	lsls	r2, r2, #3
 80026ec:	4906      	ldr	r1, [pc, #24]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCC_OscConfig+0x7ac>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3730      	adds	r7, #48	; 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	58024400 	.word	0x58024400
 800270c:	ffff0007 	.word	0xffff0007

08002710 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e19c      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b8a      	ldr	r3, [pc, #552]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d910      	bls.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 020f 	bic.w	r2, r3, #15
 800273a:	4985      	ldr	r1, [pc, #532]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b83      	ldr	r3, [pc, #524]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e184      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276c:	429a      	cmp	r2, r3
 800276e:	d908      	bls.n	8002782 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4975      	ldr	r1, [pc, #468]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 800277e:	4313      	orrs	r3, r2
 8002780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800279a:	429a      	cmp	r2, r3
 800279c:	d908      	bls.n	80027b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	496a      	ldr	r1, [pc, #424]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d908      	bls.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027cc:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	495e      	ldr	r1, [pc, #376]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d908      	bls.n	800280c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027fa:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4953      	ldr	r1, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002808:	4313      	orrs	r3, r2
 800280a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	429a      	cmp	r2, r3
 8002826:	d908      	bls.n	800283a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f023 020f 	bic.w	r2, r3, #15
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4947      	ldr	r1, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002836:	4313      	orrs	r3, r2
 8002838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d055      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4940      	ldr	r1, [pc, #256]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002854:	4313      	orrs	r3, r2
 8002856:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d107      	bne.n	8002870 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d121      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0f6      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d115      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0ea      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0de      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0d6      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f023 0207 	bic.w	r2, r3, #7
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4925      	ldr	r1, [pc, #148]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c2:	f7fe fc27 	bl	8001114 <HAL_GetTick>
 80028c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ca:	f7fe fc23 	bl	8001114 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0be      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d1eb      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	429a      	cmp	r2, r3
 800290c:	d208      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	490e      	ldr	r1, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x244>)
 800291c:	4313      	orrs	r3, r2
 800291e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d214      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 020f 	bic.w	r2, r3, #15
 8002936:	4906      	ldr	r1, [pc, #24]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_RCC_ClockConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e086      	b.n	8002a5e <HAL_RCC_ClockConfig+0x34e>
 8002950:	52002000 	.word	0x52002000
 8002954:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d010      	beq.n	8002986 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002970:	429a      	cmp	r2, r3
 8002972:	d208      	bcs.n	8002986 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002974:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4939      	ldr	r1, [pc, #228]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002982:	4313      	orrs	r3, r2
 8002984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800299e:	429a      	cmp	r2, r3
 80029a0:	d208      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	492e      	ldr	r1, [pc, #184]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d010      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d208      	bcs.n	80029e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029d0:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4922      	ldr	r1, [pc, #136]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d010      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d208      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029fe:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4917      	ldr	r1, [pc, #92]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a10:	f000 f834 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	4912      	ldr	r1, [pc, #72]	; (8002a6c <HAL_RCC_ClockConfig+0x35c>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_RCC_ClockConfig+0x358>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_RCC_ClockConfig+0x35c>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_RCC_ClockConfig+0x360>)
 8002a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x364>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x368>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fb14 	bl	8001080 <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	08005fdc 	.word	0x08005fdc
 8002a70:	24000004 	.word	0x24000004
 8002a74:	24000000 	.word	0x24000000
 8002a78:	24000008 	.word	0x24000008

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a82:	4bb3      	ldr	r3, [pc, #716]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a8a:	2b18      	cmp	r3, #24
 8002a8c:	f200 8155 	bhi.w	8002d3a <HAL_RCC_GetSysClockFreq+0x2be>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002afd 	.word	0x08002afd
 8002a9c:	08002d3b 	.word	0x08002d3b
 8002aa0:	08002d3b 	.word	0x08002d3b
 8002aa4:	08002d3b 	.word	0x08002d3b
 8002aa8:	08002d3b 	.word	0x08002d3b
 8002aac:	08002d3b 	.word	0x08002d3b
 8002ab0:	08002d3b 	.word	0x08002d3b
 8002ab4:	08002d3b 	.word	0x08002d3b
 8002ab8:	08002b23 	.word	0x08002b23
 8002abc:	08002d3b 	.word	0x08002d3b
 8002ac0:	08002d3b 	.word	0x08002d3b
 8002ac4:	08002d3b 	.word	0x08002d3b
 8002ac8:	08002d3b 	.word	0x08002d3b
 8002acc:	08002d3b 	.word	0x08002d3b
 8002ad0:	08002d3b 	.word	0x08002d3b
 8002ad4:	08002d3b 	.word	0x08002d3b
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002d3b 	.word	0x08002d3b
 8002ae0:	08002d3b 	.word	0x08002d3b
 8002ae4:	08002d3b 	.word	0x08002d3b
 8002ae8:	08002d3b 	.word	0x08002d3b
 8002aec:	08002d3b 	.word	0x08002d3b
 8002af0:	08002d3b 	.word	0x08002d3b
 8002af4:	08002d3b 	.word	0x08002d3b
 8002af8:	08002b2f 	.word	0x08002b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002afc:	4b94      	ldr	r3, [pc, #592]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b08:	4b91      	ldr	r3, [pc, #580]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	4a90      	ldr	r2, [pc, #576]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
 8002b18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b1a:	e111      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b1c:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b1e:	61bb      	str	r3, [r7, #24]
      break;
 8002b20:	e10e      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b22:	4b8d      	ldr	r3, [pc, #564]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b24:	61bb      	str	r3, [r7, #24]
      break;
 8002b26:	e10b      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b28:	4b8c      	ldr	r3, [pc, #560]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b2a:	61bb      	str	r3, [r7, #24]
      break;
 8002b2c:	e108      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b2e:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b38:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b44:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b4e:	4b80      	ldr	r3, [pc, #512]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80e1 	beq.w	8002d34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	f000 8083 	beq.w	8002c80 <HAL_RCC_GetSysClockFreq+0x204>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	f200 80a1 	bhi.w	8002cc4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x114>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d056      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b8e:	e099      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02d      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	08db      	lsrs	r3, r3, #3
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	4a6b      	ldr	r2, [pc, #428]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc6:	4b62      	ldr	r3, [pc, #392]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bf6:	e087      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002d64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c3a:	e065      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c7e:	e043      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ca6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cc2:	e021      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	0a5b      	lsrs	r3, r3, #9
 8002d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d12:	3301      	adds	r3, #1
 8002d14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d2c:	ee17 3a90 	vmov	r3, s15
 8002d30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
      break;
 8002d38:	e002      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d3c:	61bb      	str	r3, [r7, #24]
      break;
 8002d3e:	bf00      	nop
  }

  return sysclockfreq;
 8002d40:	69bb      	ldr	r3, [r7, #24]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	58024400 	.word	0x58024400
 8002d54:	03d09000 	.word	0x03d09000
 8002d58:	003d0900 	.word	0x003d0900
 8002d5c:	007a1200 	.word	0x007a1200
 8002d60:	46000000 	.word	0x46000000
 8002d64:	4c742400 	.word	0x4c742400
 8002d68:	4a742400 	.word	0x4a742400
 8002d6c:	4af42400 	.word	0x4af42400

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d76:	f7ff fe81 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	490f      	ldr	r1, [pc, #60]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	08005fdc 	.word	0x08005fdc
 8002dc8:	24000004 	.word	0x24000004
 8002dcc:	24000000 	.word	0x24000000

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002dd4:	f7ff ffcc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4904      	ldr	r1, [pc, #16]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400
 8002df8:	08005fdc 	.word	0x08005fdc

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e00:	f7ff ffb6 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400
 8002e24:	08005fdc 	.word	0x08005fdc

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0c6      	sub	sp, #280	; 0x118
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	ea54 0305 	orrs.w	r3, r4, r5
 8002e52:	d049      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e5e:	d02f      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e64:	d828      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6a:	d01a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e70:	d822      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7a:	d007      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e7e:	4bab      	ldr	r3, [pc, #684]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	4aaa      	ldr	r2, [pc, #680]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e8a:	e01a      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e90:	3308      	adds	r3, #8
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fc25 	bl	80046e4 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fccc 	bl	8004848 <RCCEx_PLL3_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002eca:	4b98      	ldr	r3, [pc, #608]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ed8:	4a94      	ldr	r2, [pc, #592]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eda:	430b      	orrs	r3, r1
 8002edc:	6513      	str	r3, [r2, #80]	; 0x50
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002ef4:	f04f 0900 	mov.w	r9, #0
 8002ef8:	ea58 0309 	orrs.w	r3, r8, r9
 8002efc:	d047      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d82a      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f25 	.word	0x08002f25
 8002f14:	08002f33 	.word	0x08002f33
 8002f18:	08002f49 	.word	0x08002f49
 8002f1c:	08002f67 	.word	0x08002f67
 8002f20:	08002f67 	.word	0x08002f67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	4a80      	ldr	r2, [pc, #512]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f30:	e01a      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f36:	3308      	adds	r3, #8
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fbd2 	bl	80046e4 <RCCEx_PLL2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f46:	e00f      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f4c:	3328      	adds	r3, #40	; 0x28
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 fc79 	bl	8004848 <RCCEx_PLL3_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f5c:	e004      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f64:	e000      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f70:	4b6e      	ldr	r3, [pc, #440]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	f023 0107 	bic.w	r1, r3, #7
 8002f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a6b      	ldr	r2, [pc, #428]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6513      	str	r3, [r2, #80]	; 0x50
 8002f84:	e003      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002f9a:	f04f 0b00 	mov.w	fp, #0
 8002f9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fa2:	d05b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002fb0:	d03b      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002fb2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002fb6:	d834      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fbc:	d037      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc2:	d82e      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002fc8:	d033      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002fca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002fce:	d828      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d01a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fda:	d822      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002fe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe4:	d007      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002fe6:	e01c      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	4a4f      	ldr	r2, [pc, #316]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ff4:	e01e      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 fb70 	bl	80046e4 <RCCEx_PLL2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800300a:	e013      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003010:	3328      	adds	r3, #40	; 0x28
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fc17 	bl	8004848 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003034:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800304c:	4a37      	ldr	r2, [pc, #220]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800304e:	430b      	orrs	r3, r1
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
 8003052:	e003      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003058:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800305c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003072:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d05d      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003080:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003084:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003088:	d03b      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800308a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800308e:	d834      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003094:	d037      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309a:	d82e      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800309c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a0:	d033      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80030a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a6:	d828      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ac:	d01a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80030ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b2:	d822      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80030b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030bc:	d007      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80030be:	e01c      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	4a19      	ldr	r2, [pc, #100]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030cc:	e01e      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030d2:	3308      	adds	r3, #8
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fb04 	bl	80046e4 <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80030e2:	e013      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030e8:	3328      	adds	r3, #40	; 0x28
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 fbab 	bl	8004848 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003100:	e004      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800310a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800311c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003124:	4a01      	ldr	r2, [pc, #4]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003126:	430b      	orrs	r3, r1
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
 800312a:	e005      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800312c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003134:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800314e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003152:	460b      	mov	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	d03a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d01f      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	d819      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003166:	2b20      	cmp	r3, #32
 8003168:	d00c      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800316a:	2b20      	cmp	r3, #32
 800316c:	d815      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003172:	2b10      	cmp	r3, #16
 8003174:	d111      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003176:	4baa      	ldr	r3, [pc, #680]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	4aa9      	ldr	r2, [pc, #676]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003182:	e011      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003188:	3308      	adds	r3, #8
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f001 faa9 	bl	80046e4 <RCCEx_PLL2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031b0:	4b9b      	ldr	r3, [pc, #620]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031be:	4a98      	ldr	r2, [pc, #608]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80031da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031e8:	460b      	mov	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	d051      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80031ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f8:	d035      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80031fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031fe:	d82e      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003200:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003204:	d031      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003206:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800320a:	d828      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	d01a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	d822      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	d007      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003222:	e01c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003224:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003230:	e01c      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003236:	3308      	adds	r3, #8
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fa52 	bl	80046e4 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003246:	e011      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800324c:	3328      	adds	r3, #40	; 0x28
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 faf9 	bl	8004848 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800325c:	e006      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003264:	e002      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800326a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800327c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003284:	430b      	orrs	r3, r1
 8003286:	6513      	str	r3, [r2, #80]	; 0x50
 8003288:	e003      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800328e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800329e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032a2:	2300      	movs	r3, #0
 80032a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	d053      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032bc:	d033      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80032be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c2:	d82c      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80032c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c8:	d02f      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80032ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ce:	d826      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80032d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032d4:	d02b      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80032d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032da:	d820      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d012      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80032e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e6:	d81a      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d022      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d115      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032f6:	3308      	adds	r3, #8
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f9f2 	bl	80046e4 <RCCEx_PLL2_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003306:	e015      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800330c:	3328      	adds	r3, #40	; 0x28
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fa99 	bl	8004848 <RCCEx_PLL3_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003324:	e006      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003326:	bf00      	nop
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	4a35      	ldr	r2, [pc, #212]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6513      	str	r3, [r2, #80]	; 0x50
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800335a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003370:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d058      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800337a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800337e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d033      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338c:	d82c      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d02f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d826      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800339a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800339e:	d02b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80033a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033a4:	d820      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033aa:	d012      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80033ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b0:	d81a      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d022      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ba:	d115      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c0:	3308      	adds	r3, #8
 80033c2:	2101      	movs	r1, #1
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f98d 	bl	80046e4 <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033d6:	3328      	adds	r3, #40	; 0x28
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 fa34 	bl	8004848 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033e6:	e00a      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033ee:	e006      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033f0:	bf00      	nop
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003416:	4a02      	ldr	r2, [pc, #8]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003428:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800342c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003442:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	d037      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800344c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003456:	d00e      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345c:	d816      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d018      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003466:	d111      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003468:	4bc4      	ldr	r3, [pc, #784]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4ac3      	ldr	r2, [pc, #780]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003474:	e00f      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800347a:	3308      	adds	r3, #8
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f930 	bl	80046e4 <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800348a:	e004      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003496:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800349e:	4bb7      	ldr	r3, [pc, #732]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ac:	4ab3      	ldr	r2, [pc, #716]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6513      	str	r3, [r2, #80]	; 0x50
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d039      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d81c      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003529 	.word	0x08003529
 80034f0:	080034fd 	.word	0x080034fd
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	08003529 	.word	0x08003529
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b9f      	ldr	r3, [pc, #636]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a9e      	ldr	r2, [pc, #632]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003508:	e00f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800350e:	3308      	adds	r3, #8
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f8e6 	bl	80046e4 <RCCEx_PLL2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003532:	4b92      	ldr	r3, [pc, #584]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	f023 0103 	bic.w	r1, r3, #3
 800353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	4a8e      	ldr	r2, [pc, #568]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003542:	430b      	orrs	r3, r1
 8003544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800354c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800355c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800356a:	460b      	mov	r3, r1
 800356c:	4313      	orrs	r3, r2
 800356e:	f000 8099 	beq.w	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003572:	4b83      	ldr	r3, [pc, #524]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a82      	ldr	r2, [pc, #520]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357e:	f7fd fdc9 	bl	8001114 <HAL_GetTick>
 8003582:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003586:	e00b      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fd fdc4 	bl	8001114 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d903      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800359e:	e005      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035a0:	4b77      	ldr	r3, [pc, #476]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ed      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80035ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d173      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035b4:	4b71      	ldr	r3, [pc, #452]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035c0:	4053      	eors	r3, r2
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d015      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d6:	4b69      	ldr	r3, [pc, #420]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a68      	ldr	r2, [pc, #416]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e2:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035ee:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d118      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fd86 	bl	8001114 <HAL_GetTick>
 8003608:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800360c:	e00d      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fd81 	bl	8001114 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003618:	1ad2      	subs	r2, r2, r3
 800361a:	f241 3388 	movw	r3, #5000	; 0x1388
 800361e:	429a      	cmp	r2, r3
 8003620:	d903      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003628:	e005      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0eb      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800363a:	2b00      	cmp	r3, #0
 800363c:	d129      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d10e      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800365c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003660:	091a      	lsrs	r2, r3, #4
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003664:	4013      	ands	r3, r2
 8003666:	4a45      	ldr	r2, [pc, #276]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003668:	430b      	orrs	r3, r1
 800366a:	6113      	str	r3, [r2, #16]
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003674:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003678:	6113      	str	r3, [r2, #16]
 800367a:	4b40      	ldr	r3, [pc, #256]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800368c:	430b      	orrs	r3, r1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	e008      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003692:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003696:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 0301 	and.w	r3, r2, #1
 80036b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80036ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f000 808f 	beq.w	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036cc:	2b28      	cmp	r3, #40	; 0x28
 80036ce:	d871      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080037bd 	.word	0x080037bd
 80036dc:	080037b5 	.word	0x080037b5
 80036e0:	080037b5 	.word	0x080037b5
 80036e4:	080037b5 	.word	0x080037b5
 80036e8:	080037b5 	.word	0x080037b5
 80036ec:	080037b5 	.word	0x080037b5
 80036f0:	080037b5 	.word	0x080037b5
 80036f4:	080037b5 	.word	0x080037b5
 80036f8:	08003789 	.word	0x08003789
 80036fc:	080037b5 	.word	0x080037b5
 8003700:	080037b5 	.word	0x080037b5
 8003704:	080037b5 	.word	0x080037b5
 8003708:	080037b5 	.word	0x080037b5
 800370c:	080037b5 	.word	0x080037b5
 8003710:	080037b5 	.word	0x080037b5
 8003714:	080037b5 	.word	0x080037b5
 8003718:	0800379f 	.word	0x0800379f
 800371c:	080037b5 	.word	0x080037b5
 8003720:	080037b5 	.word	0x080037b5
 8003724:	080037b5 	.word	0x080037b5
 8003728:	080037b5 	.word	0x080037b5
 800372c:	080037b5 	.word	0x080037b5
 8003730:	080037b5 	.word	0x080037b5
 8003734:	080037b5 	.word	0x080037b5
 8003738:	080037bd 	.word	0x080037bd
 800373c:	080037b5 	.word	0x080037b5
 8003740:	080037b5 	.word	0x080037b5
 8003744:	080037b5 	.word	0x080037b5
 8003748:	080037b5 	.word	0x080037b5
 800374c:	080037b5 	.word	0x080037b5
 8003750:	080037b5 	.word	0x080037b5
 8003754:	080037b5 	.word	0x080037b5
 8003758:	080037bd 	.word	0x080037bd
 800375c:	080037b5 	.word	0x080037b5
 8003760:	080037b5 	.word	0x080037b5
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037b5 	.word	0x080037b5
 800376c:	080037b5 	.word	0x080037b5
 8003770:	080037b5 	.word	0x080037b5
 8003774:	080037b5 	.word	0x080037b5
 8003778:	080037bd 	.word	0x080037bd
 800377c:	58024400 	.word	0x58024400
 8003780:	58024800 	.word	0x58024800
 8003784:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800378c:	3308      	adds	r3, #8
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ffa7 	bl	80046e4 <RCCEx_PLL2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800379c:	e00f      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a2:	3328      	adds	r3, #40	; 0x28
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f84e 	bl	8004848 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037c6:	4bbf      	ldr	r3, [pc, #764]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d4:	4abb      	ldr	r2, [pc, #748]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6553      	str	r3, [r2, #84]	; 0x54
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f002 0302 	and.w	r3, r2, #2
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	d041      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	2b05      	cmp	r3, #5
 800380c:	d824      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003861 	.word	0x08003861
 8003818:	0800382d 	.word	0x0800382d
 800381c:	08003843 	.word	0x08003843
 8003820:	08003861 	.word	0x08003861
 8003824:	08003861 	.word	0x08003861
 8003828:	08003861 	.word	0x08003861
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800382c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003830:	3308      	adds	r3, #8
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f000 ff55 	bl	80046e4 <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003840:	e00f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003846:	3328      	adds	r3, #40	; 0x28
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fffc 	bl	8004848 <RCCEx_PLL3_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800386a:	4b96      	ldr	r3, [pc, #600]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f023 0107 	bic.w	r1, r3, #7
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	4a92      	ldr	r2, [pc, #584]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6553      	str	r3, [r2, #84]	; 0x54
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003884:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 0304 	and.w	r3, r2, #4
 8003894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800389e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d044      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d825      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	08003909 	.word	0x08003909
 80038c0:	080038d5 	.word	0x080038d5
 80038c4:	080038eb 	.word	0x080038eb
 80038c8:	08003909 	.word	0x08003909
 80038cc:	08003909 	.word	0x08003909
 80038d0:	08003909 	.word	0x08003909
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d8:	3308      	adds	r3, #8
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ff01 	bl	80046e4 <RCCEx_PLL2_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038e8:	e00f      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ee:	3328      	adds	r3, #40	; 0x28
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 ffa8 	bl	8004848 <RCCEx_PLL3_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	f023 0107 	bic.w	r1, r3, #7
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	4a68      	ldr	r2, [pc, #416]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003924:	430b      	orrs	r3, r1
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
 8003928:	e003      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800392e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f002 0320 	and.w	r3, r2, #32
 800393e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003948:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800394c:	460b      	mov	r3, r1
 800394e:	4313      	orrs	r3, r2
 8003950:	d055      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800395a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800395e:	d033      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003964:	d82c      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d02f      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d826      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003976:	d02b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800397c:	d820      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003982:	d012      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003988:	d81a      	bhi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d022      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003992:	d115      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003998:	3308      	adds	r3, #8
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fea1 	bl	80046e4 <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039a8:	e015      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ae:	3328      	adds	r3, #40	; 0x28
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 ff48 	bl	8004848 <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039be:	e00a      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039c6:	e006      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80039c8:	bf00      	nop
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80039cc:	bf00      	nop
 80039ce:	e002      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80039d0:	bf00      	nop
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ee:	4a35      	ldr	r2, [pc, #212]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6553      	str	r3, [r2, #84]	; 0x54
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	d058      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a2a:	d033      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003a2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a30:	d82c      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d02f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d826      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a42:	d02b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a48:	d820      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d012      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a54:	d81a      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d022      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d115      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a64:	3308      	adds	r3, #8
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fe3b 	bl	80046e4 <RCCEx_PLL2_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a74:	e015      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7a:	3328      	adds	r3, #40	; 0x28
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fee2 	bl	8004848 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a92:	e006      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a94:	bf00      	nop
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a98:	bf00      	nop
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a9c:	bf00      	nop
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aba:	4a02      	ldr	r2, [pc, #8]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003acc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ae6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d055      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003afc:	d033      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003afe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b02:	d82c      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d02f      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d826      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b14:	d02b      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003b16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b1a:	d820      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b20:	d012      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b26:	d81a      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b30:	d115      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b36:	3308      	adds	r3, #8
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fdd2 	bl	80046e4 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b46:	e015      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b4c:	3328      	adds	r3, #40	; 0x28
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe79 	bl	8004848 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003b66:	bf00      	nop
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b7c:	4ba0      	ldr	r3, [pc, #640]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8c:	4a9c      	ldr	r2, [pc, #624]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	6593      	str	r3, [r2, #88]	; 0x58
 8003b92:	e003      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f002 0308 	and.w	r3, r2, #8
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	d01e      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bce:	3328      	adds	r3, #40	; 0x28
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fe38 	bl	8004848 <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003be4:	4b86      	ldr	r3, [pc, #536]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf4:	4a82      	ldr	r2, [pc, #520]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f002 0310 	and.w	r3, r2, #16
 8003c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d01e      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2c:	3328      	adds	r3, #40	; 0x28
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fe09 	bl	8004848 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c42:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	4a6b      	ldr	r2, [pc, #428]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c66:	2300      	movs	r3, #0
 8003c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d03e      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c80:	d022      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c86:	d81b      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	d00b      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003c92:	e015      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c98:	3308      	adds	r3, #8
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd21 	bl	80046e4 <RCCEx_PLL2_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ca8:	e00f      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cae:	3328      	adds	r3, #40	; 0x28
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fdc8 	bl	8004848 <RCCEx_PLL3_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cbe:	e004      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd2:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ce2:	4a47      	ldr	r2, [pc, #284]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003d00:	2300      	movs	r3, #0
 8003d02:	677b      	str	r3, [r7, #116]	; 0x74
 8003d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	d03b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d1a:	d01f      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d20:	d818      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d26:	d003      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d007      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d30:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d3c:	e00f      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d42:	3328      	adds	r3, #40	; 0x28
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd7e 	bl	8004848 <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6553      	str	r3, [r2, #84]	; 0x54
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d94:	2300      	movs	r3, #0
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d034      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d007      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003db2:	e011      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fc8a 	bl	80046e4 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2c:	3328      	adds	r3, #40	; 0x28
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fd09 	bl	8004848 <RCCEx_PLL3_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e50:	2300      	movs	r3, #0
 8003e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e54:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e68:	d018      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6e:	d811      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e74:	d014      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7a:	d80b      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e84:	d106      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e86:	4bb7      	ldr	r3, [pc, #732]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	4ab6      	ldr	r2, [pc, #728]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e92:	e008      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eae:	4bad      	ldr	r3, [pc, #692]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebc:	4aa9      	ldr	r2, [pc, #676]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8003eda:	2300      	movs	r3, #0
 8003edc:	657b      	str	r3, [r7, #84]	; 0x54
 8003ede:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee8:	4b9e      	ldr	r3, [pc, #632]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a9b      	ldr	r2, [pc, #620]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f18:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f26:	4a8f      	ldr	r2, [pc, #572]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003f38:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f48:	4b86      	ldr	r3, [pc, #536]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4a85      	ldr	r2, [pc, #532]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f52:	6113      	str	r3, [r2, #16]
 8003f54:	4b83      	ldr	r3, [pc, #524]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f56:	6919      	ldr	r1, [r3, #16]
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f74:	2300      	movs	r3, #0
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f82:	4b78      	ldr	r3, [pc, #480]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	4a74      	ldr	r2, [pc, #464]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003fac:	460b      	mov	r3, r1
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fb2:	4b6c      	ldr	r3, [pc, #432]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d011      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe8:	3308      	adds	r3, #8
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fb79 	bl	80046e4 <RCCEx_PLL2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004004:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	2100      	movs	r1, #0
 8004012:	6239      	str	r1, [r7, #32]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d011      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004028:	3308      	adds	r3, #8
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fb59 	bl	80046e4 <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004038:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	2100      	movs	r1, #0
 8004052:	61b9      	str	r1, [r7, #24]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d011      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004068:	3308      	adds	r3, #8
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fb39 	bl	80046e4 <RCCEx_PLL2_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004084:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	2100      	movs	r1, #0
 8004092:	6139      	str	r1, [r7, #16]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d011      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a8:	3328      	adds	r3, #40	; 0x28
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fbcb 	bl	8004848 <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80040b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	2100      	movs	r1, #0
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d011      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e8:	3328      	adds	r3, #40	; 0x28
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fbab 	bl	8004848 <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80040f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004104:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	2100      	movs	r1, #0
 8004112:	6039      	str	r1, [r7, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d011      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004128:	3328      	adds	r3, #40	; 0x28
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fb8b 	bl	8004848 <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004148:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
}
 8004156:	4618      	mov	r0, r3
 8004158:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400

08004168 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800416c:	f7fe fe00 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4904      	ldr	r1, [pc, #16]	; (8004190 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	58024400 	.word	0x58024400
 8004190:	08005fdc 	.word	0x08005fdc

08004194 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800419c:	4ba1      	ldr	r3, [pc, #644]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80041a6:	4b9f      	ldr	r3, [pc, #636]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	0b1b      	lsrs	r3, r3, #12
 80041ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041b2:	4b9c      	ldr	r3, [pc, #624]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80041be:	4b99      	ldr	r3, [pc, #612]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8111 	beq.w	8004404 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	f000 8083 	beq.w	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f200 80a1 	bhi.w	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d056      	beq.n	80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80041fe:	e099      	b.n	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004200:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02d      	beq.n	8004268 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800420c:	4b85      	ldr	r3, [pc, #532]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	4a84      	ldr	r2, [pc, #528]	; (8004428 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004236:	4b7b      	ldr	r3, [pc, #492]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	ed97 6a03 	vldr	s12, [r7, #12]
 800424a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800424e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800425a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004266:	e087      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a03 	vldr	s12, [r7, #12]
 800428e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042aa:	e065      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ee:	e043      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a45 	vldr	s11, [pc, #276]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004332:	e021      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800442c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004376:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004378:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	0a5b      	lsrs	r3, r3, #9
 800437e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004392:	edd7 6a07 	vldr	s13, [r7, #28]
 8004396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800439a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439e:	ee17 2a90 	vmov	r2, s15
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80043a6:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043cc:	ee17 2a90 	vmov	r2, s15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80043d4:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	0e1b      	lsrs	r3, r3, #24
 80043da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fa:	ee17 2a90 	vmov	r2, s15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	03d09000 	.word	0x03d09000
 800442c:	46000000 	.word	0x46000000
 8004430:	4c742400 	.word	0x4c742400
 8004434:	4a742400 	.word	0x4a742400
 8004438:	4af42400 	.word	0x4af42400

0800443c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004444:	4ba1      	ldr	r3, [pc, #644]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800444e:	4b9f      	ldr	r3, [pc, #636]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800445a:	4b9c      	ldr	r3, [pc, #624]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004466:	4b99      	ldr	r3, [pc, #612]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8111 	beq.w	80046ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f000 8083 	beq.w	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f200 80a1 	bhi.w	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d056      	beq.n	8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044a6:	e099      	b.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a8:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d02d      	beq.n	8004510 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044b4:	4b85      	ldr	r3, [pc, #532]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	4a84      	ldr	r2, [pc, #528]	; (80046d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	4b7b      	ldr	r3, [pc, #492]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80044f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800450e:	e087      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a03 	vldr	s12, [r7, #12]
 8004536:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004552:	e065      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a03 	vldr	s12, [r7, #12]
 800457a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004596:	e043      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b48      	ldr	r3, [pc, #288]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045da:	e021      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	0a5b      	lsrs	r3, r3, #9
 8004626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800463a:	edd7 6a07 	vldr	s13, [r7, #28]
 800463e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004646:	ee17 2a90 	vmov	r2, s15
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004668:	edd7 6a07 	vldr	s13, [r7, #28]
 800466c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004674:	ee17 2a90 	vmov	r2, s15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800467c:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004692:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004696:	edd7 6a07 	vldr	s13, [r7, #28]
 800469a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a2:	ee17 2a90 	vmov	r2, s15
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046aa:	e008      	b.n	80046be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	609a      	str	r2, [r3, #8]
}
 80046be:	bf00      	nop
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	58024400 	.word	0x58024400
 80046d0:	03d09000 	.word	0x03d09000
 80046d4:	46000000 	.word	0x46000000
 80046d8:	4c742400 	.word	0x4c742400
 80046dc:	4a742400 	.word	0x4a742400
 80046e0:	4af42400 	.word	0x4af42400

080046e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046f2:	4b53      	ldr	r3, [pc, #332]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d101      	bne.n	8004702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e099      	b.n	8004836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004702:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4e      	ldr	r2, [pc, #312]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800470c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470e:	f7fc fd01 	bl	8001114 <HAL_GetTick>
 8004712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004714:	e008      	b.n	8004728 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004716:	f7fc fcfd 	bl	8001114 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e086      	b.n	8004836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004728:	4b45      	ldr	r3, [pc, #276]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004734:	4b42      	ldr	r3, [pc, #264]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	031b      	lsls	r3, r3, #12
 8004742:	493f      	ldr	r1, [pc, #252]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	628b      	str	r3, [r1, #40]	; 0x28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	3b01      	subs	r3, #1
 800474e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	3b01      	subs	r3, #1
 8004758:	025b      	lsls	r3, r3, #9
 800475a:	b29b      	uxth	r3, r3
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	3b01      	subs	r3, #1
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	3b01      	subs	r3, #1
 8004772:	061b      	lsls	r3, r3, #24
 8004774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004778:	4931      	ldr	r1, [pc, #196]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	492d      	ldr	r1, [pc, #180]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	f023 0220 	bic.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4928      	ldr	r1, [pc, #160]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047a2:	4b27      	ldr	r3, [pc, #156]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	4a26      	ldr	r2, [pc, #152]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	f023 0310 	bic.w	r3, r3, #16
 80047ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <RCCEx_PLL2_Config+0x160>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	69d2      	ldr	r2, [r2, #28]
 80047ba:	00d2      	lsls	r2, r2, #3
 80047bc:	4920      	ldr	r1, [pc, #128]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047c2:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047c8:	f043 0310 	orr.w	r3, r3, #16
 80047cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047e0:	e00f      	b.n	8004802 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047e8:	4b15      	ldr	r3, [pc, #84]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047f4:	e005      	b.n	8004802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 8004808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800480c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc fc81 	bl	8001114 <HAL_GetTick>
 8004812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004814:	e008      	b.n	8004828 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004816:	f7fc fc7d 	bl	8001114 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e006      	b.n	8004836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <RCCEx_PLL2_Config+0x15c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
 8004844:	ffff0007 	.word	0xffff0007

08004848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004856:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b03      	cmp	r3, #3
 8004860:	d101      	bne.n	8004866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e099      	b.n	800499a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004866:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fc fc4f 	bl	8001114 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004878:	e008      	b.n	800488c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800487a:	f7fc fc4b 	bl	8001114 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e086      	b.n	800499a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800488c:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	051b      	lsls	r3, r3, #20
 80048a6:	493f      	ldr	r1, [pc, #252]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	628b      	str	r3, [r1, #40]	; 0x28
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	025b      	lsls	r3, r3, #9
 80048be:	b29b      	uxth	r3, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	041b      	lsls	r3, r3, #16
 80048ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048dc:	4931      	ldr	r1, [pc, #196]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	492d      	ldr	r1, [pc, #180]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	4928      	ldr	r1, [pc, #160]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800490c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <RCCEx_PLL3_Config+0x160>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	69d2      	ldr	r2, [r2, #28]
 800491e:	00d2      	lsls	r2, r2, #3
 8004920:	4920      	ldr	r1, [pc, #128]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004938:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800493e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004944:	e00f      	b.n	8004966 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800494c:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004958:	e005      	b.n	8004966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004972:	f7fc fbcf 	bl	8001114 <HAL_GetTick>
 8004976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004978:	e008      	b.n	800498c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800497a:	f7fc fbcb 	bl	8001114 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e006      	b.n	800499a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <RCCEx_PLL3_Config+0x15c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	ffff0007 	.word	0xffff0007

080049ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e042      	b.n	8004a44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fc f993 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2224      	movs	r2, #36	; 0x24
 80049da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f92a 	bl	8004c48 <UART_SetConfig>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e022      	b.n	8004a44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ff8a 	bl	8005920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f001 f811 	bl	8005a64 <UART_CheckIdleState>
 8004a42:	4603      	mov	r3, r0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e061      	b.n	8004b24 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d101      	bne.n	8004a6e <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e05a      	b.n	8004b24 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e054      	b.n	8004b24 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc f935 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2224      	movs	r2, #36	; 0x24
 8004a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8cc 	bl	8004c48 <UART_SetConfig>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_LIN_Init+0x6e>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e034      	b.n	8004b24 <HAL_LIN_Init+0xd8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_LIN_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 ff2c 	bl	8005920 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae6:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af6:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f023 0120 	bic.w	r1, r3, #32
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 ffa1 	bl	8005a64 <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d17b      	bne.n	8004c3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_Transmit+0x26>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e074      	b.n	8004c40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	; 0x21
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b66:	f7fc fad5 	bl	8001114 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba0:	e030      	b.n	8004c04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 f803 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e03d      	b.n	8004c40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e007      	b.n	8004bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1c8      	bne.n	8004ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2140      	movs	r1, #64	; 0x40
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 ffcc 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b092      	sub	sp, #72	; 0x48
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4bbe      	ldr	r3, [pc, #760]	; (8004f70 <UART_SetConfig+0x328>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4ab3      	ldr	r2, [pc, #716]	; (8004f74 <UART_SetConfig+0x32c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	4baf      	ldr	r3, [pc, #700]	; (8004f78 <UART_SetConfig+0x330>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	f023 010f 	bic.w	r1, r3, #15
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4aa6      	ldr	r2, [pc, #664]	; (8004f7c <UART_SetConfig+0x334>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d177      	bne.n	8004dd8 <UART_SetConfig+0x190>
 8004ce8:	4ba5      	ldr	r3, [pc, #660]	; (8004f80 <UART_SetConfig+0x338>)
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf0:	2b28      	cmp	r3, #40	; 0x28
 8004cf2:	d86d      	bhi.n	8004dd0 <UART_SetConfig+0x188>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xb4>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004da1 	.word	0x08004da1
 8004d00:	08004dd1 	.word	0x08004dd1
 8004d04:	08004dd1 	.word	0x08004dd1
 8004d08:	08004dd1 	.word	0x08004dd1
 8004d0c:	08004dd1 	.word	0x08004dd1
 8004d10:	08004dd1 	.word	0x08004dd1
 8004d14:	08004dd1 	.word	0x08004dd1
 8004d18:	08004dd1 	.word	0x08004dd1
 8004d1c:	08004da9 	.word	0x08004da9
 8004d20:	08004dd1 	.word	0x08004dd1
 8004d24:	08004dd1 	.word	0x08004dd1
 8004d28:	08004dd1 	.word	0x08004dd1
 8004d2c:	08004dd1 	.word	0x08004dd1
 8004d30:	08004dd1 	.word	0x08004dd1
 8004d34:	08004dd1 	.word	0x08004dd1
 8004d38:	08004dd1 	.word	0x08004dd1
 8004d3c:	08004db1 	.word	0x08004db1
 8004d40:	08004dd1 	.word	0x08004dd1
 8004d44:	08004dd1 	.word	0x08004dd1
 8004d48:	08004dd1 	.word	0x08004dd1
 8004d4c:	08004dd1 	.word	0x08004dd1
 8004d50:	08004dd1 	.word	0x08004dd1
 8004d54:	08004dd1 	.word	0x08004dd1
 8004d58:	08004dd1 	.word	0x08004dd1
 8004d5c:	08004db9 	.word	0x08004db9
 8004d60:	08004dd1 	.word	0x08004dd1
 8004d64:	08004dd1 	.word	0x08004dd1
 8004d68:	08004dd1 	.word	0x08004dd1
 8004d6c:	08004dd1 	.word	0x08004dd1
 8004d70:	08004dd1 	.word	0x08004dd1
 8004d74:	08004dd1 	.word	0x08004dd1
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004dc1 	.word	0x08004dc1
 8004d80:	08004dd1 	.word	0x08004dd1
 8004d84:	08004dd1 	.word	0x08004dd1
 8004d88:	08004dd1 	.word	0x08004dd1
 8004d8c:	08004dd1 	.word	0x08004dd1
 8004d90:	08004dd1 	.word	0x08004dd1
 8004d94:	08004dd1 	.word	0x08004dd1
 8004d98:	08004dd1 	.word	0x08004dd1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e326      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dae:	e322      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db6:	e31e      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e31a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e316      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004dc8:	2340      	movs	r3, #64	; 0x40
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e312      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e30e      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <UART_SetConfig+0x33c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d130      	bne.n	8004e44 <UART_SetConfig+0x1fc>
 8004de2:	4b67      	ldr	r3, [pc, #412]	; (8004f80 <UART_SetConfig+0x338>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d826      	bhi.n	8004e3c <UART_SetConfig+0x1f4>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x1ac>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e2f0      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e2ec      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e22:	e2e8      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2a:	e2e4      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e2e0      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e2dc      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e2d8      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a4f      	ldr	r2, [pc, #316]	; (8004f88 <UART_SetConfig+0x340>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d130      	bne.n	8004eb0 <UART_SetConfig+0x268>
 8004e4e:	4b4c      	ldr	r3, [pc, #304]	; (8004f80 <UART_SetConfig+0x338>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d826      	bhi.n	8004ea8 <UART_SetConfig+0x260>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x218>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e89 	.word	0x08004e89
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e99 	.word	0x08004e99
 8004e74:	08004ea1 	.word	0x08004ea1
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7e:	e2ba      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e2b6      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e2b2      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e2ae      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e2aa      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e2a6      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eae:	e2a2      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a35      	ldr	r2, [pc, #212]	; (8004f8c <UART_SetConfig+0x344>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d130      	bne.n	8004f1c <UART_SetConfig+0x2d4>
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <UART_SetConfig+0x338>)
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b05      	cmp	r3, #5
 8004ec4:	d826      	bhi.n	8004f14 <UART_SetConfig+0x2cc>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x284>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ee5 	.word	0x08004ee5
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	08004ef5 	.word	0x08004ef5
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f0d 	.word	0x08004f0d
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e284      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e280      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e27c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e278      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f04:	2320      	movs	r3, #32
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e274      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e270      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e26c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <UART_SetConfig+0x348>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d142      	bne.n	8004fac <UART_SetConfig+0x364>
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <UART_SetConfig+0x338>)
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d838      	bhi.n	8004fa4 <UART_SetConfig+0x35c>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x2f0>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f51 	.word	0x08004f51
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	08004f61 	.word	0x08004f61
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f95 	.word	0x08004f95
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e24e      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e24a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e246      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e242      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f70:	cfff69f3 	.word	0xcfff69f3
 8004f74:	58000c00 	.word	0x58000c00
 8004f78:	11fff4ff 	.word	0x11fff4ff
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	58024400 	.word	0x58024400
 8004f84:	40004400 	.word	0x40004400
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	40004c00 	.word	0x40004c00
 8004f90:	40005000 	.word	0x40005000
 8004f94:	2320      	movs	r3, #32
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e22c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004f9c:	2340      	movs	r3, #64	; 0x40
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e228      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004fa4:	2380      	movs	r3, #128	; 0x80
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e224      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4ab1      	ldr	r2, [pc, #708]	; (8005278 <UART_SetConfig+0x630>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d176      	bne.n	80050a4 <UART_SetConfig+0x45c>
 8004fb6:	4bb1      	ldr	r3, [pc, #708]	; (800527c <UART_SetConfig+0x634>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fbe:	2b28      	cmp	r3, #40	; 0x28
 8004fc0:	d86c      	bhi.n	800509c <UART_SetConfig+0x454>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x380>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	0800506d 	.word	0x0800506d
 8004fcc:	0800509d 	.word	0x0800509d
 8004fd0:	0800509d 	.word	0x0800509d
 8004fd4:	0800509d 	.word	0x0800509d
 8004fd8:	0800509d 	.word	0x0800509d
 8004fdc:	0800509d 	.word	0x0800509d
 8004fe0:	0800509d 	.word	0x0800509d
 8004fe4:	0800509d 	.word	0x0800509d
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	0800509d 	.word	0x0800509d
 8004ff0:	0800509d 	.word	0x0800509d
 8004ff4:	0800509d 	.word	0x0800509d
 8004ff8:	0800509d 	.word	0x0800509d
 8004ffc:	0800509d 	.word	0x0800509d
 8005000:	0800509d 	.word	0x0800509d
 8005004:	0800509d 	.word	0x0800509d
 8005008:	0800507d 	.word	0x0800507d
 800500c:	0800509d 	.word	0x0800509d
 8005010:	0800509d 	.word	0x0800509d
 8005014:	0800509d 	.word	0x0800509d
 8005018:	0800509d 	.word	0x0800509d
 800501c:	0800509d 	.word	0x0800509d
 8005020:	0800509d 	.word	0x0800509d
 8005024:	0800509d 	.word	0x0800509d
 8005028:	08005085 	.word	0x08005085
 800502c:	0800509d 	.word	0x0800509d
 8005030:	0800509d 	.word	0x0800509d
 8005034:	0800509d 	.word	0x0800509d
 8005038:	0800509d 	.word	0x0800509d
 800503c:	0800509d 	.word	0x0800509d
 8005040:	0800509d 	.word	0x0800509d
 8005044:	0800509d 	.word	0x0800509d
 8005048:	0800508d 	.word	0x0800508d
 800504c:	0800509d 	.word	0x0800509d
 8005050:	0800509d 	.word	0x0800509d
 8005054:	0800509d 	.word	0x0800509d
 8005058:	0800509d 	.word	0x0800509d
 800505c:	0800509d 	.word	0x0800509d
 8005060:	0800509d 	.word	0x0800509d
 8005064:	0800509d 	.word	0x0800509d
 8005068:	08005095 	.word	0x08005095
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e1c0      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e1bc      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e1b8      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e1b4      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e1b0      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e1ac      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e1a8      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a75      	ldr	r2, [pc, #468]	; (8005280 <UART_SetConfig+0x638>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d130      	bne.n	8005110 <UART_SetConfig+0x4c8>
 80050ae:	4b73      	ldr	r3, [pc, #460]	; (800527c <UART_SetConfig+0x634>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d826      	bhi.n	8005108 <UART_SetConfig+0x4c0>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x478>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e18a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e186      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e182      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e17e      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e17a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e176      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e172      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <UART_SetConfig+0x63c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d130      	bne.n	800517c <UART_SetConfig+0x534>
 800511a:	4b58      	ldr	r3, [pc, #352]	; (800527c <UART_SetConfig+0x634>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	2b05      	cmp	r3, #5
 8005124:	d826      	bhi.n	8005174 <UART_SetConfig+0x52c>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0x4e4>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005145 	.word	0x08005145
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005155 	.word	0x08005155
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005165 	.word	0x08005165
 8005140:	0800516d 	.word	0x0800516d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e154      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e150      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e14c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e148      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005164:	2320      	movs	r3, #32
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e144      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e140      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e13c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a41      	ldr	r2, [pc, #260]	; (8005288 <UART_SetConfig+0x640>)
 8005182:	4293      	cmp	r3, r2
 8005184:	f040 8082 	bne.w	800528c <UART_SetConfig+0x644>
 8005188:	4b3c      	ldr	r3, [pc, #240]	; (800527c <UART_SetConfig+0x634>)
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005190:	2b28      	cmp	r3, #40	; 0x28
 8005192:	d86d      	bhi.n	8005270 <UART_SetConfig+0x628>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x554>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	08005241 	.word	0x08005241
 80051a0:	08005271 	.word	0x08005271
 80051a4:	08005271 	.word	0x08005271
 80051a8:	08005271 	.word	0x08005271
 80051ac:	08005271 	.word	0x08005271
 80051b0:	08005271 	.word	0x08005271
 80051b4:	08005271 	.word	0x08005271
 80051b8:	08005271 	.word	0x08005271
 80051bc:	08005249 	.word	0x08005249
 80051c0:	08005271 	.word	0x08005271
 80051c4:	08005271 	.word	0x08005271
 80051c8:	08005271 	.word	0x08005271
 80051cc:	08005271 	.word	0x08005271
 80051d0:	08005271 	.word	0x08005271
 80051d4:	08005271 	.word	0x08005271
 80051d8:	08005271 	.word	0x08005271
 80051dc:	08005251 	.word	0x08005251
 80051e0:	08005271 	.word	0x08005271
 80051e4:	08005271 	.word	0x08005271
 80051e8:	08005271 	.word	0x08005271
 80051ec:	08005271 	.word	0x08005271
 80051f0:	08005271 	.word	0x08005271
 80051f4:	08005271 	.word	0x08005271
 80051f8:	08005271 	.word	0x08005271
 80051fc:	08005259 	.word	0x08005259
 8005200:	08005271 	.word	0x08005271
 8005204:	08005271 	.word	0x08005271
 8005208:	08005271 	.word	0x08005271
 800520c:	08005271 	.word	0x08005271
 8005210:	08005271 	.word	0x08005271
 8005214:	08005271 	.word	0x08005271
 8005218:	08005271 	.word	0x08005271
 800521c:	08005261 	.word	0x08005261
 8005220:	08005271 	.word	0x08005271
 8005224:	08005271 	.word	0x08005271
 8005228:	08005271 	.word	0x08005271
 800522c:	08005271 	.word	0x08005271
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
 8005238:	08005271 	.word	0x08005271
 800523c:	08005269 	.word	0x08005269
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e0d6      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e0d2      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e0ce      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e0ca      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005260:	2320      	movs	r3, #32
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e0c6      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e0c2      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e0be      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005278:	40011400 	.word	0x40011400
 800527c:	58024400 	.word	0x58024400
 8005280:	40007800 	.word	0x40007800
 8005284:	40007c00 	.word	0x40007c00
 8005288:	40011800 	.word	0x40011800
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4aad      	ldr	r2, [pc, #692]	; (8005548 <UART_SetConfig+0x900>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d176      	bne.n	8005384 <UART_SetConfig+0x73c>
 8005296:	4bad      	ldr	r3, [pc, #692]	; (800554c <UART_SetConfig+0x904>)
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d86c      	bhi.n	800537c <UART_SetConfig+0x734>
 80052a2:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <UART_SetConfig+0x660>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	0800534d 	.word	0x0800534d
 80052ac:	0800537d 	.word	0x0800537d
 80052b0:	0800537d 	.word	0x0800537d
 80052b4:	0800537d 	.word	0x0800537d
 80052b8:	0800537d 	.word	0x0800537d
 80052bc:	0800537d 	.word	0x0800537d
 80052c0:	0800537d 	.word	0x0800537d
 80052c4:	0800537d 	.word	0x0800537d
 80052c8:	08005355 	.word	0x08005355
 80052cc:	0800537d 	.word	0x0800537d
 80052d0:	0800537d 	.word	0x0800537d
 80052d4:	0800537d 	.word	0x0800537d
 80052d8:	0800537d 	.word	0x0800537d
 80052dc:	0800537d 	.word	0x0800537d
 80052e0:	0800537d 	.word	0x0800537d
 80052e4:	0800537d 	.word	0x0800537d
 80052e8:	0800535d 	.word	0x0800535d
 80052ec:	0800537d 	.word	0x0800537d
 80052f0:	0800537d 	.word	0x0800537d
 80052f4:	0800537d 	.word	0x0800537d
 80052f8:	0800537d 	.word	0x0800537d
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800537d 	.word	0x0800537d
 8005304:	0800537d 	.word	0x0800537d
 8005308:	08005365 	.word	0x08005365
 800530c:	0800537d 	.word	0x0800537d
 8005310:	0800537d 	.word	0x0800537d
 8005314:	0800537d 	.word	0x0800537d
 8005318:	0800537d 	.word	0x0800537d
 800531c:	0800537d 	.word	0x0800537d
 8005320:	0800537d 	.word	0x0800537d
 8005324:	0800537d 	.word	0x0800537d
 8005328:	0800536d 	.word	0x0800536d
 800532c:	0800537d 	.word	0x0800537d
 8005330:	0800537d 	.word	0x0800537d
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800537d 	.word	0x0800537d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	0800537d 	.word	0x0800537d
 8005344:	0800537d 	.word	0x0800537d
 8005348:	08005375 	.word	0x08005375
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e050      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e04c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e048      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e044      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800536c:	2320      	movs	r3, #32
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e040      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005374:	2340      	movs	r3, #64	; 0x40
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e03c      	b.n	80053f6 <UART_SetConfig+0x7ae>
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e038      	b.n	80053f6 <UART_SetConfig+0x7ae>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a71      	ldr	r2, [pc, #452]	; (8005550 <UART_SetConfig+0x908>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d130      	bne.n	80053f0 <UART_SetConfig+0x7a8>
 800538e:	4b6f      	ldr	r3, [pc, #444]	; (800554c <UART_SetConfig+0x904>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b05      	cmp	r3, #5
 8005398:	d826      	bhi.n	80053e8 <UART_SetConfig+0x7a0>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x758>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053b9 	.word	0x080053b9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053c9 	.word	0x080053c9
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053be:	e01a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c6:	e016      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ce:	e012      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e00e      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053d8:	2320      	movs	r3, #32
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e00a      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e006      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e002      	b.n	80053f6 <UART_SetConfig+0x7ae>
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a55      	ldr	r2, [pc, #340]	; (8005550 <UART_SetConfig+0x908>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	f040 80f8 	bne.w	80055f2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005402:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005406:	2b20      	cmp	r3, #32
 8005408:	dc46      	bgt.n	8005498 <UART_SetConfig+0x850>
 800540a:	2b02      	cmp	r3, #2
 800540c:	db75      	blt.n	80054fa <UART_SetConfig+0x8b2>
 800540e:	3b02      	subs	r3, #2
 8005410:	2b1e      	cmp	r3, #30
 8005412:	d872      	bhi.n	80054fa <UART_SetConfig+0x8b2>
 8005414:	a201      	add	r2, pc, #4	; (adr r2, 800541c <UART_SetConfig+0x7d4>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	0800549f 	.word	0x0800549f
 8005420:	080054fb 	.word	0x080054fb
 8005424:	080054a7 	.word	0x080054a7
 8005428:	080054fb 	.word	0x080054fb
 800542c:	080054fb 	.word	0x080054fb
 8005430:	080054fb 	.word	0x080054fb
 8005434:	080054b7 	.word	0x080054b7
 8005438:	080054fb 	.word	0x080054fb
 800543c:	080054fb 	.word	0x080054fb
 8005440:	080054fb 	.word	0x080054fb
 8005444:	080054fb 	.word	0x080054fb
 8005448:	080054fb 	.word	0x080054fb
 800544c:	080054fb 	.word	0x080054fb
 8005450:	080054fb 	.word	0x080054fb
 8005454:	080054c7 	.word	0x080054c7
 8005458:	080054fb 	.word	0x080054fb
 800545c:	080054fb 	.word	0x080054fb
 8005460:	080054fb 	.word	0x080054fb
 8005464:	080054fb 	.word	0x080054fb
 8005468:	080054fb 	.word	0x080054fb
 800546c:	080054fb 	.word	0x080054fb
 8005470:	080054fb 	.word	0x080054fb
 8005474:	080054fb 	.word	0x080054fb
 8005478:	080054fb 	.word	0x080054fb
 800547c:	080054fb 	.word	0x080054fb
 8005480:	080054fb 	.word	0x080054fb
 8005484:	080054fb 	.word	0x080054fb
 8005488:	080054fb 	.word	0x080054fb
 800548c:	080054fb 	.word	0x080054fb
 8005490:	080054fb 	.word	0x080054fb
 8005494:	080054ed 	.word	0x080054ed
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d02a      	beq.n	80054f2 <UART_SetConfig+0x8aa>
 800549c:	e02d      	b.n	80054fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800549e:	f7fe fe63 	bl	8004168 <HAL_RCCEx_GetD3PCLK1Freq>
 80054a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054a4:	e02f      	b.n	8005506 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fe72 	bl	8004194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b4:	e027      	b.n	8005506 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b6:	f107 0318 	add.w	r3, r7, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe ffbe 	bl	800443c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c4:	e01f      	b.n	8005506 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c6:	4b21      	ldr	r3, [pc, #132]	; (800554c <UART_SetConfig+0x904>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <UART_SetConfig+0x904>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <UART_SetConfig+0x90c>)
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054e4:	e00f      	b.n	8005506 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80054e6:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <UART_SetConfig+0x90c>)
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ea:	e00c      	b.n	8005506 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <UART_SetConfig+0x910>)
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f0:	e009      	b.n	8005506 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f8:	e005      	b.n	8005506 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 81ee 	beq.w	80058ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <UART_SetConfig+0x914>)
 8005514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005518:	461a      	mov	r2, r3
 800551a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005520:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4413      	add	r3, r2
 800552c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552e:	429a      	cmp	r2, r3
 8005530:	d305      	bcc.n	800553e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553a:	429a      	cmp	r2, r3
 800553c:	d910      	bls.n	8005560 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005544:	e1d1      	b.n	80058ea <UART_SetConfig+0xca2>
 8005546:	bf00      	nop
 8005548:	40011c00 	.word	0x40011c00
 800554c:	58024400 	.word	0x58024400
 8005550:	58000c00 	.word	0x58000c00
 8005554:	03d09000 	.word	0x03d09000
 8005558:	003d0900 	.word	0x003d0900
 800555c:	08005fec 	.word	0x08005fec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005562:	2200      	movs	r2, #0
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	60fa      	str	r2, [r7, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	4ac0      	ldr	r2, [pc, #768]	; (8005870 <UART_SetConfig+0xc28>)
 800556e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005572:	b29b      	uxth	r3, r3
 8005574:	2200      	movs	r2, #0
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005582:	f7fa fecb 	bl	800031c <__aeabi_uldivmod>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	020b      	lsls	r3, r1, #8
 8005598:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800559c:	0202      	lsls	r2, r0, #8
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	6849      	ldr	r1, [r1, #4]
 80055a2:	0849      	lsrs	r1, r1, #1
 80055a4:	2000      	movs	r0, #0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4605      	mov	r5, r0
 80055aa:	eb12 0804 	adds.w	r8, r2, r4
 80055ae:	eb43 0905 	adc.w	r9, r3, r5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	469a      	mov	sl, r3
 80055ba:	4693      	mov	fp, r2
 80055bc:	4652      	mov	r2, sl
 80055be:	465b      	mov	r3, fp
 80055c0:	4640      	mov	r0, r8
 80055c2:	4649      	mov	r1, r9
 80055c4:	f7fa feaa 	bl	800031c <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d308      	bcc.n	80055ea <UART_SetConfig+0x9a2>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055de:	d204      	bcs.n	80055ea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e6:	60da      	str	r2, [r3, #12]
 80055e8:	e17f      	b.n	80058ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055f0:	e17b      	b.n	80058ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	f040 80bd 	bne.w	8005778 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80055fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005602:	2b20      	cmp	r3, #32
 8005604:	dc48      	bgt.n	8005698 <UART_SetConfig+0xa50>
 8005606:	2b00      	cmp	r3, #0
 8005608:	db7b      	blt.n	8005702 <UART_SetConfig+0xaba>
 800560a:	2b20      	cmp	r3, #32
 800560c:	d879      	bhi.n	8005702 <UART_SetConfig+0xaba>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x9cc>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	0800569f 	.word	0x0800569f
 8005618:	080056a7 	.word	0x080056a7
 800561c:	08005703 	.word	0x08005703
 8005620:	08005703 	.word	0x08005703
 8005624:	080056af 	.word	0x080056af
 8005628:	08005703 	.word	0x08005703
 800562c:	08005703 	.word	0x08005703
 8005630:	08005703 	.word	0x08005703
 8005634:	080056bf 	.word	0x080056bf
 8005638:	08005703 	.word	0x08005703
 800563c:	08005703 	.word	0x08005703
 8005640:	08005703 	.word	0x08005703
 8005644:	08005703 	.word	0x08005703
 8005648:	08005703 	.word	0x08005703
 800564c:	08005703 	.word	0x08005703
 8005650:	08005703 	.word	0x08005703
 8005654:	080056cf 	.word	0x080056cf
 8005658:	08005703 	.word	0x08005703
 800565c:	08005703 	.word	0x08005703
 8005660:	08005703 	.word	0x08005703
 8005664:	08005703 	.word	0x08005703
 8005668:	08005703 	.word	0x08005703
 800566c:	08005703 	.word	0x08005703
 8005670:	08005703 	.word	0x08005703
 8005674:	08005703 	.word	0x08005703
 8005678:	08005703 	.word	0x08005703
 800567c:	08005703 	.word	0x08005703
 8005680:	08005703 	.word	0x08005703
 8005684:	08005703 	.word	0x08005703
 8005688:	08005703 	.word	0x08005703
 800568c:	08005703 	.word	0x08005703
 8005690:	08005703 	.word	0x08005703
 8005694:	080056f5 	.word	0x080056f5
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d02e      	beq.n	80056fa <UART_SetConfig+0xab2>
 800569c:	e031      	b.n	8005702 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569e:	f7fd fb97 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80056a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056a4:	e033      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a6:	f7fd fba9 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 80056aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056ac:	e02f      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fd6e 	bl	8004194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056bc:	e027      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056be:	f107 0318 	add.w	r3, r7, #24
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe feba 	bl	800443c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056cc:	e01f      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ce:	4b69      	ldr	r3, [pc, #420]	; (8005874 <UART_SetConfig+0xc2c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056da:	4b66      	ldr	r3, [pc, #408]	; (8005874 <UART_SetConfig+0xc2c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	08db      	lsrs	r3, r3, #3
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	4a64      	ldr	r2, [pc, #400]	; (8005878 <UART_SetConfig+0xc30>)
 80056e6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056ec:	e00f      	b.n	800570e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80056ee:	4b62      	ldr	r3, [pc, #392]	; (8005878 <UART_SetConfig+0xc30>)
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f2:	e00c      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056f4:	4b61      	ldr	r3, [pc, #388]	; (800587c <UART_SetConfig+0xc34>)
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056f8:	e009      	b.n	800570e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005700:	e005      	b.n	800570e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800570c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80ea 	beq.w	80058ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	4a55      	ldr	r2, [pc, #340]	; (8005870 <UART_SetConfig+0xc28>)
 800571c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005720:	461a      	mov	r2, r3
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	fbb3 f3f2 	udiv	r3, r3, r2
 8005728:	005a      	lsls	r2, r3, #1
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	441a      	add	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	fbb2 f3f3 	udiv	r3, r2, r3
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	2b0f      	cmp	r3, #15
 8005740:	d916      	bls.n	8005770 <UART_SetConfig+0xb28>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d212      	bcs.n	8005770 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	b29b      	uxth	r3, r3
 800574e:	f023 030f 	bic.w	r3, r3, #15
 8005752:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	b29a      	uxth	r2, r3
 8005760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005762:	4313      	orrs	r3, r2
 8005764:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800576c:	60da      	str	r2, [r3, #12]
 800576e:	e0bc      	b.n	80058ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005776:	e0b8      	b.n	80058ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005778:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800577c:	2b20      	cmp	r3, #32
 800577e:	dc4b      	bgt.n	8005818 <UART_SetConfig+0xbd0>
 8005780:	2b00      	cmp	r3, #0
 8005782:	f2c0 8087 	blt.w	8005894 <UART_SetConfig+0xc4c>
 8005786:	2b20      	cmp	r3, #32
 8005788:	f200 8084 	bhi.w	8005894 <UART_SetConfig+0xc4c>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0xb4c>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	0800581f 	.word	0x0800581f
 8005798:	08005827 	.word	0x08005827
 800579c:	08005895 	.word	0x08005895
 80057a0:	08005895 	.word	0x08005895
 80057a4:	0800582f 	.word	0x0800582f
 80057a8:	08005895 	.word	0x08005895
 80057ac:	08005895 	.word	0x08005895
 80057b0:	08005895 	.word	0x08005895
 80057b4:	0800583f 	.word	0x0800583f
 80057b8:	08005895 	.word	0x08005895
 80057bc:	08005895 	.word	0x08005895
 80057c0:	08005895 	.word	0x08005895
 80057c4:	08005895 	.word	0x08005895
 80057c8:	08005895 	.word	0x08005895
 80057cc:	08005895 	.word	0x08005895
 80057d0:	08005895 	.word	0x08005895
 80057d4:	0800584f 	.word	0x0800584f
 80057d8:	08005895 	.word	0x08005895
 80057dc:	08005895 	.word	0x08005895
 80057e0:	08005895 	.word	0x08005895
 80057e4:	08005895 	.word	0x08005895
 80057e8:	08005895 	.word	0x08005895
 80057ec:	08005895 	.word	0x08005895
 80057f0:	08005895 	.word	0x08005895
 80057f4:	08005895 	.word	0x08005895
 80057f8:	08005895 	.word	0x08005895
 80057fc:	08005895 	.word	0x08005895
 8005800:	08005895 	.word	0x08005895
 8005804:	08005895 	.word	0x08005895
 8005808:	08005895 	.word	0x08005895
 800580c:	08005895 	.word	0x08005895
 8005810:	08005895 	.word	0x08005895
 8005814:	08005887 	.word	0x08005887
 8005818:	2b40      	cmp	r3, #64	; 0x40
 800581a:	d037      	beq.n	800588c <UART_SetConfig+0xc44>
 800581c:	e03a      	b.n	8005894 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581e:	f7fd fad7 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8005822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005824:	e03c      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005826:	f7fd fae9 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 800582a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800582c:	e038      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800582e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fcae 	bl	8004194 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800583c:	e030      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800583e:	f107 0318 	add.w	r3, r7, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fdfa 	bl	800443c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584c:	e028      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <UART_SetConfig+0xc2c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <UART_SetConfig+0xc2c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	08db      	lsrs	r3, r3, #3
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	4a04      	ldr	r2, [pc, #16]	; (8005878 <UART_SetConfig+0xc30>)
 8005866:	fa22 f303 	lsr.w	r3, r2, r3
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800586c:	e018      	b.n	80058a0 <UART_SetConfig+0xc58>
 800586e:	bf00      	nop
 8005870:	08005fec 	.word	0x08005fec
 8005874:	58024400 	.word	0x58024400
 8005878:	03d09000 	.word	0x03d09000
 800587c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005880:	4b24      	ldr	r3, [pc, #144]	; (8005914 <UART_SetConfig+0xccc>)
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e00c      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <UART_SetConfig+0xcd0>)
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800588a:	e009      	b.n	80058a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005892:	e005      	b.n	80058a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800589e:	bf00      	nop
    }

    if (pclk != 0U)
 80058a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d021      	beq.n	80058ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <UART_SetConfig+0xcd4>)
 80058ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	441a      	add	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d909      	bls.n	80058e4 <UART_SetConfig+0xc9c>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d205      	bcs.n	80058e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	b29a      	uxth	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e002      	b.n	80058ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005906:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800590a:	4618      	mov	r0, r3
 800590c:	3748      	adds	r7, #72	; 0x48
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005914:	03d09000 	.word	0x03d09000
 8005918:	003d0900 	.word	0x003d0900
 800591c:	08005fec 	.word	0x08005fec

08005920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1e:	d10a      	bne.n	8005a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b098      	sub	sp, #96	; 0x60
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a74:	f7fb fb4e 	bl	8001114 <HAL_GetTick>
 8005a78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d12f      	bne.n	8005ae8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a90:	2200      	movs	r2, #0
 8005a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f88e 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d022      	beq.n	8005ae8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e6      	bne.n	8005aa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e063      	b.n	8005bb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d149      	bne.n	8005b8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afe:	2200      	movs	r2, #0
 8005b00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f857 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03c      	beq.n	8005b8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e6      	bne.n	8005b10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b62:	61fa      	str	r2, [r7, #28]
 8005b64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e012      	b.n	8005bb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3758      	adds	r7, #88	; 0x58
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc8:	e049      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d045      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fb fa9f 	bl	8001114 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e048      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d031      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d110      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f839 	bl	8005c88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e029      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c38:	d111      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f81f 	bl	8005c88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d0a6      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b095      	sub	sp, #84	; 0x54
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e6      	bne.n	8005c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <UART_EndRxTransfer+0xc8>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d118      	bne.n	8005d30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6979      	ldr	r1, [r7, #20]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e6      	bne.n	8005cfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d44:	bf00      	nop
 8005d46:	3754      	adds	r7, #84	; 0x54
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	effffffe 	.word	0xeffffffe

08005d54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UARTEx_DisableFifoMode+0x16>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e027      	b.n	8005dba <HAL_UARTEx_DisableFifoMode+0x66>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e02d      	b.n	8005e3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2224      	movs	r2, #36	; 0x24
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f850 	bl	8005ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e02d      	b.n	8005eb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2224      	movs	r2, #36	; 0x24
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f812 	bl	8005ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d108      	bne.n	8005ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ee0:	e031      	b.n	8005f46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	0e5b      	lsrs	r3, r3, #25
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	0f5b      	lsrs	r3, r3, #29
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	7b3a      	ldrb	r2, [r7, #12]
 8005f0e:	4911      	ldr	r1, [pc, #68]	; (8005f54 <UARTEx_SetNbDataToProcess+0x94>)
 8005f10:	5c8a      	ldrb	r2, [r1, r2]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f16:	7b3a      	ldrb	r2, [r7, #12]
 8005f18:	490f      	ldr	r1, [pc, #60]	; (8005f58 <UARTEx_SetNbDataToProcess+0x98>)
 8005f1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	7b7a      	ldrb	r2, [r7, #13]
 8005f2c:	4909      	ldr	r1, [pc, #36]	; (8005f54 <UARTEx_SetNbDataToProcess+0x94>)
 8005f2e:	5c8a      	ldrb	r2, [r1, r2]
 8005f30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f34:	7b7a      	ldrb	r2, [r7, #13]
 8005f36:	4908      	ldr	r1, [pc, #32]	; (8005f58 <UARTEx_SetNbDataToProcess+0x98>)
 8005f38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	08006004 	.word	0x08006004
 8005f58:	0800600c 	.word	0x0800600c

08005f5c <memset>:
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d100      	bne.n	8005f66 <memset+0xa>
 8005f64:	4770      	bx	lr
 8005f66:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6a:	e7f9      	b.n	8005f60 <memset+0x4>

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4d0d      	ldr	r5, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1b64      	subs	r4, r4, r5
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2600      	movs	r6, #0
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4d0b      	ldr	r5, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f000 f818 	bl	8005fb4 <_init>
 8005f84:	1b64      	subs	r4, r4, r5
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2600      	movs	r6, #0
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	0800601c 	.word	0x0800601c
 8005fa8:	0800601c 	.word	0x0800601c
 8005fac:	0800601c 	.word	0x0800601c
 8005fb0:	08006020 	.word	0x08006020

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
